{"/home/travis/build/npmtest/node-npmtest-mongodb-core/test.js":"/* istanbul instrument in package npmtest_mongodb_core */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/lib.npmtest_mongodb_core.js":"/* istanbul instrument in package npmtest_mongodb_core */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mongodb_core = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mongodb_core = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mongodb-core && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mongodb_core */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mongodb_core\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mongodb_core.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mongodb_core.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mongodb_core.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mongodb_core.__dirname + '/lib.npmtest_mongodb_core.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/index.js":"var BSON = require('bson');\n\ntry {\n  // try { BSON = require('bson-ext'); } catch(err) {\n    BSON = require_optional('bson-ext');\n  // }\n} catch(err) {}\n\nmodule.exports = {\n    MongoError: require('./lib/error')\n  , Connection: require('./lib/connection/connection')\n  , Server: require('./lib/topologies/server')\n  , ReplSet: require('./lib/topologies/replset')\n  , Mongos: require('./lib/topologies/mongos')\n  , Logger: require('./lib/connection/logger')\n  , Cursor: require('./lib/cursor')\n  , ReadPreference: require('./lib/topologies/read_preference')\n  , BSON: BSON\n  // Raw operations\n  , Query: require('./lib/connection/commands').Query\n  // Auth mechanisms\n  , MongoCR: require('./lib/auth/mongocr')\n  , X509: require('./lib/auth/x509')\n  , Plain: require('./lib/auth/plain')\n  , GSSAPI: require('./lib/auth/gssapi')\n  , ScramSHA1: require('./lib/auth/scram')\n}\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/error.js":"\"use strict\";\n\n/**\n * Creates a new MongoError\n * @class\n * @augments Error\n * @param {string} message The error message\n * @return {MongoError} A MongoError instance\n */\nfunction MongoError(message) {\n  this.name = 'MongoError';\n  this.message = message;\n  Error.captureStackTrace(this, MongoError);\n}\n\n/**\n * Creates a new MongoError object\n * @method\n * @param {object} options The error options\n * @return {MongoError} A MongoError instance\n */\nMongoError.create = function(options) {\n  var err = null;\n\n  if(options instanceof Error) {\n    err = new MongoError(options.message);\n    err.stack = options.stack;\n  } else if(typeof options == 'string') {\n    err = new MongoError(options);\n  } else {\n    err = new MongoError(options.message || options.errmsg || options.$err || \"n/a\");\n    // Other options\n    for(var name in options) {\n      err[name] = options[name];\n    }\n  }\n\n  return err;\n}\n\n// Extend JavaScript error\nMongoError.prototype = new Error;\n\nmodule.exports = MongoError;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/connection/connection.js":"\"use strict\";\n\nvar inherits = require('util').inherits\n  , EventEmitter = require('events').EventEmitter\n  , net = require('net')\n  , tls = require('tls')\n  , crypto = require('crypto')\n  , f = require('util').format\n  , debugOptions = require('./utils').debugOptions\n  , Response = require('./commands').Response\n  , MongoError = require('../error')\n  , Logger = require('./logger');\n\nvar _id = 0;\nvar debugFields = ['host', 'port', 'size', 'keepAlive', 'keepAliveInitialDelay', 'noDelay'\n  , 'connectionTimeout', 'socketTimeout', 'singleBufferSerializtion', 'ssl', 'ca', 'crl', 'cert'\n  , 'rejectUnauthorized', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'checkServerIdentity'];\nvar connectionAccounting = false;\nvar connections = {};\n\n/**\n * Creates a new Connection instance\n * @class\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=0] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @fires Connection#connect\n * @fires Connection#close\n * @fires Connection#error\n * @fires Connection#timeout\n * @fires Connection#parseError\n * @return {Connection} A cursor instance\n */\nvar Connection = function(messageHandler, options) {\n  // Add event listener\n  EventEmitter.call(this);\n  // Set empty if no options passed\n  this.options = options || {};\n  // Identification information\n  this.id = _id++;\n  // Logger instance\n  this.logger = Logger('Connection', options);\n  // No bson parser passed in\n  if(!options.bson) throw new Error(\"must pass in valid bson parser\");\n  // Get bson parser\n  this.bson = options.bson;\n  // Grouping tag used for debugging purposes\n  this.tag = options.tag;\n  // Message handler\n  this.messageHandler = messageHandler;\n\n  // Max BSON message size\n  this.maxBsonMessageSize = options.maxBsonMessageSize || (1024 * 1024 * 16 * 4);\n  // Debug information\n  if(this.logger.isDebug()) this.logger.debug(f('creating connection %s with options [%s]', this.id, JSON.stringify(debugOptions(debugFields, options))));\n\n  // Default options\n  this.port = options.port || 27017;\n  this.host = options.host || 'localhost';\n  this.keepAlive = typeof options.keepAlive == 'boolean' ? options.keepAlive : true;\n  this.keepAliveInitialDelay = options.keepAliveInitialDelay || 0;\n  this.noDelay = typeof options.noDelay == 'boolean' ? options.noDelay : true;\n  this.connectionTimeout = options.connectionTimeout || 0;\n  this.socketTimeout = options.socketTimeout || 0;\n\n  // If connection was destroyed\n  this.destroyed = false;\n\n  // Check if we have a domain socket\n  this.domainSocket = this.host.indexOf('\\/') != -1;\n\n  // Serialize commands using function\n  this.singleBufferSerializtion = typeof options.singleBufferSerializtion == 'boolean' ? options.singleBufferSerializtion : true;\n  this.serializationFunction = this.singleBufferSerializtion ? 'toBinUnified' : 'toBin';\n\n  // SSL options\n  this.ca = options.ca || null;\n  this.crl = options.crl || null;\n  this.cert = options.cert || null;\n  this.key = options.key || null;\n  this.passphrase = options.passphrase || null;\n  this.ssl = typeof options.ssl == 'boolean' ? options.ssl : false;\n  this.rejectUnauthorized = typeof options.rejectUnauthorized == 'boolean' ? options.rejectUnauthorized : true;\n  this.checkServerIdentity = typeof options.checkServerIdentity == 'boolean'\n    || typeof options.checkServerIdentity == 'function' ? options.checkServerIdentity : true;\n\n  // If ssl not enabled\n  if(!this.ssl) this.rejectUnauthorized = false;\n\n  // Response options\n  this.responseOptions = {\n    promoteLongs: typeof options.promoteLongs == 'boolean' ?  options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues == 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers == 'boolean' ? options.promoteBuffers: false\n  }\n\n  // Flushing\n  this.flushing = false;\n  this.queue = [];\n\n  // Internal state\n  this.connection = null;\n  this.writeStream = null;\n\n  // Create hash method\n  var hash = crypto.createHash('sha1');\n  hash.update(f('%s:%s', this.host, this.port));\n\n  // Create a hash name\n  this.hashedName = hash.digest('hex');\n\n  // All operations in flight on the connection\n  this.workItems = [];\n}\n\ninherits(Connection, EventEmitter);\n\nConnection.prototype.setSocketTimeout = function(value) {\n  if(this.connection) {\n    this.connection.setTimeout(value);\n  }\n}\n\nConnection.prototype.resetSocketTimeout = function() {\n  if(this.connection) {\n    this.connection.setTimeout(this.socketTimeout);\n  }\n}\n\nConnection.enableConnectionAccounting = function() {\n  connectionAccounting = true;\n  connections = {};\n}\n\nConnection.disableConnectionAccounting = function() {\n  connectionAccounting = false;\n}\n\nConnection.connections = function() {\n  return connections;\n}\n\nfunction deleteConnection(id) {\n  // console.log(\"=== deleted connection \" + id + \" :: \" + (connections[id] ? connections[id].port : ''))\n  delete connections[id];\n}\n\nfunction addConnection(id, connection) {\n  // console.log(\"=== added connection \" + id + \" :: \" + connection.port)\n  connections[id] = connection;\n}\n\n//\n// Connection handlers\nvar errorHandler = function(self) {\n  return function(err) {\n    if(connectionAccounting) deleteConnection(self.id);\n    // Debug information\n    if(self.logger.isDebug()) self.logger.debug(f('connection %s for [%s:%s] errored out with [%s]', self.id, self.host, self.port, JSON.stringify(err)));\n    // Emit the error\n    if(self.listeners('error').length > 0) self.emit(\"error\", MongoError.create(err), self);\n  }\n}\n\nvar timeoutHandler = function(self) {\n  return function() {\n    if(connectionAccounting) deleteConnection(self.id);\n    // Debug information\n    if(self.logger.isDebug()) self.logger.debug(f('connection %s for [%s:%s] timed out', self.id, self.host, self.port));\n    // Emit timeout error\n    self.emit(\"timeout\"\n      , MongoError.create(f(\"connection %s to %s:%s timed out\", self.id, self.host, self.port))\n      , self);\n  }\n}\n\nvar closeHandler = function(self) {\n  return function(hadError) {\n    if(connectionAccounting) deleteConnection(self.id);\n    // Debug information\n    if(self.logger.isDebug()) self.logger.debug(f('connection %s with for [%s:%s] closed', self.id, self.host, self.port));\n\n    // Emit close event\n    if(!hadError) {\n      self.emit(\"close\"\n        , MongoError.create(f(\"connection %s to %s:%s closed\", self.id, self.host, self.port))\n        , self);\n    }\n  }\n}\n\nvar dataHandler = function(self) {\n  return function(data) {\n    // Parse until we are done with the data\n    while(data.length > 0) {\n      // If we still have bytes to read on the current message\n      if(self.bytesRead > 0 && self.sizeOfMessage > 0) {\n        // Calculate the amount of remaining bytes\n        var remainingBytesToRead = self.sizeOfMessage - self.bytesRead;\n        // Check if the current chunk contains the rest of the message\n        if(remainingBytesToRead > data.length) {\n          // Copy the new data into the exiting buffer (should have been allocated when we know the message size)\n          data.copy(self.buffer, self.bytesRead);\n          // Adjust the number of bytes read so it point to the correct index in the buffer\n          self.bytesRead = self.bytesRead + data.length;\n\n          // Reset state of buffer\n          data = new Buffer(0);\n        } else {\n          // Copy the missing part of the data into our current buffer\n          data.copy(self.buffer, self.bytesRead, 0, remainingBytesToRead);\n          // Slice the overflow into a new buffer that we will then re-parse\n          data = data.slice(remainingBytesToRead);\n\n          // Emit current complete message\n          try {\n            var emitBuffer = self.buffer;\n            // Reset state of buffer\n            self.buffer = null;\n            self.sizeOfMessage = 0;\n            self.bytesRead = 0;\n            self.stubBuffer = null;\n            // Emit the buffer\n            self.messageHandler(new Response(self.bson, emitBuffer, self.responseOptions), self);\n          } catch(err) {\n            var errorObject = {err:\"socketHandler\", trace:err, bin:self.buffer, parseState:{\n              sizeOfMessage:self.sizeOfMessage,\n              bytesRead:self.bytesRead,\n              stubBuffer:self.stubBuffer}};\n            // We got a parse Error fire it off then keep going\n            self.emit(\"parseError\", errorObject, self);\n          }\n        }\n      } else {\n        // Stub buffer is kept in case we don't get enough bytes to determine the\n        // size of the message (< 4 bytes)\n        if(self.stubBuffer != null && self.stubBuffer.length > 0) {\n          // If we have enough bytes to determine the message size let's do it\n          if(self.stubBuffer.length + data.length > 4) {\n            // Prepad the data\n            var newData = new Buffer(self.stubBuffer.length + data.length);\n            self.stubBuffer.copy(newData, 0);\n            data.copy(newData, self.stubBuffer.length);\n            // Reassign for parsing\n            data = newData;\n\n            // Reset state of buffer\n            self.buffer = null;\n            self.sizeOfMessage = 0;\n            self.bytesRead = 0;\n            self.stubBuffer = null;\n\n          } else {\n\n            // Add the the bytes to the stub buffer\n            var newStubBuffer = new Buffer(self.stubBuffer.length + data.length);\n            // Copy existing stub buffer\n            self.stubBuffer.copy(newStubBuffer, 0);\n            // Copy missing part of the data\n            data.copy(newStubBuffer, self.stubBuffer.length);\n            // Exit parsing loop\n            data = new Buffer(0);\n          }\n        } else {\n          if(data.length > 4) {\n            // Retrieve the message size\n            // var sizeOfMessage = data.readUInt32LE(0);\n            var sizeOfMessage = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;\n            // If we have a negative sizeOfMessage emit error and return\n            if(sizeOfMessage < 0 || sizeOfMessage > self.maxBsonMessageSize) {\n              errorObject = {err:\"socketHandler\", trace:'', bin:self.buffer, parseState:{\n                sizeOfMessage: sizeOfMessage,\n                bytesRead: self.bytesRead,\n                stubBuffer: self.stubBuffer}};\n              // We got a parse Error fire it off then keep going\n              self.emit(\"parseError\", errorObject, self);\n              return;\n            }\n\n            // Ensure that the size of message is larger than 0 and less than the max allowed\n            if(sizeOfMessage > 4 && sizeOfMessage < self.maxBsonMessageSize && sizeOfMessage > data.length) {\n              self.buffer = new Buffer(sizeOfMessage);\n              // Copy all the data into the buffer\n              data.copy(self.buffer, 0);\n              // Update bytes read\n              self.bytesRead = data.length;\n              // Update sizeOfMessage\n              self.sizeOfMessage = sizeOfMessage;\n              // Ensure stub buffer is null\n              self.stubBuffer = null;\n              // Exit parsing loop\n              data = new Buffer(0);\n\n            } else if(sizeOfMessage > 4 && sizeOfMessage < self.maxBsonMessageSize && sizeOfMessage == data.length) {\n              try {\n                emitBuffer = data;\n                // Reset state of buffer\n                self.buffer = null;\n                self.sizeOfMessage = 0;\n                self.bytesRead = 0;\n                self.stubBuffer = null;\n                // Exit parsing loop\n                data = new Buffer(0);\n                // Emit the message\n                self.messageHandler(new Response(self.bson, emitBuffer, self.responseOptions), self);\n              } catch (err) {\n                self.emit(\"parseError\", err, self);\n              }\n            } else if(sizeOfMessage <= 4 || sizeOfMessage > self.maxBsonMessageSize) {\n              errorObject = {err:\"socketHandler\", trace:null, bin:data, parseState:{\n                sizeOfMessage:sizeOfMessage,\n                bytesRead:0,\n                buffer:null,\n                stubBuffer:null}};\n              // We got a parse Error fire it off then keep going\n              self.emit(\"parseError\", errorObject, self);\n\n              // Clear out the state of the parser\n              self.buffer = null;\n              self.sizeOfMessage = 0;\n              self.bytesRead = 0;\n              self.stubBuffer = null;\n              // Exit parsing loop\n              data = new Buffer(0);\n            } else {\n              emitBuffer = data.slice(0, sizeOfMessage);\n              // Reset state of buffer\n              self.buffer = null;\n              self.sizeOfMessage = 0;\n              self.bytesRead = 0;\n              self.stubBuffer = null;\n              // Copy rest of message\n              data = data.slice(sizeOfMessage);\n              // Emit the message\n              self.messageHandler(new Response(self.bson, emitBuffer, self.responseOptions), self);\n            }\n          } else {\n            // Create a buffer that contains the space for the non-complete message\n            self.stubBuffer = new Buffer(data.length)\n            // Copy the data to the stub buffer\n            data.copy(self.stubBuffer, 0);\n            // Exit parsing loop\n            data = new Buffer(0);\n          }\n        }\n      }\n    }\n  }\n}\n\n// List of socket level valid ssl options\nvar legalSslSocketOptions = ['pfx', 'key', 'passphrase', 'cert', 'ca', 'ciphers'\n  , 'NPNProtocols', 'ALPNProtocols', 'servername'\n  , 'secureProtocol', 'secureContext', 'session'\n  , 'minDHSize'];\n\nfunction merge(options1, options2) {\n  // Merge in any allowed ssl options\n  for(var name in options2) {\n    if(options2[name] != null && legalSslSocketOptions.indexOf(name) != -1) {\n      options1[name] = options2[name];\n    }\n  }\n}\n\n/**\n * Connect\n * @method\n */\nConnection.prototype.connect = function(_options) {\n  var self = this;\n  _options = _options || {};\n  // Set the connections\n  if(connectionAccounting) addConnection(this.id, this);\n  // Check if we are overriding the promoteLongs\n  if(typeof _options.promoteLongs == 'boolean') {\n    self.responseOptions.promoteLongs = _options.promoteLongs;\n    self.responseOptions.promoteValues = _options.promoteValues;\n    self.responseOptions.promoteBuffers = _options.promoteBuffers;\n  }\n\n  // Create new connection instance\n  self.connection = self.domainSocket\n    ? net.createConnection(self.host)\n    : net.createConnection(self.port, self.host);\n\n  // Set the options for the connection\n  self.connection.setKeepAlive(self.keepAlive, self.keepAliveInitialDelay);\n  self.connection.setTimeout(self.connectionTimeout);\n  self.connection.setNoDelay(self.noDelay);\n\n  // If we have ssl enabled\n  if(self.ssl) {\n    var sslOptions = {\n        socket: self.connection\n      , rejectUnauthorized: self.rejectUnauthorized\n    }\n\n    // Merge in options\n    merge(sslOptions, this.options);\n    merge(sslOptions, _options);\n\n    // Set options for ssl\n    if(self.ca) sslOptions.ca = self.ca;\n    if(self.crl) sslOptions.crl = self.crl;\n    if(self.cert) sslOptions.cert = self.cert;\n    if(self.key) sslOptions.key = self.key;\n    if(self.passphrase) sslOptions.passphrase = self.passphrase;\n\n    // Override checkServerIdentity behavior\n    if(self.checkServerIdentity == false) {\n      // Skip the identiy check by retuning undefined as per node documents\n      // https://nodejs.org/api/tls.html#tls_tls_connect_options_callback\n      sslOptions.checkServerIdentity = function() {\n        return undefined;\n      }\n    } else if(typeof self.checkServerIdentity == 'function') {\n      sslOptions.checkServerIdentity = self.checkServerIdentity;\n    }\n\n    // Set default sni servername to be the same as host\n    if(sslOptions.servername == null) {\n      sslOptions.servername = self.host;\n    }\n\n    // Attempt SSL connection\n    self.connection = tls.connect(self.port, self.host, sslOptions, function() {\n      // Error on auth or skip\n      if(self.connection.authorizationError && self.rejectUnauthorized) {\n        return self.emit(\"error\", self.connection.authorizationError, self, {ssl:true});\n      }\n\n      // Set socket timeout instead of connection timeout\n      self.connection.setTimeout(self.socketTimeout);\n      // We are done emit connect\n      self.emit('connect', self);\n    });\n    self.connection.setTimeout(self.connectionTimeout);\n  } else {\n    self.connection.on('connect', function() {\n      // Set socket timeout instead of connection timeout\n      self.connection.setTimeout(self.socketTimeout);\n      // Emit connect event\n      self.emit('connect', self);\n    });\n  }\n\n  // Add handlers for events\n  self.connection.once('error', errorHandler(self));\n  self.connection.once('timeout', timeoutHandler(self));\n  self.connection.once('close', closeHandler(self));\n  self.connection.on('data', dataHandler(self));\n}\n\n/**\n * Unref this connection\n * @method\n * @return {boolean}\n */\nConnection.prototype.unref = function() {\n  if (this.connection) this.connection.unref();\n  else {\n    var self = this;\n    this.once('connect', function() {\n      self.connection.unref();\n    });\n  }\n}\n\n/**\n * Destroy connection\n * @method\n */\nConnection.prototype.destroy = function() {\n  // Set the connections\n  if(connectionAccounting) deleteConnection(this.id);\n  if(this.connection) {\n    // Catch posssible exception thrown by node 0.10.x\n    try { this.connection.end(); } catch (err) {}\n    // Destroy connection\n    this.connection.destroy();\n  }\n\n  this.destroyed = true;\n}\n\n/**\n * Write to connection\n * @method\n * @param {Command} command Command to write out need to implement toBin and toBinUnified\n */\nConnection.prototype.write = function(buffer) {\n  var i;\n  // Debug Log\n  if(this.logger.isDebug()) {\n    if(!Array.isArray(buffer)) {\n      this.logger.debug(f('writing buffer [%s] to %s:%s', buffer.toString('hex'), this.host, this.port));\n    } else {\n      for(i = 0; i < buffer.length; i++)\n        this.logger.debug(f('writing buffer [%s] to %s:%s', buffer[i].toString('hex'), this.host, this.port));\n    }\n  }\n\n  // Write out the command\n  if(!Array.isArray(buffer)) return this.connection.write(buffer, 'binary');\n  // Iterate over all buffers and write them in order to the socket\n  for(i = 0; i < buffer.length; i++) this.connection.write(buffer[i], 'binary');\n}\n\n/**\n * Return id of connection as a string\n * @method\n * @return {string}\n */\nConnection.prototype.toString = function() {\n  return \"\" + this.id;\n}\n\n/**\n * Return json object of connection\n * @method\n * @return {object}\n */\nConnection.prototype.toJSON = function() {\n  return {id: this.id, host: this.host, port: this.port};\n}\n\n/**\n * Is the connection connected\n * @method\n * @return {boolean}\n */\nConnection.prototype.isConnected = function() {\n  if(this.destroyed) return false;\n  return !this.connection.destroyed && this.connection.writable;\n}\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Connection#connect\n * @type {Connection}\n */\n\n/**\n * The server connection closed, all pool connections closed\n *\n * @event Connection#close\n * @type {Connection}\n */\n\n/**\n * The server connection caused an error, all pool connections closed\n *\n * @event Connection#error\n * @type {Connection}\n */\n\n/**\n * The server connection timed out, all pool connections closed\n *\n * @event Connection#timeout\n * @type {Connection}\n */\n\n/**\n * The driver experienced an invalid message, all pool connections closed\n *\n * @event Connection#parseError\n * @type {Connection}\n */\n\nmodule.exports = Connection;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/connection/utils.js":"\"use strict\";\n\nvar f = require('util').format,\n  require_optional = require('require_optional');\n\n// Set property function\nvar setProperty = function(obj, prop, flag, values) {\n  Object.defineProperty(obj, prop.name, {\n      enumerable:true,\n      set: function(value) {\n        if(typeof value != 'boolean') throw new Error(f(\"%s required a boolean\", prop.name));\n        // Flip the bit to 1\n        if(value == true) values.flags |= flag;\n        // Flip the bit to 0 if it's set, otherwise ignore\n        if(value == false && (values.flags & flag) == flag) values.flags ^= flag;\n        prop.value = value;\n      }\n    , get: function() { return prop.value; }\n  });\n}\n\n// Set property function\nvar getProperty = function(obj, propName, fieldName, values, func) {\n  Object.defineProperty(obj, propName, {\n    enumerable:true,\n    get: function() {\n      // Not parsed yet, parse it\n      if(values[fieldName] == null && obj.isParsed && !obj.isParsed()) {\n        obj.parse();\n      }\n\n      // Do we have a post processing function\n      if(typeof func == 'function') return func(values[fieldName]);\n      // Return raw value\n      return values[fieldName];\n    }\n  });\n}\n\n// Set simple property\nvar getSingleProperty = function(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    enumerable:true,\n    get: function() {\n      return value\n    }\n  });\n}\n\n// Shallow copy\nvar copy = function(fObj, tObj) {\n  tObj = tObj || {};\n  for(var name in fObj) tObj[name] = fObj[name];\n  return tObj;\n}\n\nvar debugOptions = function(debugFields, options) {\n  var finaloptions = {};\n  debugFields.forEach(function(n) {\n    finaloptions[n] = options[n];\n  });\n\n  return finaloptions;\n}\n\nvar retrieveBSON = function() {\n  var BSON = require('bson');\n  BSON.native = false;\n\n  try {\n    // try {\n    //   BSON = require('bson-ext');\n    //   BSON.native = true;\n    // } catch(err) {\n      var optionalBSON = require_optional('bson-ext');\n      if(optionalBSON) {\n        optionalBSON.native = true;\n        return optionalBSON;\n      }\n    // }\n  } catch(err) {}\n\n  return BSON;\n}\n\nexports.setProperty = setProperty;\nexports.getProperty = getProperty;\nexports.getSingleProperty = getSingleProperty;\nexports.copy = copy;\nexports.debugOptions = debugOptions;\nexports.retrieveBSON = retrieveBSON;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/connection/commands.js":"\"use strict\";\n\nvar retrieveBSON = require('../connection/utils').retrieveBSON;\nvar BSON = retrieveBSON();\nvar Long = BSON.Long;\n\n// Incrementing request id\nvar _requestId = 0;\n\n// Wire command operation ids\nvar OP_QUERY = 2004;\nvar OP_GETMORE = 2005;\nvar OP_KILL_CURSORS = 2007;\n\n// Query flags\nvar OPTS_TAILABLE_CURSOR = 2;\nvar OPTS_SLAVE = 4;\nvar OPTS_OPLOG_REPLAY = 8;\nvar OPTS_NO_CURSOR_TIMEOUT = 16;\nvar OPTS_AWAIT_DATA = 32;\nvar OPTS_EXHAUST = 64;\nvar OPTS_PARTIAL = 128;\n\n// Response flags\nvar CURSOR_NOT_FOUND = 0;\nvar QUERY_FAILURE = 2;\nvar SHARD_CONFIG_STALE = 4;\nvar AWAIT_CAPABLE = 8;\n\n/**************************************************************\n * QUERY\n **************************************************************/\nvar Query = function(bson, ns, query, options) {\n  var self = this;\n  // Basic options needed to be passed in\n  if(ns == null) throw new Error(\"ns must be specified for query\");\n  if(query == null) throw new Error(\"query must be specified for query\");\n\n  // Validate that we are not passing 0x00 in the collection name\n  if(!!~ns.indexOf(\"\\x00\")) {\n    throw new Error(\"namespace cannot contain a null character\");\n  }\n\n  // Basic options\n  this.bson = bson;\n  this.ns = ns;\n  this.query = query;\n\n  // Ensure empty options\n  this.options = options || {};\n\n  // Additional options\n  this.numberToSkip = options.numberToSkip || 0;\n  this.numberToReturn = options.numberToReturn || 0;\n  this.returnFieldSelector = options.returnFieldSelector || null;\n  this.requestId = Query.getRequestId();\n\n  // Serialization option\n  this.serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;\n  this.ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false;\n  this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n  this.checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys : true;\n  this.batchSize = self.numberToReturn;\n\n  // Flags\n  this.tailable = false;\n  this.slaveOk = typeof options.slaveOk == 'boolean'? options.slaveOk : false;\n  this.oplogReplay = false;\n  this.noCursorTimeout = false;\n  this.awaitData = false;\n  this.exhaust = false;\n  this.partial = false;\n}\n\n//\n// Assign a new request Id\nQuery.prototype.incRequestId = function() {\n  this.requestId = _requestId++;\n}\n\n//\n// Assign a new request Id\nQuery.nextRequestId = function() {\n  return _requestId + 1;\n}\n\n//\n// Uses a single allocated buffer for the process, avoiding multiple memory allocations\nQuery.prototype.toBin = function() {\n  var self = this;\n  var buffers = [];\n  var projection = null;\n\n  // Set up the flags\n  var flags = 0;\n  if(this.tailable) {\n    flags |= OPTS_TAILABLE_CURSOR;\n  }\n\n  if(this.slaveOk) {\n    flags |= OPTS_SLAVE;\n  }\n\n  if(this.oplogReplay) {\n    flags |= OPTS_OPLOG_REPLAY;\n  }\n\n  if(this.noCursorTimeout) {\n    flags |= OPTS_NO_CURSOR_TIMEOUT;\n  }\n\n  if(this.awaitData) {\n    flags |= OPTS_AWAIT_DATA;\n  }\n\n  if(this.exhaust) {\n    flags |= OPTS_EXHAUST;\n  }\n\n  if(this.partial) {\n    flags |= OPTS_PARTIAL;\n  }\n\n  // If batchSize is different to self.numberToReturn\n  if(self.batchSize != self.numberToReturn) self.numberToReturn = self.batchSize;\n\n  // Allocate write protocol header buffer\n  var header = new Buffer(\n    4 * 4 // Header\n    + 4   // Flags\n    + Buffer.byteLength(self.ns) + 1 // namespace\n    + 4 // numberToSkip\n    + 4 // numberToReturn\n  );\n\n  // Add header to buffers\n  buffers.push(header);\n\n  // Serialize the query\n  var query = self.bson.serialize(this.query, {\n    checkKeys: this.checkKeys,\n    serializeFunctions: this.serializeFunctions,\n    ignoreUndefined: this.ignoreUndefined,\n  });\n\n  // Add query document\n  buffers.push(query);\n\n  if(self.returnFieldSelector && Object.keys(self.returnFieldSelector).length > 0) {\n    // Serialize the projection document\n    projection = self.bson.serialize(this.returnFieldSelector, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined,\n    });\n    // Add projection document\n    buffers.push(projection);\n  }\n\n  // Total message size\n  var totalLength = header.length + query.length + (projection ? projection.length : 0);\n\n  // Set up the index\n  var index = 4;\n\n  // Write total document length\n  header[3] = (totalLength >> 24) & 0xff;\n  header[2] = (totalLength >> 16) & 0xff;\n  header[1] = (totalLength >> 8) & 0xff;\n  header[0] = (totalLength) & 0xff;\n\n  // Write header information requestId\n  header[index + 3] = (this.requestId >> 24) & 0xff;\n  header[index + 2] = (this.requestId >> 16) & 0xff;\n  header[index + 1] = (this.requestId >> 8) & 0xff;\n  header[index] = (this.requestId) & 0xff;\n  index = index + 4;\n\n  // Write header information responseTo\n  header[index + 3] = (0 >> 24) & 0xff;\n  header[index + 2] = (0 >> 16) & 0xff;\n  header[index + 1] = (0 >> 8) & 0xff;\n  header[index] = (0) & 0xff;\n  index = index + 4;\n\n  // Write header information OP_QUERY\n  header[index + 3] = (OP_QUERY >> 24) & 0xff;\n  header[index + 2] = (OP_QUERY >> 16) & 0xff;\n  header[index + 1] = (OP_QUERY >> 8) & 0xff;\n  header[index] = (OP_QUERY) & 0xff;\n  index = index + 4;\n\n  // Write header information flags\n  header[index + 3] = (flags >> 24) & 0xff;\n  header[index + 2] = (flags >> 16) & 0xff;\n  header[index + 1] = (flags >> 8) & 0xff;\n  header[index] = (flags) & 0xff;\n  index = index + 4;\n\n  // Write collection name\n  index = index + header.write(this.ns, index, 'utf8') + 1;\n  header[index - 1] = 0;\n\n  // Write header information flags numberToSkip\n  header[index + 3] = (this.numberToSkip >> 24) & 0xff;\n  header[index + 2] = (this.numberToSkip >> 16) & 0xff;\n  header[index + 1] = (this.numberToSkip >> 8) & 0xff;\n  header[index] = (this.numberToSkip) & 0xff;\n  index = index + 4;\n\n  // Write header information flags numberToReturn\n  header[index + 3] = (this.numberToReturn >> 24) & 0xff;\n  header[index + 2] = (this.numberToReturn >> 16) & 0xff;\n  header[index + 1] = (this.numberToReturn >> 8) & 0xff;\n  header[index] = (this.numberToReturn) & 0xff;\n  index = index + 4;\n\n  // Return the buffers\n  return buffers;\n}\n\nQuery.getRequestId = function() {\n  return ++_requestId;\n}\n\n/**************************************************************\n * GETMORE\n **************************************************************/\nvar GetMore = function(bson, ns, cursorId, opts) {\n  opts = opts || {};\n  this.numberToReturn = opts.numberToReturn || 0;\n  this.requestId = _requestId++;\n  this.bson = bson;\n  this.ns = ns;\n  this.cursorId = cursorId;\n}\n\n//\n// Uses a single allocated buffer for the process, avoiding multiple memory allocations\nGetMore.prototype.toBin = function() {\n  var length = 4 + Buffer.byteLength(this.ns) + 1 + 4 + 8 + (4 * 4);\n  // Create command buffer\n  var index = 0;\n  // Allocate buffer\n  var _buffer = new Buffer(length);\n\n  // Write header information\n  // index = write32bit(index, _buffer, length);\n  _buffer[index + 3] = (length >> 24) & 0xff;\n  _buffer[index + 2] = (length >> 16) & 0xff;\n  _buffer[index + 1] = (length >> 8) & 0xff;\n  _buffer[index] = (length) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, requestId);\n  _buffer[index + 3] = (this.requestId >> 24) & 0xff;\n  _buffer[index + 2] = (this.requestId >> 16) & 0xff;\n  _buffer[index + 1] = (this.requestId >> 8) & 0xff;\n  _buffer[index] = (this.requestId) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, 0);\n  _buffer[index + 3] = (0 >> 24) & 0xff;\n  _buffer[index + 2] = (0 >> 16) & 0xff;\n  _buffer[index + 1] = (0 >> 8) & 0xff;\n  _buffer[index] = (0) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, OP_GETMORE);\n  _buffer[index + 3] = (OP_GETMORE >> 24) & 0xff;\n  _buffer[index + 2] = (OP_GETMORE >> 16) & 0xff;\n  _buffer[index + 1] = (OP_GETMORE >> 8) & 0xff;\n  _buffer[index] = (OP_GETMORE) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, 0);\n  _buffer[index + 3] = (0 >> 24) & 0xff;\n  _buffer[index + 2] = (0 >> 16) & 0xff;\n  _buffer[index + 1] = (0 >> 8) & 0xff;\n  _buffer[index] = (0) & 0xff;\n  index = index + 4;\n\n  // Write collection name\n  index = index + _buffer.write(this.ns, index, 'utf8') + 1;\n  _buffer[index - 1] = 0;\n\n  // Write batch size\n  // index = write32bit(index, _buffer, numberToReturn);\n  _buffer[index + 3] = (this.numberToReturn >> 24) & 0xff;\n  _buffer[index + 2] = (this.numberToReturn >> 16) & 0xff;\n  _buffer[index + 1] = (this.numberToReturn >> 8) & 0xff;\n  _buffer[index] = (this.numberToReturn) & 0xff;\n  index = index + 4;\n\n  // Write cursor id\n  // index = write32bit(index, _buffer, cursorId.getLowBits());\n  _buffer[index + 3] = (this.cursorId.getLowBits() >> 24) & 0xff;\n  _buffer[index + 2] = (this.cursorId.getLowBits() >> 16) & 0xff;\n  _buffer[index + 1] = (this.cursorId.getLowBits() >> 8) & 0xff;\n  _buffer[index] = (this.cursorId.getLowBits()) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, cursorId.getHighBits());\n  _buffer[index + 3] = (this.cursorId.getHighBits() >> 24) & 0xff;\n  _buffer[index + 2] = (this.cursorId.getHighBits() >> 16) & 0xff;\n  _buffer[index + 1] = (this.cursorId.getHighBits() >> 8) & 0xff;\n  _buffer[index] = (this.cursorId.getHighBits()) & 0xff;\n  index = index + 4;\n\n  // Return buffer\n  return _buffer;\n}\n\n/**************************************************************\n * KILLCURSOR\n **************************************************************/\nvar KillCursor = function(bson, cursorIds) {\n  this.requestId = _requestId++;\n  this.cursorIds = cursorIds;\n}\n\n//\n// Uses a single allocated buffer for the process, avoiding multiple memory allocations\nKillCursor.prototype.toBin = function() {\n  var length = 4 + 4 + (4 * 4) + (this.cursorIds.length * 8);\n\n  // Create command buffer\n  var index = 0;\n  var _buffer = new Buffer(length);\n\n  // Write header information\n  // index = write32bit(index, _buffer, length);\n  _buffer[index + 3] = (length >> 24) & 0xff;\n  _buffer[index + 2] = (length >> 16) & 0xff;\n  _buffer[index + 1] = (length >> 8) & 0xff;\n  _buffer[index] = (length) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, requestId);\n  _buffer[index + 3] = (this.requestId >> 24) & 0xff;\n  _buffer[index + 2] = (this.requestId >> 16) & 0xff;\n  _buffer[index + 1] = (this.requestId >> 8) & 0xff;\n  _buffer[index] = (this.requestId) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, 0);\n  _buffer[index + 3] = (0 >> 24) & 0xff;\n  _buffer[index + 2] = (0 >> 16) & 0xff;\n  _buffer[index + 1] = (0 >> 8) & 0xff;\n  _buffer[index] = (0) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, OP_KILL_CURSORS);\n  _buffer[index + 3] = (OP_KILL_CURSORS >> 24) & 0xff;\n  _buffer[index + 2] = (OP_KILL_CURSORS >> 16) & 0xff;\n  _buffer[index + 1] = (OP_KILL_CURSORS >> 8) & 0xff;\n  _buffer[index] = (OP_KILL_CURSORS) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, 0);\n  _buffer[index + 3] = (0 >> 24) & 0xff;\n  _buffer[index + 2] = (0 >> 16) & 0xff;\n  _buffer[index + 1] = (0 >> 8) & 0xff;\n  _buffer[index] = (0) & 0xff;\n  index = index + 4;\n\n  // Write batch size\n  // index = write32bit(index, _buffer, this.cursorIds.length);\n  _buffer[index + 3] = (this.cursorIds.length >> 24) & 0xff;\n  _buffer[index + 2] = (this.cursorIds.length >> 16) & 0xff;\n  _buffer[index + 1] = (this.cursorIds.length >> 8) & 0xff;\n  _buffer[index] = (this.cursorIds.length) & 0xff;\n  index = index + 4;\n\n  // Write all the cursor ids into the array\n  for(var i = 0; i < this.cursorIds.length; i++) {\n    // Write cursor id\n    // index = write32bit(index, _buffer, cursorIds[i].getLowBits());\n    _buffer[index + 3] = (this.cursorIds[i].getLowBits() >> 24) & 0xff;\n    _buffer[index + 2] = (this.cursorIds[i].getLowBits() >> 16) & 0xff;\n    _buffer[index + 1] = (this.cursorIds[i].getLowBits() >> 8) & 0xff;\n    _buffer[index] = (this.cursorIds[i].getLowBits()) & 0xff;\n    index = index + 4;\n\n    // index = write32bit(index, _buffer, cursorIds[i].getHighBits());\n    _buffer[index + 3] = (this.cursorIds[i].getHighBits() >> 24) & 0xff;\n    _buffer[index + 2] = (this.cursorIds[i].getHighBits() >> 16) & 0xff;\n    _buffer[index + 1] = (this.cursorIds[i].getHighBits() >> 8) & 0xff;\n    _buffer[index] = (this.cursorIds[i].getHighBits()) & 0xff;\n    index = index + 4;\n  }\n\n  // Return buffer\n  return _buffer;\n}\n\nvar Response = function(bson, data, opts) {\n  opts = opts || {promoteLongs: true, promoteValues: true, promoteBuffers: false};\n  this.parsed = false;\n\n  //\n  // Parse Header\n  //\n  this.index = 0;\n  this.raw = data;\n  this.data = data;\n  this.bson = bson;\n  this.opts = opts;\n\n  // Read the message length\n  this.length = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;\n  this.index = this.index + 4;\n\n  // Fetch the request id for this reply\n  this.requestId = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;\n  this.index = this.index + 4;\n\n  // Fetch the id of the request that triggered the response\n  this.responseTo = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;\n  this.index = this.index + 4;\n\n  // Skip op-code field\n  this.index = this.index + 4;\n\n  // Unpack flags\n  this.responseFlags = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;\n  this.index = this.index + 4;\n\n  // Unpack the cursor\n  var lowBits = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;\n  this.index = this.index + 4;\n  var highBits = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;\n  this.index = this.index + 4;\n  // Create long object\n  this.cursorId = new Long(lowBits, highBits);\n\n  // Unpack the starting from\n  this.startingFrom = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;\n  this.index = this.index + 4;\n\n  // Unpack the number of objects returned\n  this.numberReturned = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;\n  this.index = this.index + 4;\n\n  // Preallocate document array\n  this.documents = new Array(this.numberReturned);\n\n  // Flag values\n  this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) != 0;\n  this.queryFailure = (this.responseFlags & QUERY_FAILURE) != 0;\n  this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) != 0;\n  this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) != 0;\n  this.promoteLongs = typeof opts.promoteLongs == 'boolean' ? opts.promoteLongs : true;\n  this.promoteValues = typeof opts.promoteValues == 'boolean' ? opts.promoteValues : true;\n  this.promoteBuffers = typeof opts.promoteBuffers == 'boolean' ? opts.promoteBuffers : false;\n}\n\nResponse.prototype.isParsed = function() {\n  return this.parsed;\n}\n\nResponse.prototype.parse = function(options) {\n  // Don't parse again if not needed\n  if(this.parsed) return;\n  options = options || {};\n\n  // Allow the return of raw documents instead of parsing\n  var raw = options.raw || false;\n  var documentsReturnedIn = options.documentsReturnedIn || null;\n  var promoteLongs = typeof options.promoteLongs == 'boolean'\n    ? options.promoteLongs\n    : this.opts.promoteLongs;\n  var promoteValues = typeof options.promoteValues == 'boolean'\n    ? options.promoteValues\n    : this.opts.promoteValues;\n  var promoteBuffers = typeof options.promoteBuffers == 'boolean'\n    ? options.promoteBuffers\n    : this.opts.promoteBuffers\n  var bsonSize, _options;\n\n  // Set up the options\n  _options = {\n    promoteLongs: promoteLongs,\n    promoteValues: promoteValues,\n    promoteBuffers: promoteBuffers\n  };\n\n  //\n  // Single document and documentsReturnedIn set\n  //\n  if(this.numberReturned == 1 && documentsReturnedIn != null && raw) {\n    // Calculate the bson size\n    bsonSize = this.data[this.index] | this.data[this.index + 1] << 8 | this.data[this.index + 2] << 16 | this.data[this.index + 3] << 24;\n    // Slice out the buffer containing the command result document\n    var document = this.data.slice(this.index, this.index + bsonSize);\n    // Set up field we wish to keep as raw\n    var fieldsAsRaw = {}\n    fieldsAsRaw[documentsReturnedIn] = true;\n    _options.fieldsAsRaw = fieldsAsRaw;\n\n    // Deserialize but keep the array of documents in non-parsed form\n    var doc = this.bson.deserialize(document, _options);\n\n    // Get the documents\n    this.documents = doc.cursor[documentsReturnedIn];\n    this.numberReturned = this.documents.length;\n    // Ensure we have a Long valie cursor id\n    this.cursorId = typeof doc.cursor.id == 'number'\n      ? Long.fromNumber(doc.cursor.id)\n      : doc.cursor.id;\n\n    // Adjust the index\n    this.index = this.index + bsonSize;\n\n    // Set as parsed\n    this.parsed = true\n    return;\n  }\n\n  //\n  // Parse Body\n  //\n  for(var i = 0; i < this.numberReturned; i++) {\n    bsonSize = this.data[this.index] | this.data[this.index + 1] << 8 | this.data[this.index + 2] << 16 | this.data[this.index + 3] << 24;\n\n    // If we have raw results specified slice the return document\n    if(raw) {\n      this.documents[i] = this.data.slice(this.index, this.index + bsonSize);\n    } else {\n      this.documents[i] = this.bson.deserialize(this.data.slice(this.index, this.index + bsonSize), _options);\n    }\n\n    // Adjust the index\n    this.index = this.index + bsonSize;\n  }\n\n  // Set parsed\n  this.parsed = true;\n}\n\nmodule.exports = {\n    Query: Query\n  , GetMore: GetMore\n  , Response: Response\n  , KillCursor: KillCursor\n}\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/connection/logger.js":"\"use strict\";\n\nvar f = require('util').format\n  , MongoError = require('../error');\n\n// Filters for classes\nvar classFilters = {};\nvar filteredClasses = {};\nvar level = null;\n// Save the process id\nvar pid = process.pid;\n// current logger\nvar currentLogger = null;\n\n/**\n * Creates a new Logger instance\n * @class\n * @param {string} className The Class name associated with the logging instance\n * @param {object} [options=null] Optional settings.\n * @param {Function} [options.logger=null] Custom logger function;\n * @param {string} [options.loggerLevel=error] Override default global log level.\n * @return {Logger} a Logger instance.\n */\nvar Logger = function(className, options) {\n  if(!(this instanceof Logger)) return new Logger(className, options);\n  options = options || {};\n\n  // Current reference\n  this.className = className;\n\n  // Current logger\n  if(options.logger) {\n    currentLogger = options.logger;\n  } else if(currentLogger == null) {\n    currentLogger = console.log;\n  }\n\n  // Set level of logging, default is error\n  if(options.loggerLevel) {\n    level = options.loggerLevel || 'error';\n  }\n\n  // Add all class names\n  if(filteredClasses[this.className] == null) classFilters[this.className] =  true;\n}\n\n/**\n * Log a message at the debug level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.debug = function(message, object) {\n  if(this.isDebug()\n    && ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className])\n      || (Object.keys(filteredClasses).length == 0 && classFilters[this.className]))) {\n    var dateTime = new Date().getTime();\n    var msg = f(\"[%s-%s:%s] %s %s\", 'DEBUG', this.className, pid, dateTime, message);\n    var state = {\n      type: 'debug', message: message, className: this.className, pid: pid, date: dateTime\n    };\n    if(object) state.meta = object;\n    currentLogger(msg, state);\n  }\n}\n\n/**\n * Log a message at the warn level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.warn = function(message, object) {\n  if(this.isWarn()\n    && ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className])\n      || (Object.keys(filteredClasses).length == 0 && classFilters[this.className]))) {\n    var dateTime = new Date().getTime();\n    var msg = f(\"[%s-%s:%s] %s %s\", 'WARN', this.className, pid, dateTime, message);\n    var state = {\n      type: 'warn', message: message, className: this.className, pid: pid, date: dateTime\n    };\n    if(object) state.meta = object;\n    currentLogger(msg, state);\n  }\n},\n\n/**\n * Log a message at the info level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.info = function(message, object) {\n  if(this.isInfo()\n    && ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className])\n      || (Object.keys(filteredClasses).length == 0 && classFilters[this.className]))) {\n    var dateTime = new Date().getTime();\n    var msg = f(\"[%s-%s:%s] %s %s\", 'INFO', this.className, pid, dateTime, message);\n    var state = {\n      type: 'info', message: message, className: this.className, pid: pid, date: dateTime\n    };\n    if(object) state.meta = object;\n    currentLogger(msg, state);\n  }\n},\n\n/**\n * Log a message at the error level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.error = function(message, object) {\n  if(this.isError()\n    && ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className])\n      || (Object.keys(filteredClasses).length == 0 && classFilters[this.className]))) {\n    var dateTime = new Date().getTime();\n    var msg = f(\"[%s-%s:%s] %s %s\", 'ERROR', this.className, pid, dateTime, message);\n    var state = {\n      type: 'error', message: message, className: this.className, pid: pid, date: dateTime\n    };\n    if(object) state.meta = object;\n    currentLogger(msg, state);\n  }\n},\n\n/**\n * Is the logger set at info level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isInfo = function() {\n  return level == 'info' || level == 'debug';\n},\n\n/**\n * Is the logger set at error level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isError = function() {\n  return level == 'error' || level == 'info' || level == 'debug';\n},\n\n/**\n * Is the logger set at error level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isWarn = function() {\n  return level == 'error' || level == 'warn' || level == 'info' || level == 'debug';\n},\n\n/**\n * Is the logger set at debug level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isDebug = function() {\n  return level == 'debug';\n}\n\n/**\n * Resets the logger to default settings, error and no filtered classes\n * @method\n * @return {null}\n */\nLogger.reset = function() {\n  level = 'error';\n  filteredClasses = {};\n}\n\n/**\n * Get the current logger function\n * @method\n * @return {function}\n */\nLogger.currentLogger = function() {\n  return currentLogger;\n}\n\n/**\n * Set the current logger function\n * @method\n * @param {function} logger Logger function.\n * @return {null}\n */\nLogger.setCurrentLogger = function(logger) {\n  if(typeof logger != 'function') throw new MongoError(\"current logger must be a function\");\n  currentLogger = logger;\n}\n\n/**\n * Set what classes to log.\n * @method\n * @param {string} type The type of filter (currently only class)\n * @param {string[]} values The filters to apply\n * @return {null}\n */\nLogger.filter = function(type, values) {\n  if(type == 'class' && Array.isArray(values)) {\n    filteredClasses = {};\n\n    values.forEach(function(x) {\n      filteredClasses[x] = true;\n    });\n  }\n}\n\n/**\n * Set the current log level\n * @method\n * @param {string} level Set current log level (debug, info, error)\n * @return {null}\n */\nLogger.setLevel = function(_level) {\n  if(_level != 'info' && _level != 'error' && _level != 'debug' && _level != 'warn') {\n    throw new Error(f(\"%s is an illegal logging level\", _level));\n  }\n\n  level = _level;\n}\n\nmodule.exports = Logger;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/topologies/server.js":"\"use strict\"\n\nvar inherits = require('util').inherits,\n  require_optional = require('require_optional'),\n  f = require('util').format,\n  EventEmitter = require('events').EventEmitter,\n  ReadPreference = require('./read_preference'),\n  Logger = require('../connection/logger'),\n  debugOptions = require('../connection/utils').debugOptions,\n  retrieveBSON = require('../connection/utils').retrieveBSON,\n  Pool = require('../connection/pool'),\n  Query = require('../connection/commands').Query,\n  MongoError = require('../error'),\n  PreTwoSixWireProtocolSupport = require('../wireprotocol/2_4_support'),\n  TwoSixWireProtocolSupport = require('../wireprotocol/2_6_support'),\n  ThreeTwoWireProtocolSupport = require('../wireprotocol/3_2_support'),\n  BasicCursor = require('../cursor'),\n  sdam = require('./shared'),\n  assign = require('./shared').assign,\n  createClientInfo = require('./shared').createClientInfo;\n\n// Used for filtering out fields for loggin\nvar debugFields = ['reconnect', 'reconnectTries', 'reconnectInterval', 'emitError', 'cursorFactory', 'host'\n  , 'port', 'size', 'keepAlive', 'keepAliveInitialDelay', 'noDelay', 'connectionTimeout', 'checkServerIdentity'\n  , 'socketTimeout', 'singleBufferSerializtion', 'ssl', 'ca', 'crl', 'cert', 'key', 'rejectUnauthorized', 'promoteLongs', 'promoteValues'\n  , 'promoteBuffers', 'servername'];\n\n// Server instance id\nvar id = 0;\nvar serverAccounting = false;\nvar servers = {};\nvar BSON = retrieveBSON();\n\n/**\n * Creates a new Server instance\n * @class\n * @param {boolean} [options.reconnect=true] Server will attempt to reconnect on loss of connection\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {number} [options.monitoring=true] Enable the server state monitoring (calling ismaster at monitoringInterval)\n * @param {number} [options.monitoringInterval=5000] The interval of calling ismaster when monitoring is enabled.\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=0] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {string} [options.appname=null] Application name, passed in on ismaster call and logged in mongod server logs. Maximum size 128 bytes.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @return {Server} A cursor instance\n * @fires Server#connect\n * @fires Server#close\n * @fires Server#error\n * @fires Server#timeout\n * @fires Server#parseError\n * @fires Server#reconnect\n * @fires Server#reconnectFailed\n * @fires Server#serverHeartbeatStarted\n * @fires Server#serverHeartbeatSucceeded\n * @fires Server#serverHeartbeatFailed\n * @fires Server#topologyOpening\n * @fires Server#topologyClosed\n * @fires Server#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar Server = function(options) {\n  options = options || {};\n\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Server instance id\n  this.id = id++;\n\n  // Internal state\n  this.s = {\n    // Options\n    options: options,\n    // Logger\n    logger: Logger('Server', options),\n    // Factory overrides\n    Cursor: options.cursorFactory || BasicCursor,\n    // BSON instance\n    bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128,\n      BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey,\n      BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n    // Pool\n    pool: null,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Monitor thread (keeps the connection alive)\n    monitoring: typeof options.monitoring == 'boolean' ? options.monitoring : true,\n    // Is the server in a topology\n    inTopology: typeof options.inTopology == 'boolean' ? options.inTopology : false,\n    // Monitoring timeout\n    monitoringInterval: typeof options.monitoringInterval == 'number'\n      ? options.monitoringInterval\n      : 5000,\n    // Topology id\n    topologyId: -1\n  }\n\n  // Curent ismaster\n  this.ismaster = null;\n  // Current ping time\n  this.lastIsMasterMS = -1;\n  // The monitoringProcessId\n  this.monitoringProcessId = null;\n  // Initial connection\n  this.initalConnect = true;\n  // Wire protocol handler, default to oldest known protocol handler\n  // this gets changed when the first ismaster is called.\n  this.wireProtocolHandler = new PreTwoSixWireProtocolSupport();\n  // Default type\n  this._type = 'server';\n  // Set the client info\n  this.clientInfo = createClientInfo(options);\n\n  // Max Stalleness values\n  // last time we updated the ismaster state\n  this.lastUpdateTime = 0;\n  // Last write time\n  this.lastWriteDate = 0;\n  // Stalleness\n  this.staleness = 0;\n}\n\ninherits(Server, EventEmitter);\n\nObject.defineProperty(Server.prototype, 'type', {\n  enumerable:true, get: function() { return this._type; }\n});\n\nObject.defineProperty(Server.prototype, 'parserType', {\n  enumerable:true, get: function() {\n    return BSON.native ? \"c++\" : \"js\";\n  }\n});\n\nServer.enableServerAccounting = function() {\n  serverAccounting = true;\n  servers = {};\n}\n\nServer.disableServerAccounting = function() {\n  serverAccounting = false;\n}\n\nServer.servers = function() {\n  return servers;\n}\n\nObject.defineProperty(Server.prototype, 'name', {\n  enumerable:true,\n  get: function() { return this.s.options.host + \":\" + this.s.options.port; }\n});\n\nfunction configureWireProtocolHandler(self, ismaster) {\n  // 3.2 wire protocol handler\n  if(ismaster.maxWireVersion >= 4) {\n    return new ThreeTwoWireProtocolSupport(new TwoSixWireProtocolSupport());\n  }\n\n  // 2.6 wire protocol handler\n  if(ismaster.maxWireVersion >= 2) {\n    return new TwoSixWireProtocolSupport();\n  }\n\n  // 2.4 or earlier wire protocol handler\n  return new PreTwoSixWireProtocolSupport();\n}\n\nfunction disconnectHandler(self, type, ns, cmd, options, callback) {\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!self.s.pool.isConnected() && self.s.disconnectHandler != null && !options.monitoring) {\n    self.s.disconnectHandler.add(type, ns, cmd, options, callback);\n    return true;\n  }\n\n  // If we have no connection error\n  if(!self.s.pool.isConnected()) {\n    callback(MongoError.create(f(\"no connection available to server %s\", self.name)));\n    return true;\n  }\n}\n\nfunction monitoringProcess(self) {\n  return function() {\n    // Pool was destroyed do not continue process\n    if(self.s.pool.isDestroyed()) return;\n    // Emit monitoring Process event\n    self.emit('monitoring', self);\n    // Perform ismaster call\n    // Query options\n    var queryOptions = { numberToSkip: 0, numberToReturn: -1, checkKeys: false, slaveOk: true };\n    // Create a query instance\n    var query = new Query(self.s.bson, 'admin.$cmd', {ismaster:true}, queryOptions);\n    // Get start time\n    var start = new Date().getTime();\n\n    // Execute the ismaster query\n    self.s.pool.write(query, {\n      socketTimeout: (typeof self.s.options.connectionTimeout !== 'number') ? 2000 : self.s.options.connectionTimeout,\n      monitoring: true,\n    }, function(err, result) {\n      // Set initial lastIsMasterMS\n      self.lastIsMasterMS = new Date().getTime() - start;\n      if(self.s.pool.isDestroyed()) return;\n      // Update the ismaster view if we have a result\n      if(result) {\n        self.ismaster = result.result;\n      }\n      // Re-schedule the monitoring process\n      self.monitoringProcessId = setTimeout(monitoringProcess(self), self.s.monitoringInterval);\n    });\n  }\n}\n\nvar eventHandler = function(self, event) {\n  return function(err) {\n    // Log information of received information if in info mode\n    if(self.s.logger.isInfo()) {\n      var object = err instanceof MongoError ? JSON.stringify(err) : {}\n      self.s.logger.info(f('server %s fired event %s out with message %s'\n        , self.name, event, object));\n    }\n\n    // Handle connect event\n    if(event == 'connect') {\n      // Issue an ismaster command at connect\n      // Query options\n      var queryOptions = { numberToSkip: 0, numberToReturn: -1, checkKeys: false, slaveOk: true };\n      // Create a query instance\n      var query = new Query(self.s.bson, 'admin.$cmd', {ismaster:true, client: self.clientInfo}, queryOptions);\n      // Get start time\n      var start = new Date().getTime();\n      // Execute the ismaster query\n      self.s.pool.write(query, {\n        socketTimeout: self.s.options.connectionTimeout || 2000,\n      }, function(err, result) {\n        // Set initial lastIsMasterMS\n        self.lastIsMasterMS = new Date().getTime() - start;\n        if(err) {\n          self.destroy();\n          if(self.listeners('error').length > 0) self.emit('error', err);\n          return;\n        }\n\n        // Ensure no error emitted after initial connect when reconnecting\n        self.initalConnect = false;\n        // Save the ismaster\n        self.ismaster = result.result;\n\n        // It's a proxy change the type so\n        // the wireprotocol will send $readPreference\n        if(self.ismaster.msg == 'isdbgrid') {\n          self._type = 'mongos';\n        }\n        // Add the correct wire protocol handler\n        self.wireProtocolHandler = configureWireProtocolHandler(self, self.ismaster);\n        // Have we defined self monitoring\n        if(self.s.monitoring) {\n          self.monitoringProcessId = setTimeout(monitoringProcess(self), self.s.monitoringInterval);\n        }\n\n        // Emit server description changed if something listening\n        sdam.emitServerDescriptionChanged(self, {\n          address: self.name, arbiters: [], hosts: [], passives: [], type: !self.s.inTopology ? 'Standalone' : sdam.getTopologyType(self)\n        });\n\n        // Emit topology description changed if something listening\n        sdam.emitTopologyDescriptionChanged(self, {\n          topologyType: 'Single', servers: [{address: self.name, arbiters: [], hosts: [], passives: [], type: 'Standalone'}]\n        });\n\n        // Log the ismaster if available\n        if(self.s.logger.isInfo()) {\n          self.s.logger.info(f('server %s connected with ismaster [%s]', self.name, JSON.stringify(self.ismaster)));\n        }\n\n        // Emit connect\n        self.emit('connect', self);\n      });\n    } else if(event == 'error' || event == 'parseError'\n      || event == 'close' || event == 'timeout' || event == 'reconnect'\n      || event == 'attemptReconnect' || 'reconnectFailed') {\n      // Remove server instance from accounting\n      if(serverAccounting && ['close', 'timeout', 'error', 'parseError', 'reconnectFailed'].indexOf(event) != -1) {\n        // Emit toplogy opening event if not in topology\n        if(!self.s.inTopology) {\n          self.emit('topologyOpening', { topologyId: self.id });\n        }\n\n        delete servers[self.id];\n      }\n\n      // Reconnect failed return error\n      if(event == 'reconnectFailed') {\n        self.emit('reconnectFailed', err);\n        // Emit error if any listeners\n        if(self.listeners('error').length > 0) {\n          self.emit('error', err);\n        }\n        // Terminate\n        return;\n      }\n\n      // On first connect fail\n      if(self.s.pool.state == 'disconnected' && self.initalConnect && ['close', 'timeout', 'error', 'parseError'].indexOf(event) != -1) {\n        self.initalConnect = false;\n        return self.emit('error', new MongoError(f('failed to connect to server [%s] on first connect [%s]', self.name, err)));\n      }\n\n      // Reconnect event, emit the server\n      if(event == 'reconnect') {\n        return self.emit(event, self);\n      }\n\n      // Emit the event\n      self.emit(event, err);\n    }\n  }\n}\n\n/**\n * Initiate server connect\n * @method\n * @param {array} [options.auth=null] Array of auth options to apply on connect\n */\nServer.prototype.connect = function(options) {\n  var self = this;\n  options = options || {};\n\n  // Set the connections\n  if(serverAccounting) servers[this.id] = this;\n\n  // Do not allow connect to be called on anything that's not disconnected\n  if(self.s.pool && !self.s.pool.isDisconnected() && !self.s.pool.isDestroyed()) {\n    throw MongoError.create(f('server instance in invalid state %s', self.s.state));\n  }\n\n  // Create a pool\n  self.s.pool = new Pool(assign(self.s.options, options, {bson: this.s.bson}));\n\n  // Set up listeners\n  self.s.pool.on('close', eventHandler(self, 'close'));\n  self.s.pool.on('error', eventHandler(self, 'error'));\n  self.s.pool.on('timeout', eventHandler(self, 'timeout'));\n  self.s.pool.on('parseError', eventHandler(self, 'parseError'));\n  self.s.pool.on('connect', eventHandler(self, 'connect'));\n  self.s.pool.on('reconnect', eventHandler(self, 'reconnect'));\n  self.s.pool.on('reconnectFailed', eventHandler(self, 'reconnectFailed'));\n\n  // Emit toplogy opening event if not in topology\n  if(!self.s.inTopology) {\n    this.emit('topologyOpening', { topologyId: self.id });\n  }\n\n  // Emit opening server event\n  self.emit('serverOpening', {\n    topologyId: self.s.topologyId != -1 ? self.s.topologyId : self.id,\n    address: self.name\n  });\n\n  // Connect with optional auth settings\n  if(options.auth) {\n    self.s.pool.connect.apply(self.s.pool, options.auth);\n  } else {\n    self.s.pool.connect();\n  }\n}\n\n/**\n * Get the server description\n * @method\n * @return {object}\n*/\nServer.prototype.getDescription = function() {\n  var ismaster = this.ismaster || {};\n  var description = {\n    type: sdam.getTopologyType(this),\n    address: this.name,\n  };\n\n  // Add fields if available\n  if(ismaster.hosts) description.hosts = ismaster.hosts;\n  if(ismaster.arbiters) description.arbiters = ismaster.arbiters;\n  if(ismaster.passives) description.passives = ismaster.passives;\n  if(ismaster.setName) description.setName = ismaster.setName;\n  return description;\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nServer.prototype.lastIsMaster = function() {\n  return this.ismaster;\n}\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nServer.prototype.unref = function() {\n  this.s.pool.unref();\n}\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nServer.prototype.isConnected = function() {\n  if(!this.s.pool) return false;\n  return this.s.pool.isConnected();\n}\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nServer.prototype.isDestroyed = function() {\n  if(!this.s.pool) return false;\n  return this.s.pool.isDestroyed();\n}\n\nfunction basicWriteValidations(self) {\n  if(!self.s.pool) return MongoError.create('server instance is not connected');\n  if(self.s.pool.isDestroyed()) return MongoError.create('server instance pool was destroyed');\n}\n\nfunction basicReadValidations(self, options) {\n  basicWriteValidations(self, options);\n\n  if(options.readPreference && !(options.readPreference instanceof ReadPreference)) {\n    throw new Error(\"readPreference must be an instance of ReadPreference\");\n  }\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.checkKeys=false] Specify if the bson parser should validate keys.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {Boolean} [options.fullResult=false] Return the full envelope instead of just the result document.\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.command = function(ns, cmd, options, callback) {\n  var self = this;\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  var result = basicReadValidations(self, options);\n  if(result) return callback(result);\n\n  // Clone the options\n  options = assign({}, options, { wireProtocolCommand: false });\n\n  // Debug log\n  if(self.s.logger.isDebug()) self.s.logger.debug(f('executing command [%s] against %s', JSON.stringify({\n    ns: ns, cmd: cmd, options: debugOptions(debugFields, options)\n  }), self.name));\n\n  // If we are not connected or have a disconnectHandler specified\n  if(disconnectHandler(self, 'command', ns, cmd, options, callback)) return;\n\n  // Check if we have collation support\n  if(this.ismaster && this.ismaster.maxWireVersion < 5 && cmd.collation) {\n    return callback(new MongoError(f('server %s does not support collation', this.name)));\n  }\n\n  // Query options\n  var queryOptions = {\n    numberToSkip: 0,\n    numberToReturn: -1,\n    checkKeys: typeof options.checkKeys == 'boolean' ? options.checkKeys: false,\n    serializeFunctions: typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false,\n    ignoreUndefined: typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false\n  };\n\n  // Are we executing against a specific topology\n  var topology = options.topology || {};\n  // Create the query object\n  var query = self.wireProtocolHandler.command(self.s.bson, ns, cmd, {}, topology, options);\n  // Set slave OK of the query\n  query.slaveOk = options.readPreference ? options.readPreference.slaveOk() : false;\n\n  // Write options\n  var writeOptions = {\n    raw: typeof options.raw == 'boolean' ? options.raw : false,\n    promoteLongs: typeof options.promoteLongs == 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues == 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers == 'boolean' ? options.promoteBuffers : false,\n    command: true,\n    monitoring: typeof options.monitoring == 'boolean' ? options.monitoring : false,\n    fullResult: typeof options.fullResult == 'boolean' ? options.fullResult : false,\n    requestId: query.requestId,\n    socketTimeout: typeof options.socketTimeout == 'number' ? options.socketTimeout : null,\n  };\n\n  // Write the operation to the pool\n  self.s.pool.write(query, writeOptions, callback);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.insert = function(ns, ops, options, callback) {\n  var self = this;\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  var result = basicWriteValidations(self, options);\n  if(result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if(disconnectHandler(self, 'insert', ns, ops, options, callback)) return;\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n\n  // Execute write\n  return self.wireProtocolHandler.insert(self.s.pool, self.ismaster, ns, self.s.bson, ops, options, callback);\n}\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.update = function(ns, ops, options, callback) {\n  var self = this;\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  var result = basicWriteValidations(self, options);\n  if(result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if(disconnectHandler(self, 'update', ns, ops, options, callback)) return;\n\n  // Check if we have collation support\n  if(this.ismaster && this.ismaster.maxWireVersion < 5 && options.collation) {\n    return callback(new MongoError(f('server %s does not support collation', this.name)));\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return self.wireProtocolHandler.update(self.s.pool, self.ismaster, ns, self.s.bson, ops, options, callback);\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.remove = function(ns, ops, options, callback) {\n  var self = this;\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  var result = basicWriteValidations(self, options);\n  if(result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if(disconnectHandler(self, 'remove', ns, ops, options, callback)) return;\n\n  // Check if we have collation support\n  if(this.ismaster && this.ismaster.maxWireVersion < 5 && options.collation) {\n    return callback(new MongoError(f('server %s does not support collation', this.name)));\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return self.wireProtocolHandler.remove(self.s.pool, self.ismaster, ns, self.s.bson, ops, options, callback);\n}\n\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.cursor = function(ns, cmd, cursorOptions) {\n  var s = this.s;\n  cursorOptions = cursorOptions || {};\n  // Set up final cursor type\n  var FinalCursor = cursorOptions.cursorFactory || s.Cursor;\n  // Return the cursor\n  return new FinalCursor(s.bson, ns, cmd, cursorOptions, this, s.options);\n}\n\n/**\n * Logout from a database\n * @method\n * @param {string} db The db we are logging out from\n * @param {authResultCallback} callback A callback function\n */\nServer.prototype.logout = function(dbName, callback) {\n  this.s.pool.logout(dbName, callback);\n}\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nServer.prototype.auth = function(mechanism, db) {\n  var self = this;\n\n  // If we have the default mechanism we pick mechanism based on the wire\n  // protocol max version. If it's >= 3 then scram-sha1 otherwise mongodb-cr\n  if(mechanism == 'default' && self.ismaster && self.ismaster.maxWireVersion >= 3) {\n    mechanism = 'scram-sha-1';\n  } else if(mechanism == 'default') {\n    mechanism = 'mongocr';\n  }\n\n  // Slice all the arguments off\n  var args = Array.prototype.slice.call(arguments, 0);\n  // Set the mechanism\n  args[0] = mechanism;\n  // Get the callback\n  var callback = args[args.length - 1];\n\n  // If we are not connected or have a disconnectHandler specified\n  if(disconnectHandler(self, 'auth', db, args, {}, callback)) {\n    return;\n  }\n\n  // Do not authenticate if we are an arbiter\n  if(this.lastIsMaster() && this.lastIsMaster().arbiterOnly) {\n    return callback(null, true);\n  }\n\n  // Apply the arguments to the pool\n  self.s.pool.auth.apply(self.s.pool, args);\n}\n\n/**\n * Compare two server instances\n * @method\n * @param {Server} server Server to compare equality against\n * @return {boolean}\n */\nServer.prototype.equals = function(server) {\n  if(typeof server == 'string') return this.name.toLowerCase() == server.toLowerCase();\n  if(server.name) return this.name.toLowerCase() == server.name.toLowerCase();\n  return false;\n}\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nServer.prototype.connections = function() {\n  return this.s.pool.allConnections();\n}\n\n/**\n * Get server\n * @method\n * @return {Server}\n */\nServer.prototype.getServer = function() {\n  return this;\n}\n\n/**\n * Get connection\n * @method\n * @return {Connection}\n */\nServer.prototype.getConnection = function() {\n  return this.s.pool.get();\n}\n\nvar listeners = ['close', 'error', 'timeout', 'parseError', 'connect'];\n\n/**\n * Destroy the server connection\n * @method\n * @param {boolean} [options.emitClose=false] Emit close event on destroy\n * @param {boolean} [options.emitDestroy=false] Emit destroy event on destroy\n * @param {boolean} [options.force=false] Force destroy the pool\n */\nServer.prototype.destroy = function(options) {\n  options = options || {};\n  var self = this;\n\n  // Set the connections\n  if(serverAccounting) delete servers[this.id];\n\n  // Destroy the monitoring process if any\n  if(this.monitoringProcessId) {\n    clearTimeout(this.monitoringProcessId);\n  }\n\n  // No pool, return\n  if(!self.s.pool) return;\n\n  // Emit close event\n  if(options.emitClose) {\n    self.emit('close', self);\n  }\n\n  // Emit destroy event\n  if(options.emitDestroy) {\n    self.emit('destroy', self);\n  }\n\n  // Remove all listeners\n  listeners.forEach(function(event) {\n    self.s.pool.removeAllListeners(event);\n  });\n\n  // Emit opening server event\n  if(self.listeners('serverClosed').length > 0) self.emit('serverClosed', {\n    topologyId: self.s.topologyId != -1 ? self.s.topologyId : self.id, address: self.name\n  });\n\n  // Emit toplogy opening event if not in topology\n  if(self.listeners('topologyClosed').length > 0 && !self.s.inTopology) {\n    self.emit('topologyClosed', { topologyId: self.id });\n  }\n\n  if(self.s.logger.isDebug()) {\n    self.s.logger.debug(f('destroy called on server %s', self.name));\n  }\n\n  // Destroy the pool\n  this.s.pool.destroy(options.force);\n}\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Server#connect\n * @type {Server}\n */\n\n/**\n * A server reconnect event, used to verify that the server topology has reconnected\n *\n * @event Server#reconnect\n * @type {Server}\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Server#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Server#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Server#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Server#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Server#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Server#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * Server reconnect failed\n *\n * @event Server#reconnectFailed\n * @type {Error}\n */\n\n/**\n * Server connection pool closed\n *\n * @event Server#close\n * @type {object}\n */\n\n/**\n * Server connection pool caused an error\n *\n * @event Server#error\n * @type {Error}\n */\n\n/**\n * Server destroyed was called\n *\n * @event Server#destroy\n * @type {Server}\n */\n\nmodule.exports = Server;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/topologies/read_preference.js":"\"use strict\";\n\nvar needSlaveOk = ['primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'];\n\n/**\n * @fileOverview The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n *\n * @example\n * var ReplSet = require('mongodb-core').ReplSet\n *   , ReadPreference = require('mongodb-core').ReadPreference\n *   , assert = require('assert');\n *\n * var server = new ReplSet([{host: 'localhost', port: 30000}], {setName: 'rs'});\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   var cursor = server.cursor('db.test'\n *     , {find: 'db.test', query: {}}\n *     , {readPreference: new ReadPreference('secondary')});\n *   cursor.next(function(err, doc) {\n *     server.destroy();\n *   });\n * });\n *\n * // Start connecting\n * server.connect();\n */\n\n/**\n * Creates a new Pool instance\n * @class\n * @param {string} preference A string describing the preference (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n * @param {array} tags The tags object\n * @param {object} [options] Additional read preference options\n * @param {number} [options.maxStalenessSeconds] Max Secondary Read Stalleness in Seconds, Minimum value is 90 seconds.\n * @property {string} preference The preference string (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n * @property {array} tags The tags object\n * @property {object} options Additional read preference options\n * @property {number} maxStalenessSeconds MaxStalenessSeconds value for the read preference\n * @return {ReadPreference}\n */\nvar ReadPreference = function(preference, tags, options) {\n  this.preference = preference;\n  this.tags = tags;\n  this.options = options;\n\n  // Add the maxStalenessSeconds value to the read Preference\n  if(this.options && this.options.maxStalenessSeconds != null) {\n    this.options = options;\n    this.maxStalenessSeconds = this.options.maxStalenessSeconds >= 0\n      ? this.options.maxStalenessSeconds : null;\n  } else if(tags && typeof tags == 'object') {\n    this.options = tags, tags = null;\n  }\n}\n\n/**\n * This needs slaveOk bit set\n * @method\n * @return {boolean}\n */\nReadPreference.prototype.slaveOk = function() {\n  return needSlaveOk.indexOf(this.preference) != -1;\n}\n\n/**\n * Are the two read preference equal\n * @method\n * @return {boolean}\n */\nReadPreference.prototype.equals = function(readPreference) {\n  return readPreference.preference == this.preference;\n}\n\n/**\n * Return JSON representation\n * @method\n * @return {Object}\n */\nReadPreference.prototype.toJSON = function() {\n  var readPreference = {mode: this.preference};\n  if(Array.isArray(this.tags)) readPreference.tags = this.tags;\n  if(this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n  return readPreference;\n}\n\n/**\n * Primary read preference\n * @method\n * @return {ReadPreference}\n */\nReadPreference.primary = new ReadPreference('primary');\n/**\n * Primary Preferred read preference\n * @method\n * @return {ReadPreference}\n */\nReadPreference.primaryPreferred = new ReadPreference('primaryPreferred');\n/**\n * Secondary read preference\n * @method\n * @return {ReadPreference}\n */\nReadPreference.secondary = new ReadPreference('secondary');\n/**\n * Secondary Preferred read preference\n * @method\n * @return {ReadPreference}\n */\nReadPreference.secondaryPreferred = new ReadPreference('secondaryPreferred');\n/**\n * Nearest read preference\n * @method\n * @return {ReadPreference}\n */\nReadPreference.nearest = new ReadPreference('nearest');\n\nmodule.exports = ReadPreference;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/connection/pool.js":"\"use strict\";\n\nvar inherits = require('util').inherits,\n  EventEmitter = require('events').EventEmitter,\n  Connection = require('./connection'),\n  MongoError = require('../error'),\n  Logger = require('./logger'),\n  f = require('util').format,\n  Query = require('./commands').Query,\n  CommandResult = require('./command_result'),\n  assign = require('../topologies/shared').assign;\n\nvar MongoCR = require('../auth/mongocr')\n  , X509 = require('../auth/x509')\n  , Plain = require('../auth/plain')\n  , GSSAPI = require('../auth/gssapi')\n  , SSPI = require('../auth/sspi')\n  , ScramSHA1 = require('../auth/scram');\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar DESTROYING = 'destroying';\nvar DESTROYED = 'destroyed';\n\nvar _id = 0;\n\n/**\n * Creates a new Pool instance\n * @class\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {number} [options.size=1] Max server connection pool size\n * @param {boolean} [options.reconnect=true] Server will attempt to reconnect on loss of connection\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=0] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {number} [options.monitoringSocketTimeout=30000] TCP Socket timeout setting for replicaset monitoring socket\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passPhrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=false] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @fires Pool#connect\n * @fires Pool#close\n * @fires Pool#error\n * @fires Pool#timeout\n * @fires Pool#parseError\n * @return {Pool} A cursor instance\n */\nvar Pool = function(options) {\n  // Add event listener\n  EventEmitter.call(this);\n  // Add the options\n  this.options = assign({\n    // Host and port settings\n    host: 'localhost',\n    port: 27017,\n    // Pool default max size\n    size: 5,\n    // socket settings\n    connectionTimeout: 30000,\n    socketTimeout: 30000,\n    keepAlive: true,\n    keepAliveInitialDelay: 0,\n    noDelay: true,\n    // SSL Settings\n    ssl: false, checkServerIdentity: true,\n    ca: null, crl: null, cert: null, key: null, passPhrase: null,\n    rejectUnauthorized: false,\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    // Reconnection options\n    reconnect: true,\n    reconnectInterval: 1000,\n    reconnectTries: 30,\n    // Enable domains\n    domainsEnabled: false\n  }, options);\n\n  // Identification information\n  this.id = _id++;\n  // Current reconnect retries\n  this.retriesLeft = this.options.reconnectTries;\n  this.reconnectId = null;\n  // No bson parser passed in\n  if(!options.bson || (options.bson\n    && (typeof options.bson.serialize != 'function'\n    || typeof options.bson.deserialize != 'function'))) {\n      throw new Error(\"must pass in valid bson parser\");\n  }\n\n  // Logger instance\n  this.logger = Logger('Pool', options);\n  // Pool state\n  this.state = DISCONNECTED;\n  // Connections\n  this.availableConnections = [];\n  this.inUseConnections = [];\n  this.connectingConnections = [];\n  // Currently executing\n  this.executing = false;\n  // Operation work queue\n  this.queue = [];\n\n  // All the authProviders\n  this.authProviders = options.authProviders || {\n      'mongocr': new MongoCR(options.bson), 'x509': new X509(options.bson)\n    , 'plain': new Plain(options.bson), 'gssapi': new GSSAPI(options.bson)\n    , 'sspi': new SSPI(options.bson), 'scram-sha-1': new ScramSHA1(options.bson)\n  }\n\n  // Contains the reconnect connection\n  this.reconnectConnection = null;\n\n  // Are we currently authenticating\n  this.authenticating = false;\n  this.loggingout = false;\n  this.nonAuthenticatedConnections = [];\n  this.authenticatingTimestamp = null;\n  // Number of consecutive timeouts caught\n  this.numberOfConsecutiveTimeouts = 0;\n  // Current pool Index\n  this.connectionIndex = 0;\n}\n\ninherits(Pool, EventEmitter);\n\nObject.defineProperty(Pool.prototype, 'size', {\n  enumerable:true,\n  get: function() { return this.options.size; }\n});\n\nObject.defineProperty(Pool.prototype, 'connectionTimeout', {\n  enumerable:true,\n  get: function() { return this.options.connectionTimeout; }\n});\n\nObject.defineProperty(Pool.prototype, 'socketTimeout', {\n  enumerable:true,\n  get: function() { return this.options.socketTimeout; }\n});\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    'disconnected': [CONNECTING, DESTROYING, DISCONNECTED],\n    'connecting': [CONNECTING, DESTROYING, CONNECTED, DISCONNECTED],\n    'connected': [CONNECTED, DISCONNECTED, DESTROYING],\n    'destroying': [DESTROYING, DESTROYED],\n    'destroyed': [DESTROYED]\n  }\n\n  // Get current state\n  var legalStates = legalTransitions[self.state];\n  if(legalStates && legalStates.indexOf(newState) != -1) {\n    self.state = newState;\n  } else {\n    self.logger.error(f('Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]'\n      , self.id, self.state, newState, legalStates));\n  }\n}\n\nfunction authenticate(pool, auth, connection, cb) {\n  if(auth[0] === undefined) return cb(null);\n  // We need to authenticate the server\n  var mechanism = auth[0];\n  var db = auth[1];\n  // Validate if the mechanism exists\n  if(!pool.authProviders[mechanism]) {\n    throw new MongoError(f('authMechanism %s not supported', mechanism));\n  }\n\n  // Get the provider\n  var provider = pool.authProviders[mechanism];\n\n  // Authenticate using the provided mechanism\n  provider.auth.apply(provider, [write(pool), [connection], db].concat(auth.slice(2)).concat([cb]));\n}\n\n// The write function used by the authentication mechanism (bypasses external)\nfunction write(self) {\n  return function(connection, command, callback) {\n    // Get the raw buffer\n    // Ensure we stop auth if pool was destroyed\n    if(self.state == DESTROYED || self.state == DESTROYING) {\n      return callback(new MongoError('pool destroyed'));\n    }\n\n    // Set the connection workItem callback\n    connection.workItems.push({\n      cb: callback, command: true, requestId: command.requestId\n    });\n\n    // Write the buffer out to the connection\n    connection.write(command.toBin());\n  };\n}\n\n\nfunction reauthenticate(pool, connection, cb) {\n  // Authenticate\n  function authenticateAgainstProvider(pool, connection, providers, cb) {\n    // Finished re-authenticating against providers\n    if(providers.length == 0) return cb();\n    // Get the provider name\n    var provider = pool.authProviders[providers.pop()];\n\n    // Auth provider\n    provider.reauthenticate(write(pool), [connection], function(err) {\n      // We got an error return immediately\n      if(err) return cb(err);\n      // Continue authenticating the connection\n      authenticateAgainstProvider(pool, connection, providers, cb);\n    });\n  }\n\n  // Start re-authenticating process\n  authenticateAgainstProvider(pool, connection, Object.keys(pool.authProviders), cb);\n}\n\nfunction connectionFailureHandler(self, event) {\n  return function(err) {\n    if (this._connectionFailHandled) return;\n    this._connectionFailHandled = true;\n    // Destroy the connection\n    this.destroy();\n\n    // Remove the connection\n    removeConnection(self, this);\n\n    // Flush all work Items on this connection\n    while(this.workItems.length > 0) {\n      var workItem = this.workItems.shift();\n      // if(workItem.cb) workItem.cb(err);\n      if(workItem.cb) workItem.cb(err);\n    }\n\n    // Did we catch a timeout, increment the numberOfConsecutiveTimeouts\n    if(event == 'timeout') {\n      self.numberOfConsecutiveTimeouts = self.numberOfConsecutiveTimeouts + 1;\n\n      // Have we timed out more than reconnectTries in a row ?\n      // Force close the pool as we are trying to connect to tcp sink hole\n      if(self.numberOfConsecutiveTimeouts > self.options.reconnectTries) {\n        self.numberOfConsecutiveTimeouts = 0;\n        // Destroy all connections and pool\n        self.destroy(true);\n        // Emit close event\n        return self.emit('close', self);\n      }\n    }\n\n    // No more socket available propegate the event\n    if(self.socketCount() == 0) {\n      if(self.state != DESTROYED && self.state != DESTROYING) {\n        stateTransition(self, DISCONNECTED);\n      }\n\n      // Do not emit error events, they are always close events\n      // do not trigger the low level error handler in node\n      event = event == 'error' ? 'close' : event;\n      self.emit(event, err);\n    }\n\n    // Start reconnection attempts\n    if(!self.reconnectId && self.options.reconnect) {\n      self.reconnectId = setTimeout(attemptReconnect(self), self.options.reconnectInterval);\n    }\n  };\n}\n\nfunction attemptReconnect(self) {\n  return function() {\n    self.emit('attemptReconnect', self);\n    if(self.state == DESTROYED || self.state == DESTROYING) return;\n\n    // We are connected do not try again\n    if(self.isConnected()) {\n      self.reconnectId = null;\n      return;\n    }\n\n    // If we have failure schedule a retry\n    function _connectionFailureHandler(self) {\n      return function() {\n        if (this._connectionFailHandled) return;\n        this._connectionFailHandled = true;\n        // Destroy the connection\n        this.destroy();\n        // Count down the number of reconnects\n        self.retriesLeft = self.retriesLeft - 1;\n        // How many retries are left\n        if(self.retriesLeft == 0) {\n          // Destroy the instance\n          self.destroy();\n          // Emit close event\n          self.emit('reconnectFailed'\n            , new MongoError(f('failed to reconnect after %s attempts with interval %s ms', self.options.reconnectTries, self.options.reconnectInterval)));\n        } else {\n          self.reconnectId = setTimeout(attemptReconnect(self), self.options.reconnectInterval);\n        }\n      }\n    }\n\n    // Got a connect handler\n    function _connectHandler(self) {\n      return function() {\n        // Assign\n        var connection = this;\n\n        // Pool destroyed stop the connection\n        if(self.state == DESTROYED || self.state == DESTROYING) {\n          return connection.destroy();\n        }\n\n        // Clear out all handlers\n        handlers.forEach(function(event) {\n          connection.removeAllListeners(event);\n        });\n\n        // Reset reconnect id\n        self.reconnectId = null;\n\n        // Apply pool connection handlers\n        connection.on('error', connectionFailureHandler(self, 'error'));\n        connection.on('close', connectionFailureHandler(self, 'close'));\n        connection.on('timeout', connectionFailureHandler(self, 'timeout'));\n        connection.on('parseError', connectionFailureHandler(self, 'parseError'));\n\n        // Apply any auth to the connection\n        reauthenticate(self, this, function() {\n          // Reset retries\n          self.retriesLeft = self.options.reconnectTries;\n          // Push to available connections\n          self.availableConnections.push(connection);\n          // Set the reconnectConnection to null\n          self.reconnectConnection = null;\n          // Emit reconnect event\n          self.emit('reconnect', self);\n          // Trigger execute to start everything up again\n          _execute(self)();\n        });\n      }\n    }\n\n    // Create a connection\n    self.reconnectConnection = new Connection(messageHandler(self), self.options);\n    // Add handlers\n    self.reconnectConnection.on('close', _connectionFailureHandler(self, 'close'));\n    self.reconnectConnection.on('error', _connectionFailureHandler(self, 'error'));\n    self.reconnectConnection.on('timeout', _connectionFailureHandler(self, 'timeout'));\n    self.reconnectConnection.on('parseError', _connectionFailureHandler(self, 'parseError'));\n    // On connection\n    self.reconnectConnection.on('connect', _connectHandler(self));\n    // Attempt connection\n    self.reconnectConnection.connect();\n  }\n}\n\nfunction moveConnectionBetween(connection, from, to) {\n  var index = from.indexOf(connection);\n  // Move the connection from connecting to available\n  if(index != -1) {\n    from.splice(index, 1);\n    to.push(connection);\n  }\n}\n\nfunction messageHandler(self) {\n  return function(message, connection) {\n    // workItem to execute\n    var workItem = null;\n\n    // Locate the workItem\n    for(var i = 0; i < connection.workItems.length; i++) {\n      if(connection.workItems[i].requestId == message.responseTo) {\n        // Get the callback\n        workItem = connection.workItems[i];\n        // Remove from list of workItems\n        connection.workItems.splice(i, 1);\n      }\n    }\n\n\n    // Reset timeout counter\n    self.numberOfConsecutiveTimeouts = 0;\n\n    // Reset the connection timeout if we modified it for\n    // this operation\n    if(workItem.socketTimeout) {\n      connection.resetSocketTimeout();\n    }\n\n    // Log if debug enabled\n    if(self.logger.isDebug()) {\n      self.logger.debug(f('message [%s] received from %s:%s'\n        , message.raw.toString('hex'), self.options.host, self.options.port));\n    }\n\n    // Authenticate any straggler connections\n    function authenticateStragglers(self, connection, callback) {\n      // Get any non authenticated connections\n      var connections = self.nonAuthenticatedConnections.slice(0);\n      var nonAuthenticatedConnections = self.nonAuthenticatedConnections;\n      self.nonAuthenticatedConnections = [];\n\n      // Establish if the connection need to be authenticated\n      // Add to authentication list if\n      // 1. we were in an authentication process when the operation was executed\n      // 2. our current authentication timestamp is from the workItem one, meaning an auth has happened\n      if(connection.workItems.length == 1 && (connection.workItems[0].authenticating == true\n        || (typeof connection.workItems[0].authenticatingTimestamp == 'number'\n            && connection.workItems[0].authenticatingTimestamp != self.authenticatingTimestamp))) {\n        // Add connection to the list\n        connections.push(connection);\n      }\n\n      // No connections need to be re-authenticated\n      if(connections.length == 0) {\n        // Release the connection back to the pool\n        moveConnectionBetween(connection, self.inUseConnections, self.availableConnections);\n        // Finish\n        return callback();\n      }\n\n      // Apply re-authentication to all connections before releasing back to pool\n      var connectionCount = connections.length;\n      // Authenticate all connections\n      for(var i = 0; i < connectionCount; i++) {\n        reauthenticate(self, connections[i], function() {\n          connectionCount = connectionCount - 1;\n\n          if(connectionCount == 0) {\n            // Put non authenticated connections in available connections\n            self.availableConnections = self.availableConnections.concat(nonAuthenticatedConnections);\n            // Release the connection back to the pool\n            moveConnectionBetween(connection, self.inUseConnections, self.availableConnections);\n            // Return\n            callback();\n          }\n        });\n      }\n    }\n\n    function handleOperationCallback(self, cb, err, result) {\n      // No domain enabled\n      if(!self.options.domainsEnabled) {\n        return process.nextTick(function() {\n          return cb(err, result);\n        });\n      }\n\n      // Domain enabled just call the callback\n      cb(err, result);\n    }\n\n    authenticateStragglers(self, connection, function() {\n      // Keep executing, ensure current message handler does not stop execution\n      if(!self.executing) {\n        process.nextTick(function() {\n          _execute(self)();\n        });\n      }\n\n      // Time to dispatch the message if we have a callback\n      if(!workItem.immediateRelease) {\n        try {\n          // Parse the message according to the provided options\n          message.parse(workItem);\n        } catch(err) {\n          return handleOperationCallback(self, workItem.cb, MongoError.create(err));\n        }\n\n        // Establish if we have an error\n        if(workItem.command && message.documents[0] && (message.documents[0].ok == 0 || message.documents[0]['$err']\n        || message.documents[0]['errmsg'] || message.documents[0]['code'])) {\n          return handleOperationCallback(self, workItem.cb, MongoError.create(message.documents[0]));\n        }\n\n        // Add the connection details\n        message.hashedName = connection.hashedName;\n\n        // Return the documents\n        handleOperationCallback(self, workItem.cb, null, new CommandResult(workItem.fullResult ? message : message.documents[0], connection, message));\n      }\n    });\n  }\n}\n\n/**\n * Return the total socket count in the pool.\n * @method\n * @return {Number} The number of socket available.\n */\nPool.prototype.socketCount = function() {\n  return this.availableConnections.length\n    + this.inUseConnections.length;\n    // + this.connectingConnections.length;\n}\n\n/**\n * Return all pool connections\n * @method\n * @return {Connection[]} The pool connections\n */\nPool.prototype.allConnections = function() {\n  return this.availableConnections\n    .concat(this.inUseConnections)\n    .concat(this.connectingConnections);\n}\n\n/**\n * Get a pool connection (round-robin)\n * @method\n * @return {Connection}\n */\nPool.prototype.get = function() {\n  return this.allConnections()[0];\n}\n\n/**\n * Is the pool connected\n * @method\n * @return {boolean}\n */\nPool.prototype.isConnected = function() {\n  // We are in a destroyed state\n  if(this.state == DESTROYED || this.state == DESTROYING) {\n    return false;\n  }\n\n  // Get connections\n  var connections = this.availableConnections\n    .concat(this.inUseConnections);\n\n  // Check if we have any connected connections\n  for(var i = 0; i < connections.length; i++) {\n    if(connections[i].isConnected()) return true;\n  }\n\n  // Might be authenticating, but we are still connected\n  if(connections.length == 0 && this.authenticating) {\n    return true\n  }\n\n  // Not connected\n  return false;\n}\n\n/**\n * Was the pool destroyed\n * @method\n * @return {boolean}\n */\nPool.prototype.isDestroyed = function() {\n  return this.state == DESTROYED || this.state == DESTROYING;\n}\n\n/**\n * Is the pool in a disconnected state\n * @method\n * @return {boolean}\n */\nPool.prototype.isDisconnected = function() {\n  return this.state == DISCONNECTED;\n}\n\n/**\n * Connect pool\n * @method\n */\nPool.prototype.connect = function() {\n  if(this.state != DISCONNECTED) {\n    throw new MongoError('connection in unlawful state ' + this.state);\n  }\n\n  var self = this;\n  // Transition to connecting state\n  stateTransition(this, CONNECTING);\n  // Create an array of the arguments\n  var args = Array.prototype.slice.call(arguments, 0);\n  // Create a connection\n  var connection = new Connection(messageHandler(self), this.options);\n  // Add to list of connections\n  this.connectingConnections.push(connection);\n  // Add listeners to the connection\n  connection.once('connect', function(connection) {\n    if(self.state == DESTROYED || self.state == DESTROYING) return self.destroy();\n\n    // If we are in a topology, delegate the auth to it\n    // This is to avoid issues where we would auth against an\n    // arbiter\n    if(self.options.inTopology) {\n      // Set connected mode\n      stateTransition(self, CONNECTED);\n\n      // Move the active connection\n      moveConnectionBetween(connection, self.connectingConnections, self.availableConnections);\n\n      // Emit the connect event\n      return self.emit('connect', self);      \n    }\n\n    // Apply any store credentials\n    reauthenticate(self, connection, function(err) {\n      if(self.state == DESTROYED || self.state == DESTROYING) return self.destroy();\n\n      // We have an error emit it\n      if(err) {\n        // Destroy the pool\n        self.destroy();\n        // Emit the error\n        return self.emit('error', err);\n      }\n\n      // Authenticate\n      authenticate(self, args, connection, function(err) {\n        if(self.state == DESTROYED || self.state == DESTROYING) return self.destroy();\n\n        // We have an error emit it\n        if(err) {\n          // Destroy the pool\n          self.destroy();\n          // Emit the error\n          return self.emit('error', err);\n        }\n        // Set connected mode\n        stateTransition(self, CONNECTED);\n\n        // Move the active connection\n        moveConnectionBetween(connection, self.connectingConnections, self.availableConnections);\n\n        // Emit the connect event\n        self.emit('connect', self);\n      });\n    });\n  });\n\n  // Add error handlers\n  connection.once('error', connectionFailureHandler(this, 'error'));\n  connection.once('close', connectionFailureHandler(this, 'close'));\n  connection.once('timeout', connectionFailureHandler(this, 'timeout'));\n  connection.once('parseError', connectionFailureHandler(this, 'parseError'));\n\n  try {\n    connection.connect();\n  } catch(err) {\n    // SSL or something threw on connect\n    process.nextTick(function() {\n      self.emit('error', err);\n    });\n  }\n}\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nPool.prototype.auth = function(mechanism) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n\n  // If we don't have the mechanism fail\n  if(self.authProviders[mechanism] == null && mechanism != 'default') {\n    throw new MongoError(f(\"auth provider %s does not exist\", mechanism));\n  }\n\n  // Signal that we are authenticating a new set of credentials\n  this.authenticating = true;\n  this.authenticatingTimestamp = new Date().getTime();\n\n  // Authenticate all live connections\n  function authenticateLiveConnections(self, args, cb) {\n    // Get the current viable connections\n    var connections = self.allConnections();\n    // Allow nothing else to use the connections while we authenticate them\n    self.availableConnections = [];\n\n    var connectionsCount = connections.length;\n    var error = null;\n    // No connections available, return\n    if(connectionsCount == 0) {\n      self.authenticating = false;\n      return callback(null);\n    }\n\n    // Authenticate the connections\n    for(var i = 0; i < connections.length; i++) {\n      authenticate(self, args, connections[i], function(err) {\n        connectionsCount = connectionsCount - 1;\n\n        // Store the error\n        if(err) error = err;\n\n        // Processed all connections\n        if(connectionsCount == 0) {\n          // Auth finished\n          self.authenticating = false;\n          // Add the connections back to available connections\n          self.availableConnections = self.availableConnections.concat(connections);\n          // We had an error, return it\n          if(error) {\n            // Log the error\n            if(self.logger.isError()) {\n              self.logger.error(f('[%s] failed to authenticate against server %s:%s'\n                , self.id, self.options.host, self.options.port));\n            }\n\n            return cb(error);\n          }\n          cb(null);\n        }\n      });\n    }\n  }\n\n  // Wait for a logout in process to happen\n  function waitForLogout(self, cb) {\n    if(!self.loggingout) return cb();\n    setTimeout(function() {\n      waitForLogout(self, cb);\n    }, 1)\n  }\n\n  // Wait for loggout to finish\n  waitForLogout(self, function() {\n    // Authenticate all live connections\n    authenticateLiveConnections(self, args, function(err) {\n      // Credentials correctly stored in auth provider if successful\n      // Any new connections will now reauthenticate correctly\n      self.authenticating = false;\n      // Return after authentication connections\n      callback(err);\n    });\n  });\n}\n\n/**\n * Logout all users against a database\n * @method\n * @param {string} dbName The database name\n * @param {authResultCallback} callback A callback function\n */\nPool.prototype.logout = function(dbName, callback) {\n  var self = this;\n  if(typeof dbName != 'string') {\n    throw new MongoError('logout method requires a db name as first argument');\n  }\n\n  if(typeof callback != 'function') {\n    throw new MongoError('logout method requires a callback');\n  }\n\n  // Indicate logout in process\n  this.loggingout = true;\n\n  // Get all relevant connections\n  var connections = self.availableConnections.concat(self.inUseConnections);\n  var count = connections.length;\n  // Store any error\n  var error = null;\n\n  // Send logout command over all the connections\n  for(var i = 0; i < connections.length; i++) {\n    write(self)(connections[i], new Query(this.options.bson\n      , f('%s.$cmd', dbName)\n      , {logout:1}, {numberToSkip: 0, numberToReturn: 1}), function(err) {\n      count = count - 1;\n      if(err) error = err;\n\n      if(count == 0) {\n        self.loggingout = false;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Unref the pool\n * @method\n */\nPool.prototype.unref = function() {\n  // Get all the known connections\n  var connections = this.availableConnections\n    .concat(this.inUseConnections)\n    .concat(this.connectingConnections);\n  connections.forEach(function(c) {\n    c.unref();\n  });\n}\n\n// Events\nvar events = ['error', 'close', 'timeout', 'parseError', 'connect'];\n\n// Destroy the connections\nfunction destroy(self, connections) {\n  // Destroy all connections\n  connections.forEach(function(c) {\n    // Remove all listeners\n    for(var i = 0; i < events.length; i++) {\n      c.removeAllListeners(events[i]);\n    }\n    // Destroy connection\n    c.destroy();\n  });\n\n  // Zero out all connections\n  self.inUseConnections = [];\n  self.availableConnections = [];\n  self.nonAuthenticatedConnections = [];\n  self.connectingConnections = [];\n\n  // Set state to destroyed\n  stateTransition(self, DESTROYED);\n}\n\n/**\n * Destroy pool\n * @method\n */\nPool.prototype.destroy = function(force) {\n  var self = this;\n  // Do not try again if the pool is already dead\n  if(this.state == DESTROYED || self.state == DESTROYING) return;\n  // Set state to destroyed\n  stateTransition(this, DESTROYING);\n\n  // Are we force closing\n  if(force) {\n    // Get all the known connections\n    var connections = self.availableConnections\n      .concat(self.inUseConnections)\n      .concat(self.nonAuthenticatedConnections)\n      .concat(self.connectingConnections);\n    return destroy(self, connections);\n  }\n\n  // Clear out the reconnect if set\n  if (this.reconnectId) {\n    clearTimeout(this.reconnectId);\n  }\n\n  // If we have a reconnect connection running, close\n  // immediately\n  if (this.reconnectConnection) {\n    this.reconnectConnection.destroy();\n  }\n\n  // Wait for the operations to drain before we close the pool\n  function checkStatus() {\n    flushMonitoringOperations(self.queue);\n\n    if(self.queue.length == 0) {\n      // Get all the known connections\n      var connections = self.availableConnections\n        .concat(self.inUseConnections)\n        .concat(self.nonAuthenticatedConnections)\n        .concat(self.connectingConnections);\n\n      // Check if we have any in flight operations\n      for(var i = 0; i < connections.length; i++) {\n        // There is an operation still in flight, reschedule a\n        // check waiting for it to drain\n        if(connections[i].workItems.length > 0) {\n          return setTimeout(checkStatus, 1);\n        }\n      }\n\n      destroy(self, connections);\n    // } else if (self.queue.length > 0 && !this.reconnectId) {\n      \n    } else {\n      // Ensure we empty the queue\n      _execute(self)();\n      // Set timeout\n      setTimeout(checkStatus, 1);\n    }\n  }\n\n  // Initiate drain of operations\n  checkStatus();\n}\n\n/**\n * Write a message to MongoDB\n * @method\n * @return {Connection}\n */\nPool.prototype.write = function(commands, options, cb) {\n  var self = this;\n  // Ensure we have a callback\n  if(typeof options == 'function') {\n    cb = options;\n  }\n\n  // Always have options\n  options = options || {};\n\n  // Pool was destroyed error out\n  if(this.state == DESTROYED || this.state == DESTROYING) {\n    // Callback with an error\n    if(cb) {\n      try {\n        cb(new MongoError('pool destroyed'));\n      } catch(err) {\n        process.nextTick(function() {\n          throw err;\n        });\n      }\n    }\n\n    return;\n  }\n\n  if(this.options.domainsEnabled\n    && process.domain && typeof cb === \"function\") {\n    // if we have a domain bind to it\n    var oldCb = cb;\n    cb = process.domain.bind(function() {\n      // v8 - argumentsToArray one-liner\n      var args = new Array(arguments.length); for(var i = 0; i < arguments.length; i++) { args[i] = arguments[i]; }\n      // bounce off event loop so domain switch takes place\n      process.nextTick(function() {\n        oldCb.apply(null, args);\n      });\n    });\n  }\n\n  // Do we have an operation\n  var operation = {\n    cb: cb, raw: false, promoteLongs: true, promoteValues: true, promoteBuffers: false, fullResult: false\n  };\n\n  var buffer = null\n\n  if(Array.isArray(commands)) {\n    buffer = [];\n\n    for(var i = 0; i < commands.length; i++) {\n      buffer.push(commands[i].toBin());\n    }\n\n    // Get the requestId\n    operation.requestId = commands[commands.length - 1].requestId;\n  } else {\n    operation.requestId = commands.requestId;\n    buffer = commands.toBin();\n  }\n\n  // Set the buffers\n  operation.buffer = buffer;\n\n  // Set the options for the parsing\n  operation.promoteLongs = typeof options.promoteLongs == 'boolean' ? options.promoteLongs : true;\n  operation.promoteValues = typeof options.promoteValues == 'boolean' ? options.promoteValues : true;\n  operation.promoteBuffers = typeof options.promoteBuffers == 'boolean' ? options.promoteBuffers : false;\n  operation.raw = typeof options.raw == 'boolean' ? options.raw : false;\n  operation.immediateRelease = typeof options.immediateRelease == 'boolean' ? options.immediateRelease : false;\n  operation.documentsReturnedIn = options.documentsReturnedIn;\n  operation.command = typeof options.command == 'boolean' ? options.command : false;\n  operation.fullResult = typeof options.fullResult == 'boolean' ? options.fullResult : false;\n  operation.noResponse = typeof options.noResponse == 'boolean' ? options.noResponse : false;\n  // operation.requestId = options.requestId;\n\n  // Optional per operation socketTimeout\n  operation.socketTimeout = options.socketTimeout;\n  operation.monitoring = options.monitoring;\n  // Custom socket Timeout\n  if(options.socketTimeout) {\n    operation.socketTimeout = options.socketTimeout;\n  }\n\n  // We need to have a callback function unless the message returns no response\n  if(!(typeof cb == 'function') && !options.noResponse) {\n    throw new MongoError('write method must provide a callback');\n  }\n\n  // If we have a monitoring operation schedule as the very first operation\n  // Otherwise add to back of queue\n  if(options.monitoring) {\n    this.queue.unshift(operation);\n  } else {\n    this.queue.push(operation);\n  }\n\n  // Attempt to execute the operation\n  if(!self.executing) {\n    process.nextTick(function() {\n      _execute(self)();\n    });\n  }\n}\n\n// Remove connection method\nfunction remove(connection, connections) {\n  for(var i = 0; i < connections.length; i++) {\n    if(connections[i] === connection) {\n      connections.splice(i, 1);\n      return true;\n    }\n  }\n}\n\nfunction removeConnection(self, connection) {\n  if(remove(connection, self.availableConnections)) return;\n  if(remove(connection, self.inUseConnections)) return;\n  if(remove(connection, self.connectingConnections)) return;\n  if(remove(connection, self.nonAuthenticatedConnections)) return;\n}\n\n// All event handlers\nvar handlers = [\"close\", \"message\", \"error\", \"timeout\", \"parseError\", \"connect\"];\n\nfunction _createConnection(self) {\n  if(self.state == DESTROYED || self.state == DESTROYING) {\n    return;\n  }\n  var connection = new Connection(messageHandler(self), self.options);\n\n  // Push the connection\n  self.connectingConnections.push(connection);\n\n  // Handle any errors\n  var tempErrorHandler = function(_connection) {\n    return function() {\n      // Destroy the connection\n      _connection.destroy();\n      // Remove the connection from the connectingConnections list\n      removeConnection(self, _connection);\n      // Start reconnection attempts\n      if(!self.reconnectId && self.options.reconnect) {\n        self.reconnectId = setTimeout(attemptReconnect(self), self.options.reconnectInterval);\n      }\n    }\n  }\n\n  // Handle successful connection\n  var tempConnectHandler = function(_connection) {\n    return function() {\n      // Destroyed state return\n      if(self.state == DESTROYED || self.state == DESTROYING) {\n        // Remove the connection from the list\n        removeConnection(self, _connection);\n        return _connection.destroy();\n      }\n\n      // Destroy all event emitters\n      handlers.forEach(function(e) {\n        _connection.removeAllListeners(e);\n      });\n\n      // Add the final handlers\n      _connection.once('close', connectionFailureHandler(self, 'close'));\n      _connection.once('error', connectionFailureHandler(self, 'error'));\n      _connection.once('timeout', connectionFailureHandler(self, 'timeout'));\n      _connection.once('parseError', connectionFailureHandler(self, 'parseError'));\n\n      // Signal\n      reauthenticate(self, _connection, function(err) {\n        if(self.state == DESTROYED || self.state == DESTROYING) {\n          return _connection.destroy();\n        }\n        // Remove the connection from the connectingConnections list\n        removeConnection(self, _connection);\n\n        // Handle error\n        if(err) {\n          return _connection.destroy();\n        }\n\n        // If we are c at the moment\n        // Do not automatially put in available connections\n        // As we need to apply the credentials first\n        if(self.authenticating) {\n          self.nonAuthenticatedConnections.push(_connection);\n        } else {\n          // Push to available\n          self.availableConnections.push(_connection);\n          // Execute any work waiting\n          _execute(self)();\n        }\n      });\n    }\n  }\n\n  // Add all handlers\n  connection.once('close', tempErrorHandler(connection));\n  connection.once('error', tempErrorHandler(connection));\n  connection.once('timeout', tempErrorHandler(connection));\n  connection.once('parseError', tempErrorHandler(connection));\n  connection.once('connect', tempConnectHandler(connection));\n\n  // Start connection\n  connection.connect();\n}\n\nfunction flushMonitoringOperations(queue) {\n  for(var i = 0; i < queue.length; i++) {\n    if(queue[i].monitoring) {\n      var workItem = queue[i];\n      queue.splice(i, 1);\n      workItem.cb(new MongoError({ message: 'no connection available for monitoring', driver:true }));\n    }\n  }\n}\n\nfunction _execute(self) {\n  return function() {\n    if(self.state == DESTROYED) return;\n    // Already executing, skip\n    if(self.executing) return;\n    // Set pool as executing\n    self.executing = true;\n\n    // Wait for auth to clear before continuing\n    function waitForAuth(cb) {\n      if(!self.authenticating) return cb();\n      // Wait for a milisecond and try again\n      setTimeout(function() {\n        waitForAuth(cb);\n      }, 1);\n    }\n\n    // Block on any auth in process\n    waitForAuth(function() {\n      // New pool connections are in progress, wait them to finish\n      // before executing any more operation to ensure distribution of\n      // operations\n      if(self.connectingConnections.length > 0) {\n        return;\n      }\n\n      // As long as we have available connections\n      while(true) {\n        // Total availble connections\n        var totalConnections = self.availableConnections.length\n          + self.connectingConnections.length\n          + self.inUseConnections.length;\n\n        // No available connections available, flush any monitoring ops\n        if(self.availableConnections.length == 0) {\n          // Flush any monitoring operations\n          flushMonitoringOperations(self.queue);\n          break;\n        }\n\n        // No queue break\n        if(self.queue.length == 0) {\n          break;\n        }\n\n        // Get a connection\n        var connection = null;\n\n        // Locate all connections that have no work\n        var connections = [];\n        // Get a list of all connections\n        for(var i = 0; i < self.availableConnections.length; i++) {\n          if(self.availableConnections[i].workItems.length == 0) {\n            connections.push(self.availableConnections[i]);\n          }\n        }\n\n        // No connection found that has no work on it, just pick one for pipelining\n        if(connections.length == 0) {\n          connection = self.availableConnections[self.connectionIndex++ % self.availableConnections.length];\n        } else {\n          connection = connections[self.connectionIndex++ % connections.length];\n        }\n\n        // Is the connection connected\n        if(connection.isConnected()) {\n          // Get the next work item\n          var workItem = self.queue.shift();\n\n          // If we are monitoring we need to use a connection that is not\n          // running another operation to avoid socket timeout changes\n          // affecting an existing operation\n          if (workItem.monitoring) {\n            var foundValidConnection = false;\n\n            for (var i = 0; i < self.availableConnections.length; i++) {\n              // If the connection is connected\n              // And there are no pending workItems on it\n              // Then we can safely use it for monitoring.\n              if(self.availableConnections[i].isConnected()\n                && self.availableConnections[i].workItems.length == 0) {\n                  foundValidConnection = true;\n                  connection = self.availableConnections[i];\n                  break;\n                }\n            }\n\n            // No safe connection found, attempt to grow the connections\n            // if possible and break from the loop\n            if(!foundValidConnection) {\n              // Put workItem back on the queue\n              self.queue.unshift(workItem);\n\n              // Attempt to grow the pool if it's not yet maxsize\n              if(totalConnections < self.options.size\n                && self.queue.length > 0) {\n                // Create a new connection\n                _createConnection(self);\n              }\n\n              // Re-execute the operation\n              setTimeout(function() {\n                _execute(self)();\n              }, 10);\n\n              break;\n            }\n          }\n\n          // Don't execute operation until we have a full pool\n          if(totalConnections < self.options.size) {\n            // Connection has work items, then put it back on the queue\n            // and create a new connection\n            if(connection.workItems.length > 0) {\n              // Lets put the workItem back on the list\n              self.queue.unshift(workItem);\n              // Create a new connection\n              _createConnection(self);\n              // Break from the loop\n              break;\n            }\n          }\n\n          // Get actual binary commands\n          var buffer = workItem.buffer;\n\n          // Set current status of authentication process\n          workItem.authenticating = self.authenticating;\n          workItem.authenticatingTimestamp = self.authenticatingTimestamp;\n\n          // If we are monitoring take the connection of the availableConnections\n          if (workItem.monitoring) {\n            moveConnectionBetween(connection, self.availableConnections, self.inUseConnections);\n          }\n\n          // Track the executing commands on the mongo server\n          // as long as there is an expected response\n          if (! workItem.noResponse) {\n            connection.workItems.push(workItem);\n          }\n\n          // We have a custom socketTimeout\n          if(!workItem.immediateRelease && typeof workItem.socketTimeout == 'number') {\n            connection.setSocketTimeout(workItem.socketTimeout);\n          }\n\n          // Put operation on the wire\n          if(Array.isArray(buffer)) {\n            for(var i = 0; i < buffer.length; i++) {\n              connection.write(buffer[i])\n            }\n          } else {\n            connection.write(buffer);\n          }\n\n          if(workItem.immediateRelease && self.authenticating) {\n            self.nonAuthenticatedConnections.push(connection);\n          }\n        } else {\n          // Remove the disconnected connection\n          removeConnection(self, connection);\n          // Flush any monitoring operations in the queue, failing fast\n          flushMonitoringOperations(self.queue);\n        }\n      }\n    });\n\n    self.executing = false;\n  }\n}\n\n// Make execution loop available for testing\nPool._execute = _execute;\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Pool#connect\n * @type {Pool}\n */\n\n/**\n * A server reconnect event, used to verify that pool reconnected.\n *\n * @event Pool#reconnect\n * @type {Pool}\n */\n\n/**\n * The server connection closed, all pool connections closed\n *\n * @event Pool#close\n * @type {Pool}\n */\n\n/**\n * The server connection caused an error, all pool connections closed\n *\n * @event Pool#error\n * @type {Pool}\n */\n\n/**\n * The server connection timed out, all pool connections closed\n *\n * @event Pool#timeout\n * @type {Pool}\n */\n\n/**\n * The driver experienced an invalid message, all pool connections closed\n *\n * @event Pool#parseError\n * @type {Pool}\n */\n\n/**\n * The driver attempted to reconnect\n *\n * @event Pool#attemptReconnect\n * @type {Pool}\n */\n\n/**\n * The driver exhausted all reconnect attempts\n *\n * @event Pool#reconnectFailed\n * @type {Pool}\n */\n\nmodule.exports = Pool;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/connection/command_result.js":"\"use strict\";\n\n/**\n * Creates a new CommandResult instance\n * @class\n * @param {object} result CommandResult object\n * @param {Connection} connection A connection instance associated with this result\n * @return {CommandResult} A cursor instance\n */\nvar CommandResult = function(result, connection, message) {\n  this.result = result;\n  this.connection = connection;\n  this.message = message;\n}\n\n/**\n * Convert CommandResult to JSON\n * @method\n * @return {object}\n */\nCommandResult.prototype.toJSON = function() {\n  return this.result;\n}\n\n/**\n * Convert CommandResult to String representation\n * @method\n * @return {string}\n */\nCommandResult.prototype.toString = function() {\n  return JSON.stringify(this.toJSON());\n}\n\nmodule.exports = CommandResult;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/topologies/shared.js":"\"use strict\"\n\nvar os = require('os'),\n  f = require('util').format;\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if(self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\n// Get package.json variable\nvar driverVersion = require('../../package.json').version;\nvar nodejsversion = f('Node.js %s, %s', process.version, os.endianness());\nvar type = os.type();\nvar name = process.platform;\nvar architecture = process.arch;\nvar release = os.release();\n\nfunction createClientInfo(options) {\n  // Build default client information\n  var clientInfo = options.clientInfo ? clone(options.clientInfo) : {\n    driver: {\n      name: \"nodejs-core\",\n      version: driverVersion\n    },\n    os: {\n      type: type,\n      name: name,\n      architecture: architecture,\n      version: release\n    }\n  }\n\n  // Is platform specified\n  if(clientInfo.platform && clientInfo.platform.indexOf('mongodb-core') == -1) {\n    clientInfo.platform = f('%s, mongodb-core: %s', clientInfo.platform, driverVersion);\n  } else if(!clientInfo.platform){\n    clientInfo.platform = nodejsversion;\n  }\n\n  // Do we have an application specific string\n  if(options.appname) {\n    // Cut at 128 bytes\n    var buffer = new Buffer(options.appname);\n    // Return the truncated appname\n    var appname = buffer.length > 128 ? buffer.slice(0, 128).toString('utf8') : options.appname;\n    // Add to the clientInfo\n    clientInfo.application = { name: appname };\n  }\n\n  return clientInfo;\n}\n\nfunction clone(object) {\n  return JSON.parse(JSON.stringify(object));\n}\n\nvar getPreviousDescription = function(self) {\n  if(!self.s.serverDescription) {\n    self.s.serverDescription = {\n      address: self.name,\n      arbiters: [], hosts: [], passives: [], type: 'Unknown'\n    }\n  }\n\n  return self.s.serverDescription;\n}\n\nvar emitServerDescriptionChanged = function(self, description) {\n  if(self.listeners('serverDescriptionChanged').length > 0) {\n    // Emit the server description changed events\n    self.emit('serverDescriptionChanged', {\n      topologyId: self.s.topologyId != -1 ? self.s.topologyId : self.id, address: self.name,\n      previousDescription: getPreviousDescription(self),\n      newDescription: description\n    });\n\n    self.s.serverDescription = description;\n  }\n}\n\nvar getPreviousTopologyDescription = function(self) {\n  if(!self.s.topologyDescription) {\n    self.s.topologyDescription = {\n      topologyType: 'Unknown',\n      servers: [{\n        address: self.name, arbiters: [], hosts: [], passives: [], type: 'Unknown'\n      }]\n    }\n  }\n\n  return self.s.topologyDescription;\n}\n\nvar emitTopologyDescriptionChanged = function(self, description) {\n  if(self.listeners('topologyDescriptionChanged').length > 0) {\n    // Emit the server description changed events\n    self.emit('topologyDescriptionChanged', {\n      topologyId: self.s.topologyId != -1 ? self.s.topologyId : self.id, address: self.name,\n      previousDescription: getPreviousTopologyDescription(self),\n      newDescription: description\n    });\n\n    self.s.serverDescription = description;\n  }\n}\n\nvar changedIsMaster = function(self, currentIsmaster, ismaster) {\n  var currentType = getTopologyType(self, currentIsmaster);\n  var newType = getTopologyType(self, ismaster);\n  if(newType != currentType) return true;\n  return false;\n}\n\nvar getTopologyType = function(self, ismaster) {\n  if(!ismaster) {\n    ismaster = self.ismaster;\n  }\n\n  if(!ismaster) return 'Unknown';\n  if(ismaster.ismaster && !ismaster.hosts) return 'Standalone';\n  if(ismaster.ismaster && ismaster.msg == 'isdbgrid') return 'Mongos';\n  if(ismaster.ismaster) return 'RSPrimary';\n  if(ismaster.secondary) return 'RSSecondary';\n  if(ismaster.arbiterOnly) return 'RSArbiter';\n  return 'Unknown';\n}\n\nvar inquireServerState = function(self) {\n  return function(callback) {\n    if(self.s.state == 'destroyed') return;\n    // Record response time\n    var start = new Date().getTime();\n\n    // emitSDAMEvent\n    emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: self.name });\n\n    // Attempt to execute ismaster command\n    self.command('admin.$cmd', { ismaster:true },  { monitoring:true }, function(err, r) {\n      if(!err) {\n        // Legacy event sender\n        self.emit('ismaster', r, self);\n\n        // Calculate latencyMS\n        var latencyMS = new Date().getTime() - start;\n\n        // Server heart beat event\n        emitSDAMEvent(self, 'serverHeartbeatSucceeded', { durationMS: latencyMS, reply: r.result, connectionId: self.name });\n\n        // Did the server change\n        if(changedIsMaster(self, self.s.ismaster, r.result)) {\n          // Emit server description changed if something listening\n          emitServerDescriptionChanged(self, {\n            address: self.name, arbiters: [], hosts: [], passives: [], type: !self.s.inTopology ? 'Standalone' : getTopologyType(self)\n          });\n        }\n\n        // Updat ismaster view\n        self.s.ismaster = r.result;\n\n        // Set server response time\n        self.s.isMasterLatencyMS = latencyMS;\n      } else {\n        emitSDAMEvent(self, 'serverHeartbeatFailed', { durationMS: latencyMS, failure: err, connectionId: self.name });\n      }\n\n      // Peforming an ismaster monitoring callback operation\n      if(typeof callback == 'function') {\n        return callback(err, r);\n      }\n\n      // Perform another sweep\n      self.s.inquireServerStateTimeout = setTimeout(inquireServerState(self), self.s.haInterval);\n    });\n  };\n}\n\n// Object.assign method or polyfille\nvar assign = Object.assign ? Object.assign : function assign(target) {\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert first argument to object');\n  }\n\n  var to = Object(target);\n  for (var i = 1; i < arguments.length; i++) {\n    var nextSource = arguments[i];\n    if (nextSource === undefined || nextSource === null) {\n      continue;\n    }\n\n    var keysArray = Object.keys(Object(nextSource));\n    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n      var nextKey = keysArray[nextIndex];\n      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n      if (desc !== undefined && desc.enumerable) {\n        to[nextKey] = nextSource[nextKey];\n      }\n    }\n  }\n  return to;\n}\n\n//\n// Clone the options\nvar cloneOptions = function(options) {\n  var opts = {};\n  for(var name in options) {\n    opts[name] = options[name];\n  }\n  return opts;\n}\n\nmodule.exports.inquireServerState = inquireServerState\nmodule.exports.getTopologyType = getTopologyType;\nmodule.exports.emitServerDescriptionChanged = emitServerDescriptionChanged;\nmodule.exports.emitTopologyDescriptionChanged = emitTopologyDescriptionChanged;\nmodule.exports.cloneOptions = cloneOptions;\nmodule.exports.assign = assign;\nmodule.exports.createClientInfo = createClientInfo;\nmodule.exports.clone = clone;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/auth/mongocr.js":"\"use strict\";\n\nvar f = require('util').format\n  , crypto = require('crypto')\n  , Query = require('../connection/commands').Query\n  , MongoError = require('../error');\n\nvar AuthSession = function(db, username, password) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n}\n\nAuthSession.prototype.equal = function(session) {\n  return session.db == this.db\n    && session.username == this.username\n    && session.password == this.password;\n}\n\n/**\n * Creates a new MongoCR authentication mechanism\n * @class\n * @return {MongoCR} A cursor instance\n */\nvar MongoCR = function(bson) {\n  this.bson = bson;\n  this.authStore = [];\n}\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for(var i = 0; i < authStore.length; i++) {\n    if(authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if(!found) authStore.push(session);\n}\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nMongoCR.prototype.auth = function(server, connections, db, username, password, callback) {\n  var self = this;\n  // Total connections\n  var count = connections.length;\n  if(count == 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while(connections.length > 0) {\n    // Execute MongoCR\n    var executeMongoCR = function(connection) {\n      // Write the commmand on the connection\n      server(connection, new Query(self.bson, f(\"%s.$cmd\", db), {\n        getnonce:1\n      }, {\n        numberToSkip: 0, numberToReturn: 1\n      }), function(err, r) {\n        var nonce = null;\n        var key = null;\n\n        // Adjust the number of connections left\n        // Get nonce\n        if(err == null) {\n          nonce = r.result.nonce;\n          // Use node md5 generator\n          var md5 = crypto.createHash('md5');\n          // Generate keys used for authentication\n          md5.update(username + \":mongo:\" + password, 'utf8');\n          var hash_password = md5.digest('hex');\n          // Final key\n          md5 = crypto.createHash('md5');\n          md5.update(nonce + username + hash_password, 'utf8');\n          key = md5.digest('hex');\n        }\n\n        // Execute command\n        // Write the commmand on the connection\n        server(connection, new Query(self.bson, f(\"%s.$cmd\", db), {\n          authenticate: 1, user: username, nonce: nonce, key:key\n        }, {\n          numberToSkip: 0, numberToReturn: 1\n        }), function(err, r) {\n          count = count - 1;\n\n          // If we have an error\n          if(err) {\n            errorObject = err;\n          } else if(r.result['$err']) {\n            errorObject = r.result;\n          } else if(r.result['errmsg']) {\n            errorObject = r.result;\n          } else {\n            numberOfValidConnections = numberOfValidConnections + 1;\n          }\n\n          // We have authenticated all connections\n          if(count == 0 && numberOfValidConnections > 0) {\n            // Store the auth details\n            addAuthSession(self.authStore, new AuthSession(db, username, password));\n            // Return correct authentication\n            callback(null, true);\n          } else if(count == 0) {\n            if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using mongocr\"));\n            callback(errorObject, false);\n          }\n        });\n      });\n    }\n\n    var _execute = function(_connection) {\n      process.nextTick(function() {\n        executeMongoCR(_connection);\n      });\n    }\n\n    _execute(connections.shift());\n  }\n}\n\n/**\n * Remove authStore credentials\n * @method\n * @param {string} db Name of database we are removing authStore details about\n * @return {object}\n */\nMongoCR.prototype.logout = function(dbName) {\n  this.authStore = this.authStore.filter(function(x) {\n    return x.db != dbName;\n  });\n}\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nMongoCR.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var count = authStore.length;\n  if(count == 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for(var i = 0; i < authStore.length; i++) {\n    this.auth(server, connections, authStore[i].db, authStore[i].username, authStore[i].password, function(err) {\n      count = count - 1;\n      // Done re-authenticating\n      if(count == 0) {\n        callback(err, null);\n      }\n    });\n  }\n}\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = MongoCR;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/auth/x509.js":"\"use strict\";\n\nvar f = require('util').format\n  , Query = require('../connection/commands').Query\n  , MongoError = require('../error');\n\nvar AuthSession = function(db, username, password) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n}\n\nAuthSession.prototype.equal = function(session) {\n  return session.db == this.db\n    && session.username == this.username\n    && session.password == this.password;\n}\n\n/**\n * Creates a new X509 authentication mechanism\n * @class\n * @return {X509} A cursor instance\n */\nvar X509 = function(bson) {\n  this.bson = bson;\n  this.authStore = [];\n}\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nX509.prototype.auth = function(server, connections, db, username, password, callback) {\n  var self = this;\n  // Total connections\n  var count = connections.length;\n  if(count == 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while(connections.length > 0) {\n    // Execute MongoCR\n    var execute = function(connection) {\n      // Let's start the sasl process\n      var command = {\n          authenticate: 1\n        , mechanism: 'MONGODB-X509'\n      };\n\n      // Add username if specified\n      if(username) {\n        command.user = username;\n      }\n\n      // Let's start the process\n      server(connection, new Query(self.bson, \"$external.$cmd\", command, {\n        numberToSkip: 0, numberToReturn: 1\n      }), function(err, r) {\n        // Adjust count\n        count = count - 1;\n\n        // If we have an error\n        if(err) {\n          errorObject = err;\n        } else if(r.result['$err']) {\n          errorObject = r.result;\n        } else if(r.result['errmsg']) {\n          errorObject = r.result;\n        } else {\n          numberOfValidConnections = numberOfValidConnections + 1;\n        }\n\n        // We have authenticated all connections\n        if(count == 0 && numberOfValidConnections > 0) {\n          // Store the auth details\n          addAuthSession(self.authStore, new AuthSession(db, username, password));\n          // Return correct authentication\n          callback(null, true);\n        } else if(count == 0) {\n          if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using mongocr\"));\n          callback(errorObject, false);\n        }\n      });\n    }\n\n    var _execute = function(_connection) {\n      process.nextTick(function() {\n        execute(_connection);\n      });\n    }\n\n    _execute(connections.shift());\n  }\n}\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for(var i = 0; i < authStore.length; i++) {\n    if(authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if(!found) authStore.push(session);\n}\n\n/**\n * Remove authStore credentials\n * @method\n * @param {string} db Name of database we are removing authStore details about\n * @return {object}\n */\nX509.prototype.logout = function(dbName) {\n  this.authStore = this.authStore.filter(function(x) {\n    return x.db != dbName;\n  });\n}\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nX509.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var count = authStore.length;\n  if(count == 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for(var i = 0; i < authStore.length; i++) {\n    this.auth(server, connections, authStore[i].db, authStore[i].username, authStore[i].password, function(err) {\n      count = count - 1;\n      // Done re-authenticating\n      if(count == 0) {\n        callback(err, null);\n      }\n    });\n  }\n}\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = X509;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/auth/plain.js":"\"use strict\";\n\nvar BSON = require('bson');\n\nvar f = require('util').format\n  , Binary = BSON.Binary\n  , retrieveBSON = require('../connection/utils').retrieveBSON\n  , Query = require('../connection/commands').Query\n  , MongoError = require('../error');\n\nvar BSON = retrieveBSON();\n\nvar AuthSession = function(db, username, password) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n}\n\nAuthSession.prototype.equal = function(session) {\n  return session.db == this.db\n    && session.username == this.username\n    && session.password == this.password;\n}\n\n/**\n * Creates a new Plain authentication mechanism\n * @class\n * @return {Plain} A cursor instance\n */\nvar Plain = function(bson) {\n  this.bson = bson;\n  this.authStore = [];\n}\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nPlain.prototype.auth = function(server, connections, db, username, password, callback) {\n  var self = this;\n  // Total connections\n  var count = connections.length;\n  if(count == 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while(connections.length > 0) {\n    // Execute MongoCR\n    var execute = function(connection) {\n      // Create payload\n      var payload = new Binary(f(\"\\x00%s\\x00%s\", username, password));\n\n      // Let's start the sasl process\n      var command = {\n          saslStart: 1\n        , mechanism: 'PLAIN'\n        , payload: payload\n        , autoAuthorize: 1\n      };\n\n      // Let's start the process\n      server(connection, new Query(self.bson, \"$external.$cmd\", command, {\n        numberToSkip: 0, numberToReturn: 1\n      }), function(err, r) {\n        // Adjust count\n        count = count - 1;\n\n        // If we have an error\n        if(err) {\n          errorObject = err;\n        } else if(r.result['$err']) {\n          errorObject = r.result;\n        } else if(r.result['errmsg']) {\n          errorObject = r.result;\n        } else {\n          numberOfValidConnections = numberOfValidConnections + 1;\n        }\n\n        // We have authenticated all connections\n        if(count == 0 && numberOfValidConnections > 0) {\n          // Store the auth details\n          addAuthSession(self.authStore, new AuthSession(db, username, password));\n          // Return correct authentication\n          callback(null, true);\n        } else if(count == 0) {\n          if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using mongocr\"));\n          callback(errorObject, false);\n        }\n      });\n    }\n\n    var _execute = function(_connection) {\n      process.nextTick(function() {\n        execute(_connection);\n      });\n    }\n\n    _execute(connections.shift());\n  }\n}\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for(var i = 0; i < authStore.length; i++) {\n    if(authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if(!found) authStore.push(session);\n}\n\n/**\n * Remove authStore credentials\n * @method\n * @param {string} db Name of database we are removing authStore details about\n * @return {object}\n */\nPlain.prototype.logout = function(dbName) {\n  this.authStore = this.authStore.filter(function(x) {\n    return x.db != dbName;\n  });\n}\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nPlain.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var count = authStore.length;\n  if(count == 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for(var i = 0; i < authStore.length; i++) {\n    this.auth(server, connections, authStore[i].db, authStore[i].username, authStore[i].password, function(err) {\n      count = count - 1;\n      // Done re-authenticating\n      if(count == 0) {\n        callback(err, null);\n      }\n    });\n  }\n}\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = Plain;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/auth/gssapi.js":"\"use strict\";\n\nvar f = require('util').format\n  , require_optional = require('require_optional')\n  , Query = require('../connection/commands').Query\n  , MongoError = require('../error');\n\nvar AuthSession = function(db, username, password, options) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n  this.options = options;\n}\n\nAuthSession.prototype.equal = function(session) {\n  return session.db == this.db\n    && session.username == this.username\n    && session.password == this.password;\n}\n\n// Kerberos class\nvar Kerberos = null;\nvar MongoAuthProcess = null;\n\n// Try to grab the Kerberos class\ntry {\n  Kerberos = require_optional('kerberos').Kerberos;\n  // Authentication process for Mongo\n  MongoAuthProcess = require_optional('kerberos').processes.MongoAuthProcess;\n} catch(err) {  \n}\n\n/**\n * Creates a new GSSAPI authentication mechanism\n * @class\n * @return {GSSAPI} A cursor instance\n */\nvar GSSAPI = function(bson) {\n  this.bson = bson;\n  this.authStore = [];\n}\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nGSSAPI.prototype.auth = function(server, connections, db, username, password, options, callback) {\n  var self = this;\n  // We don't have the Kerberos library\n  if(Kerberos == null) return callback(new Error(\"Kerberos library is not installed\"));\n  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';\n  // Total connections\n  var count = connections.length;\n  if(count == 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while(connections.length > 0) {\n    // Execute MongoCR\n    var execute = function(connection) {\n      // Start Auth process for a connection\n      GSSAPIInitialize(self, db, username, password, db, gssapiServiceName, server, connection, options, function(err, r) {\n        // Adjust count\n        count = count - 1;\n\n        // If we have an error\n        if(err) {\n          errorObject = err;\n        } else if(r.result['$err']) {\n          errorObject = r.result;\n        } else if(r.result['errmsg']) {\n          errorObject = r.result;\n        } else {\n          numberOfValidConnections = numberOfValidConnections + 1;\n        }\n\n        // We have authenticated all connections\n        if(count == 0 && numberOfValidConnections > 0) {\n          // Store the auth details\n          addAuthSession(self.authStore, new AuthSession(db, username, password, options));\n          // Return correct authentication\n          callback(null, true);\n        } else if(count == 0) {\n          if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using mongocr\"));\n          callback(errorObject, false);\n        }\n      });\n    }\n\n    var _execute = function(_connection) {\n      process.nextTick(function() {\n        execute(_connection);\n      });\n    }\n\n    _execute(connections.shift());\n  }\n}\n\n//\n// Initialize step\nvar GSSAPIInitialize = function(self, db, username, password, authdb, gssapiServiceName, server, connection, options, callback) {\n  // Create authenticator\n  var mongo_auth_process = new MongoAuthProcess(connection.host, connection.port, gssapiServiceName, options);\n\n  // Perform initialization\n  mongo_auth_process.init(username, password, function(err) {\n    if(err) return callback(err, false);\n\n    // Perform the first step\n    mongo_auth_process.transition('', function(err, payload) {\n      if(err) return callback(err, false);\n\n      // Call the next db step\n      MongoDBGSSAPIFirstStep(self, mongo_auth_process, payload, db, username, password, authdb, server, connection, callback);\n    });\n  });\n}\n\n//\n// Perform first step against mongodb\nvar MongoDBGSSAPIFirstStep = function(self, mongo_auth_process, payload, db, username, password, authdb, server, connection, callback) {\n  // Build the sasl start command\n  var command = {\n      saslStart: 1\n    , mechanism: 'GSSAPI'\n    , payload: payload\n    , autoAuthorize: 1\n  };\n\n  // Write the commmand on the connection\n  server(connection, new Query(self.bson, \"$external.$cmd\", command, {\n    numberToSkip: 0, numberToReturn: 1\n  }), function(err, r) {\n    if(err) return callback(err, false);\n    var doc = r.result;\n    // Execute mongodb transition\n    mongo_auth_process.transition(r.result.payload, function(err, payload) {\n      if(err) return callback(err, false);\n\n      // MongoDB API Second Step\n      MongoDBGSSAPISecondStep(self, mongo_auth_process, payload, doc, db, username, password, authdb, server, connection, callback);\n    });\n  });\n}\n\n//\n// Perform first step against mongodb\nvar MongoDBGSSAPISecondStep = function(self, mongo_auth_process, payload, doc, db, username, password, authdb, server, connection, callback) {\n  // Build Authentication command to send to MongoDB\n  var command = {\n      saslContinue: 1\n    , conversationId: doc.conversationId\n    , payload: payload\n  };\n\n  // Execute the command\n  // Write the commmand on the connection\n  server(connection, new Query(self.bson, \"$external.$cmd\", command, {\n    numberToSkip: 0, numberToReturn: 1\n  }), function(err, r) {\n    if(err) return callback(err, false);\n    var doc = r.result;\n    // Call next transition for kerberos\n    mongo_auth_process.transition(doc.payload, function(err, payload) {\n      if(err) return callback(err, false);\n\n      // Call the last and third step\n      MongoDBGSSAPIThirdStep(self, mongo_auth_process, payload, doc, db, username, password, authdb, server, connection, callback);\n    });\n  });\n}\n\nvar MongoDBGSSAPIThirdStep = function(self, mongo_auth_process, payload, doc, db, username, password, authdb, server, connection, callback) {\n  // Build final command\n  var command = {\n      saslContinue: 1\n    , conversationId: doc.conversationId\n    , payload: payload\n  };\n\n  // Execute the command\n  server(connection, new Query(self.bson, \"$external.$cmd\", command, {\n    numberToSkip: 0, numberToReturn: 1\n  }), function(err, r) {\n    if(err) return callback(err, false);\n    mongo_auth_process.transition(null, function(err) {\n      if(err) return callback(err, null);\n      callback(null, r);\n    });\n  });\n}\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for(var i = 0; i < authStore.length; i++) {\n    if(authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if(!found) authStore.push(session);\n}\n\n/**\n * Remove authStore credentials\n * @method\n * @param {string} db Name of database we are removing authStore details about\n * @return {object}\n */\nGSSAPI.prototype.logout = function(dbName) {\n  this.authStore = this.authStore.filter(function(x) {\n    return x.db != dbName;\n  });\n}\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nGSSAPI.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var count = authStore.length;\n  if(count == 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for(var i = 0; i < authStore.length; i++) {\n    this.auth(server, connections, authStore[i].db, authStore[i].username, authStore[i].password, authStore[i].options, function(err) {\n      count = count - 1;\n      // Done re-authenticating\n      if(count == 0) {\n        callback(err, null);\n      }\n    });\n  }\n}\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = GSSAPI;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/auth/sspi.js":"\"use strict\";\n\nvar f = require('util').format\n  , require_optional = require('require_optional')\n  , Query = require('../connection/commands').Query\n  , MongoError = require('../error');\n\nvar AuthSession = function(db, username, password, options) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n  this.options = options;\n}\n\nAuthSession.prototype.equal = function(session) {\n  return session.db == this.db\n    && session.username == this.username\n    && session.password == this.password;\n}\n\n// Kerberos class\nvar Kerberos = null;\nvar MongoAuthProcess = null;\n\n// Try to grab the Kerberos class\ntry {\n  Kerberos = require_optional('kerberos').Kerberos\n  // Authentication process for Mongo\n  MongoAuthProcess = require_optional('kerberos').processes.MongoAuthProcess\n} catch(err) {}\n\n/**\n * Creates a new SSPI authentication mechanism\n * @class\n * @return {SSPI} A cursor instance\n */\nvar SSPI = function(bson) {\n  this.bson = bson;\n  this.authStore = [];\n}\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nSSPI.prototype.auth = function(server, connections, db, username, password, options, callback) {\n  var self = this;\n  // We don't have the Kerberos library\n  if(Kerberos == null) return callback(new Error(\"Kerberos library is not installed\"));\n  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';\n  // Total connections\n  var count = connections.length;\n  if(count == 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while(connections.length > 0) {\n    // Execute MongoCR\n    var execute = function(connection) {\n      // Start Auth process for a connection\n      SSIPAuthenticate(self, username, password, gssapiServiceName, server, connection, options, function(err, r) {\n        // Adjust count\n        count = count - 1;\n\n        // If we have an error\n        if(err) {\n          errorObject = err;\n        } else if(r && typeof r == 'object' && r.result['$err']) {\n          errorObject = r.result;\n        } else if(r && typeof r == 'object' && r.result['errmsg']) {\n          errorObject = r.result;\n        } else {\n          numberOfValidConnections = numberOfValidConnections + 1;\n        }\n\n        // We have authenticated all connections\n        if(count == 0 && numberOfValidConnections > 0) {\n          // Store the auth details\n          addAuthSession(self.authStore, new AuthSession(db, username, password, options));\n          // Return correct authentication\n          callback(null, true);\n        } else if(count == 0) {\n          if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using mongocr\"));\n          callback(errorObject, false);\n        }\n      });\n    }\n\n    var _execute = function(_connection) {\n      process.nextTick(function() {\n        execute(_connection);\n      });\n    }\n\n    _execute(connections.shift());\n  }\n}\n\nvar SSIPAuthenticate = function(self, username, password, gssapiServiceName, server, connection, options, callback) {\n  // Build Authentication command to send to MongoDB\n  var command = {\n      saslStart: 1\n    , mechanism: 'GSSAPI'\n    , payload: ''\n    , autoAuthorize: 1\n  };\n\n  // Create authenticator\n  var mongo_auth_process = new MongoAuthProcess(connection.host, connection.port, gssapiServiceName, options);\n\n  // Execute first sasl step\n  server(connection, new Query(self.bson, \"$external.$cmd\", command, {\n    numberToSkip: 0, numberToReturn: 1\n  }), function(err, r) {\n    if(err) return callback(err, false);\n    var doc = r.result;\n\n    mongo_auth_process.init(username, password, function(err) {\n      if(err) return callback(err);\n\n      mongo_auth_process.transition(doc.payload, function(err, payload) {\n        if(err) return callback(err);\n\n        // Perform the next step against mongod\n        var command = {\n            saslContinue: 1\n          , conversationId: doc.conversationId\n          , payload: payload\n        };\n\n        // Execute the command\n        server(connection, new Query(self.bson, \"$external.$cmd\", command, {\n          numberToSkip: 0, numberToReturn: 1\n        }), function(err, r) {\n          if(err) return callback(err, false);\n          var doc = r.result;\n\n          mongo_auth_process.transition(doc.payload, function(err, payload) {\n            if(err) return callback(err);\n\n            // Perform the next step against mongod\n            var command = {\n                saslContinue: 1\n              , conversationId: doc.conversationId\n              , payload: payload\n            };\n\n            // Execute the command\n            server(connection, new Query(self.bson, \"$external.$cmd\", command, {\n              numberToSkip: 0, numberToReturn: 1\n            }), function(err, r) {\n              if(err) return callback(err, false);\n              var doc = r.result;\n\n              mongo_auth_process.transition(doc.payload, function(err, payload) {\n                // Perform the next step against mongod\n                var command = {\n                    saslContinue: 1\n                  , conversationId: doc.conversationId\n                  , payload: payload\n                };\n\n                // Execute the command\n                server(connection, new Query(self.bson, \"$external.$cmd\", command, {\n                  numberToSkip: 0, numberToReturn: 1\n                }), function(err, r) {\n                  if(err) return callback(err, false);\n                  var doc = r.result;\n\n                  if(doc.done) return callback(null, true);\n                  callback(new Error(\"Authentication failed\"), false);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for(var i = 0; i < authStore.length; i++) {\n    if(authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if(!found) authStore.push(session);\n}\n\n/**\n * Remove authStore credentials\n * @method\n * @param {string} db Name of database we are removing authStore details about\n * @return {object}\n */\nSSPI.prototype.logout = function(dbName) {\n  this.authStore = this.authStore.filter(function(x) {\n    return x.db != dbName;\n  });\n}\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nSSPI.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var count = authStore.length;\n  if(count == 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for(var i = 0; i < authStore.length; i++) {\n    this.auth(server, connections, authStore[i].db, authStore[i].username, authStore[i].password, authStore[i].options, function(err) {\n      count = count - 1;\n      // Done re-authenticating\n      if(count == 0) {\n        callback(err, null);\n      }\n    });\n  }\n}\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = SSPI;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/auth/scram.js":"\"use strict\";\n\nvar f = require('util').format\n  , crypto = require('crypto')\n  , retrieveBSON = require('../connection/utils').retrieveBSON\n  , Query = require('../connection/commands').Query\n  , MongoError = require('../error');\n\nvar BSON = retrieveBSON(),\n  Binary = BSON.Binary;\n\nvar AuthSession = function(db, username, password) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n}\n\nAuthSession.prototype.equal = function(session) {\n  return session.db == this.db\n    && session.username == this.username\n    && session.password == this.password;\n}\n\nvar id = 0;\n\n/**\n * Creates a new ScramSHA1 authentication mechanism\n * @class\n * @return {ScramSHA1} A cursor instance\n */\nvar ScramSHA1 = function(bson) {\n  this.bson = bson;\n  this.authStore = [];\n  this.id = id++;\n}\n\nvar parsePayload = function(payload) {\n  var dict = {};\n  var parts = payload.split(',');\n\n  for(var i = 0; i < parts.length; i++) {\n    var valueParts = parts[i].split('=');\n    dict[valueParts[0]] = valueParts[1];\n  }\n\n  return dict;\n}\n\nvar passwordDigest = function(username, password) {\n  if(typeof username != 'string') throw new MongoError(\"username must be a string\");\n  if(typeof password != 'string') throw new MongoError(\"password must be a string\");\n  if(password.length == 0) throw new MongoError(\"password cannot be empty\");\n  // Use node md5 generator\n  var md5 = crypto.createHash('md5');\n  // Generate keys used for authentication\n  md5.update(username + \":mongo:\" + password, 'utf8');\n  return md5.digest('hex');\n}\n\n// XOR two buffers\nvar xor = function(a, b) {\n  if (!Buffer.isBuffer(a)) a = new Buffer(a)\n  if (!Buffer.isBuffer(b)) b = new Buffer(b)\n  var res = []\n  if (a.length > b.length) {\n    for (var i = 0; i < b.length; i++) {\n      res.push(a[i] ^ b[i])\n    }\n  } else {\n    for (i = 0; i < a.length; i++) {\n      res.push(a[i] ^ b[i])\n    }\n  }\n  return new Buffer(res);\n}\n\n// Create a final digest\nvar hi = function(data, salt, iterations) {\n  // Create digest\n  var digest = function(msg) {\n    var hmac = crypto.createHmac('sha1', data);\n    hmac.update(msg);\n    return new Buffer(hmac.digest('base64'), 'base64');\n  }\n\n  // Create variables\n  salt = Buffer.concat([salt, new Buffer('\\x00\\x00\\x00\\x01')])\n  var ui = digest(salt);\n  var u1 = ui;\n\n  for(var i = 0; i < iterations - 1; i++) {\n    u1 = digest(u1);\n    ui = xor(ui, u1);\n  }\n\n  return ui;\n}\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nScramSHA1.prototype.auth = function(server, connections, db, username, password, callback) {\n  var self = this;\n  // Total connections\n  var count = connections.length;\n  if(count == 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var errorObject = null;\n\n  // Execute MongoCR\n  var executeScram = function(connection) {\n    // Clean up the user\n    username = username.replace('=', \"=3D\").replace(',', '=2C');\n\n    // Create a random nonce\n    var nonce = crypto.randomBytes(24).toString('base64');\n    // var nonce = 'MsQUY9iw0T9fx2MUEz6LZPwGuhVvWAhc'\n    var firstBare = f(\"n=%s,r=%s\", username, nonce);\n\n    // Build command structure\n    var cmd = {\n        saslStart: 1\n      , mechanism: 'SCRAM-SHA-1'\n      , payload: new Binary(f(\"n,,%s\", firstBare))\n      , autoAuthorize: 1\n    }\n\n    // Handle the error\n    var handleError = function(err, r) {\n      if(err) {\n        numberOfValidConnections = numberOfValidConnections - 1;\n        errorObject = err; return false;\n      } else if(r.result['$err']) {\n        errorObject = r.result; return false;\n      } else if(r.result['errmsg']) {\n        errorObject = r.result; return false;\n      } else {\n        numberOfValidConnections = numberOfValidConnections + 1;\n      }\n\n      return true\n    }\n\n    // Finish up\n    var finish = function(_count, _numberOfValidConnections) {\n      if(_count == 0 && _numberOfValidConnections > 0) {\n        // Store the auth details\n        addAuthSession(self.authStore, new AuthSession(db, username, password));\n        // Return correct authentication\n        return callback(null, true);\n      } else if(_count == 0) {\n        if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using scram\"));\n        return callback(errorObject, false);\n      }\n    }\n\n    var handleEnd = function(_err, _r) {\n      // Handle any error\n      handleError(_err, _r)\n      // Adjust the number of connections\n      count = count - 1;\n      // Execute the finish\n      finish(count, numberOfValidConnections);\n    }\n\n    // Write the commmand on the connection\n    server(connection, new Query(self.bson, f(\"%s.$cmd\", db), cmd, {\n      numberToSkip: 0, numberToReturn: 1\n    }), function(err, r) {\n      // Do we have an error, handle it\n      if(handleError(err, r) == false) {\n        count = count - 1;\n\n        if(count == 0 && numberOfValidConnections > 0) {\n          // Store the auth details\n          addAuthSession(self.authStore, new AuthSession(db, username, password));\n          // Return correct authentication\n          return callback(null, true);\n        } else if(count == 0) {\n          if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using scram\"));\n          return callback(errorObject, false);\n        }\n\n        return;\n      }\n\n      // Get the dictionary\n      var dict = parsePayload(r.result.payload.value())\n\n      // Unpack dictionary\n      var iterations = parseInt(dict.i, 10);\n      var salt = dict.s;\n      var rnonce = dict.r;\n\n      // Set up start of proof\n      var withoutProof = f(\"c=biws,r=%s\", rnonce);\n      var passwordDig = passwordDigest(username, password);\n      var saltedPassword = hi(passwordDig\n          , new Buffer(salt, 'base64')\n          , iterations);\n\n      // Create the client key\n      var hmac = crypto.createHmac('sha1', saltedPassword);\n      hmac.update(new Buffer(\"Client Key\"));\n      var clientKey = new Buffer(hmac.digest('base64'), 'base64');\n\n      // Create the stored key\n      var hash = crypto.createHash('sha1');\n      hash.update(clientKey);\n      var storedKey = new Buffer(hash.digest('base64'), 'base64');\n\n      // Create the authentication message\n      var authMsg = [firstBare, r.result.payload.value().toString('base64'), withoutProof].join(',');\n\n      // Create client signature\n      hmac = crypto.createHmac('sha1', storedKey);\n      hmac.update(new Buffer(authMsg));\n      var clientSig = new Buffer(hmac.digest('base64'), 'base64');\n\n      // Create client proof\n      var clientProof = f(\"p=%s\", new Buffer(xor(clientKey, clientSig)).toString('base64'));\n\n      // Create client final\n      var clientFinal = [withoutProof, clientProof].join(',');\n\n      // Generate server key\n      hmac = crypto.createHmac('sha1', saltedPassword);\n      hmac.update(new Buffer('Server Key'))\n      var serverKey = new Buffer(hmac.digest('base64'), 'base64');\n\n      // Generate server signature\n      hmac = crypto.createHmac('sha1', serverKey);\n      hmac.update(new Buffer(authMsg))\n\n      //\n      // Create continue message\n      var cmd = {\n          saslContinue: 1\n        , conversationId: r.result.conversationId\n        , payload: new Binary(new Buffer(clientFinal))\n      }\n\n      //\n      // Execute sasl continue\n      // Write the commmand on the connection\n      server(connection, new Query(self.bson, f(\"%s.$cmd\", db), cmd, {\n        numberToSkip: 0, numberToReturn: 1\n      }), function(err, r) {\n        if(r && r.result.done == false) {\n          var cmd = {\n              saslContinue: 1\n            , conversationId: r.result.conversationId\n            , payload: new Buffer(0)\n          }\n\n          // Write the commmand on the connection\n          server(connection, new Query(self.bson, f(\"%s.$cmd\", db), cmd, {\n            numberToSkip: 0, numberToReturn: 1\n          }), function(err, r) {\n            handleEnd(err, r);\n          });\n        } else {\n          handleEnd(err, r);\n        }\n      });\n    });\n  }\n\n  var _execute = function(_connection) {\n    process.nextTick(function() {\n      executeScram(_connection);\n    });\n  }\n\n  // For each connection we need to authenticate\n  while(connections.length > 0) {\n    _execute(connections.shift());\n  }\n}\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for(var i = 0; i < authStore.length; i++) {\n    if(authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if(!found) authStore.push(session);\n}\n\n/**\n * Remove authStore credentials\n * @method\n * @param {string} db Name of database we are removing authStore details about\n * @return {object}\n */\nScramSHA1.prototype.logout = function(dbName) {\n  this.authStore = this.authStore.filter(function(x) {\n    return x.db != dbName;\n  });\n}\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nScramSHA1.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var count = authStore.length;\n  // No connections\n  if(count == 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for(var i = 0; i < authStore.length; i++) {\n    this.auth(server, connections, authStore[i].db, authStore[i].username, authStore[i].password, function(err) {\n      count = count - 1;\n      // Done re-authenticating\n      if(count == 0) {\n        callback(err, null);\n      }\n    });\n  }\n}\n\n\nmodule.exports = ScramSHA1;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/wireprotocol/2_4_support.js":"\"use strict\";\n\nvar Insert = require('./commands').Insert\n  , Update = require('./commands').Update\n  , Remove = require('./commands').Remove\n  , copy = require('../connection/utils').copy\n  , retrieveBSON = require('../connection/utils').retrieveBSON\n  , KillCursor = require('../connection/commands').KillCursor\n  , GetMore = require('../connection/commands').GetMore\n  , Query = require('../connection/commands').Query\n  , f = require('util').format\n  , CommandResult = require('../connection/command_result')\n  , MongoError = require('../error')\n  , getReadPreference = require('./shared').getReadPreference;\n\nvar BSON = retrieveBSON(),\n  Long = BSON.Long;\n\n// Write concern fields\nvar writeConcernFields = ['w', 'wtimeout', 'j', 'fsync'];\n\nvar WireProtocol = function() {}\n\n//\n// Needs to support legacy mass insert as well as ordered/unordered legacy\n// emulation\n//\nWireProtocol.prototype.insert = function(pool, ismaster, ns, bson, ops, options, callback) {\n  options = options || {};\n  // Default is ordered execution\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  ops = Array.isArray(ops) ? ops :[ops];\n\n  // If we have more than a 1000 ops fails\n  if(ops.length > 1000) return callback(new MongoError(\"exceeded maximum write batch size of 1000\"));\n\n  // Write concern\n  var writeConcern = options.writeConcern || {w:1};\n\n  // We are unordered\n  if(!ordered || writeConcern.w == 0) {\n    return executeUnordered('insert', Insert, ismaster, ns, bson, pool, ops, options, callback);\n  }\n\n  return executeOrdered('insert', Insert, ismaster, ns, bson, pool, ops, options, callback);\n}\n\nWireProtocol.prototype.update = function(pool, ismaster, ns, bson, ops, options, callback) {\n  options = options || {};\n  // Default is ordered execution\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  ops = Array.isArray(ops) ? ops :[ops];\n\n  // Write concern\n  var writeConcern = options.writeConcern || {w:1};\n\n  // We are unordered\n  if(!ordered || writeConcern.w == 0) {\n    return executeUnordered('update', Update, ismaster, ns, bson, pool, ops, options, callback);\n  }\n\n  return executeOrdered('update', Update, ismaster, ns, bson, pool, ops, options, callback);\n}\n\nWireProtocol.prototype.remove = function(pool, ismaster, ns, bson, ops, options, callback) {\n  options = options || {};\n  // Default is ordered execution\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  ops = Array.isArray(ops) ? ops :[ops];\n\n  // Write concern\n  var writeConcern = options.writeConcern || {w:1};\n\n  // We are unordered\n  if(!ordered || writeConcern.w == 0) {\n    return executeUnordered('remove', Remove, ismaster, ns, bson, pool, ops, options, callback);\n  }\n\n  return executeOrdered('remove', Remove, ismaster, ns, bson, pool, ops, options, callback);\n}\n\nWireProtocol.prototype.killCursor = function(bson, ns, cursorId, pool, callback) {\n  // Create a kill cursor command\n  var killCursor = new KillCursor(bson, [cursorId]);\n  // Execute the kill cursor command\n  if(pool && pool.isConnected()) {\n    pool.write(killCursor, {\n      immediateRelease:true, noResponse: true\n    });\n  }\n\n  // Callback\n  if(typeof callback == 'function') callback(null, null);\n}\n\nWireProtocol.prototype.getMore = function(bson, ns, cursorState, batchSize, raw, connection, options, callback) {\n  // Create getMore command\n  var getMore = new GetMore(bson, ns, cursorState.cursorId, {numberToReturn: batchSize});\n\n  // Query callback\n  var queryCallback = function(err, result) {\n    if(err) return callback(err);\n    // Get the raw message\n    var r = result.message;\n\n    // If we have a timed out query or a cursor that was killed\n    if((r.responseFlags & (1 << 0)) != 0) {\n      return callback(new MongoError(\"cursor does not exist, was killed or timed out\"), null);\n    }\n\n    // Ensure we have a Long valie cursor id\n    var cursorId = typeof r.cursorId == 'number'\n      ? Long.fromNumber(r.cursorId)\n      : r.cursorId;\n\n    // Set all the values\n    cursorState.documents = r.documents;\n    cursorState.cursorId = cursorId;\n\n    // Return\n    callback(null, null, r.connection);\n  }\n\n  // Contains any query options\n  var queryOptions = {};\n\n  // If we have a raw query decorate the function\n  if(raw) {\n    queryOptions.raw = raw;\n  }\n\n  // Check if we need to promote longs\n  if(typeof cursorState.promoteLongs == 'boolean') {\n    queryOptions.promoteLongs = cursorState.promoteLongs;\n  }\n\n  if(typeof cursorState.promoteValues == 'boolean') {\n    queryOptions.promoteValues = cursorState.promoteValues;\n  }\n\n  if(typeof cursorState.promoteBuffers == 'boolean') {\n    queryOptions.promoteBuffers = cursorState.promoteBuffers;\n  }\n\n  // Write out the getMore command\n  connection.write(getMore, queryOptions, queryCallback);\n}\n\nWireProtocol.prototype.command = function(bson, ns, cmd, cursorState, topology, options) {\n  // Establish type of command\n  if(cmd.find) {\n    return setupClassicFind(bson, ns, cmd, cursorState, topology, options)\n  } else if(cursorState.cursorId != null) {\n    return;\n  } else if(cmd) {\n    return setupCommand(bson, ns, cmd, cursorState, topology, options);\n  } else {\n    throw new MongoError(f(\"command %s does not return a cursor\", JSON.stringify(cmd)));\n  }\n}\n\n//\n// Execute a find command\nvar setupClassicFind = function(bson, ns, cmd, cursorState, topology, options) {\n  // Ensure we have at least some options\n  options = options || {};\n  // Get the readPreference\n  var readPreference = getReadPreference(cmd, options);\n  // Set the optional batchSize\n  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;\n  var numberToReturn = 0;\n\n  // Unpack the limit and batchSize values\n  if(cursorState.limit == 0) {\n    numberToReturn = cursorState.batchSize;\n  } else if(cursorState.limit < 0 || cursorState.limit < cursorState.batchSize || (cursorState.limit > 0 && cursorState.batchSize == 0)) {\n    numberToReturn = cursorState.limit;\n  } else {\n    numberToReturn = cursorState.batchSize;\n  }\n\n  var numberToSkip = cursorState.skip || 0;\n  // Build actual find command\n  var findCmd = {};\n  // Using special modifier\n  var usesSpecialModifier = false;\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if(topology.type == 'mongos' && readPreference) {\n    findCmd['$readPreference'] = readPreference.toJSON();\n    usesSpecialModifier = true;\n  }\n\n  // Add special modifiers to the query\n  if(cmd.sort) findCmd['orderby'] = cmd.sort, usesSpecialModifier = true;\n  if(cmd.hint) findCmd['$hint'] = cmd.hint, usesSpecialModifier = true;\n  if(cmd.snapshot) findCmd['$snapshot'] = cmd.snapshot, usesSpecialModifier = true;\n  if(cmd.returnKey) findCmd['$returnKey'] = cmd.returnKey, usesSpecialModifier = true;\n  if(cmd.maxScan) findCmd['$maxScan'] = cmd.maxScan, usesSpecialModifier = true;\n  if(cmd.min) findCmd['$min'] = cmd.min, usesSpecialModifier = true;\n  if(cmd.max) findCmd['$max'] = cmd.max, usesSpecialModifier = true;\n  if(cmd.showDiskLoc) findCmd['$showDiskLoc'] = cmd.showDiskLoc, usesSpecialModifier = true;\n  if(cmd.comment) findCmd['$comment'] = cmd.comment, usesSpecialModifier = true;\n  if(cmd.maxTimeMS) findCmd['$maxTimeMS'] = cmd.maxTimeMS, usesSpecialModifier = true;\n\n  if(cmd.explain) {\n\t// nToReturn must be 0 (match all) or negative (match N and close cursor)\n\t// nToReturn > 0 will give explain results equivalent to limit(0)\n    numberToReturn = -Math.abs(cmd.limit || 0);\n    usesSpecialModifier = true;\n    findCmd['$explain'] = true;\n  }\n\n  // If we have a special modifier\n  if(usesSpecialModifier) {\n    findCmd['$query'] = cmd.query;\n  } else {\n    findCmd = cmd.query;\n  }\n\n  // Throw on majority readConcern passed in\n  if(cmd.readConcern && cmd.readConcern.level != 'local') {\n    throw new MongoError(f('server find command does not support a readConcern level of %s', cmd.readConcern.level));\n  }\n\n  // Remove readConcern, ensure no failing commands\n  if(cmd.readConcern) {\n    cmd = copy(cmd);\n    delete cmd['readConcern'];\n  }\n\n  // Set up the serialize and ignoreUndefined fields\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean'\n    ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean'\n    ? options.ignoreUndefined : false;\n\n  // Build Query object\n  var query = new Query(bson, ns, findCmd, {\n      numberToSkip: numberToSkip, numberToReturn: numberToReturn\n    , checkKeys: false, returnFieldSelector: cmd.fields\n    , serializeFunctions: serializeFunctions, ignoreUndefined: ignoreUndefined\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Set up the option bits for wire protocol\n  if(typeof cmd.tailable == 'boolean') query.tailable = cmd.tailable;\n  if(typeof cmd.oplogReplay == 'boolean') query.oplogReplay = cmd.oplogReplay;\n  if(typeof cmd.noCursorTimeout == 'boolean') query.noCursorTimeout = cmd.noCursorTimeout;\n  if(typeof cmd.awaitData == 'boolean') query.awaitData = cmd.awaitData;\n  if(typeof cmd.partial == 'boolean') query.partial = cmd.partial;\n  // Return the query\n  return query;\n}\n\n//\n// Set up a command cursor\nvar setupCommand = function(bson, ns, cmd, cursorState, topology, options) {\n  // Set empty options object\n  options = options || {}\n  // Get the readPreference\n  var readPreference = getReadPreference(cmd, options);\n  // Final query\n  var finalCmd = {};\n  for(var name in cmd) {\n    finalCmd[name] = cmd[name];\n  }\n\n  // Build command namespace\n  var parts = ns.split(/\\./);\n\n  // Throw on majority readConcern passed in\n  if(cmd.readConcern && cmd.readConcern.level != 'local') {\n    throw new MongoError(f('server %s command does not support a readConcern level of %s', JSON.stringify(cmd), cmd.readConcern.level));\n  }\n\n  // Remove readConcern, ensure no failing commands\n  if(cmd.readConcern) delete cmd['readConcern'];\n\n  // Serialize functions\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean'\n    ? options.serializeFunctions : false;\n\n  // Set up the serialize and ignoreUndefined fields\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean'\n    ? options.ignoreUndefined : false;\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if(topology.type == 'mongos'\n    && readPreference\n    && readPreference.preference != 'primary') {\n    finalCmd = {\n      '$query': finalCmd,\n      '$readPreference': readPreference.toJSON()\n    };\n  }\n\n  // Build Query object\n  var query = new Query(bson, f('%s.$cmd', parts.shift()), finalCmd, {\n      numberToSkip: 0, numberToReturn: -1\n    , checkKeys: false, serializeFunctions: serializeFunctions\n    , ignoreUndefined: ignoreUndefined\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Return the query\n  return query;\n}\n\nvar hasWriteConcern = function(writeConcern) {\n  if(writeConcern.w\n    || writeConcern.wtimeout\n    || writeConcern.j == true\n    || writeConcern.fsync == true\n    || Object.keys(writeConcern).length == 0) {\n    return true;\n  }\n  return false;\n}\n\nvar cloneWriteConcern = function(writeConcern) {\n  var wc = {};\n  if(writeConcern.w != null) wc.w = writeConcern.w;\n  if(writeConcern.wtimeout != null) wc.wtimeout = writeConcern.wtimeout;\n  if(writeConcern.j != null) wc.j = writeConcern.j;\n  if(writeConcern.fsync != null) wc.fsync = writeConcern.fsync;\n  return wc;\n}\n\n//\n// Aggregate up all the results\n//\nvar aggregateWriteOperationResults = function(opType, ops, results, connection) {\n  var finalResult = { ok: 1, n: 0 }\n  if(opType == 'update') {\n    finalResult.nModified = 0;\n  }\n\n  // Map all the results coming back\n  for(var i = 0; i < results.length; i++) {\n    var result = results[i];\n    var op = ops[i];\n\n    if((result.upserted || (result.updatedExisting == false)) && finalResult.upserted == null) {\n      finalResult.upserted = [];\n    }\n\n    // Push the upserted document to the list of upserted values\n    if(result.upserted) {\n      finalResult.upserted.push({index: i, _id: result.upserted});\n    }\n\n    // We have an upsert where we passed in a _id\n    if(result.updatedExisting == false && result.n == 1 && result.upserted == null) {\n      finalResult.upserted.push({index: i, _id: op.q._id});\n    } else if(result.updatedExisting == true) {\n      finalResult.nModified += result.n;\n    }\n\n    // We have an insert command\n    if(result.ok == 1 && opType == 'insert' && result.err == null) {\n      finalResult.n = finalResult.n + 1;\n    }\n\n    // We have a command error\n    if(result != null && result.ok == 0 || result.err || result.errmsg) {\n      if(result.ok == 0) finalResult.ok = 0;\n      finalResult.code = result.code;\n      finalResult.errmsg = result.errmsg || result.err || result.errMsg;\n\n      // Check if we have a write error\n      if(result.code == 11000\n        || result.code == 11001\n        || result.code == 12582\n        || result.code == 16544\n        || result.code == 16538\n        || result.code == 16542\n        || result.code == 14\n        || result.code == 13511) {\n        if(finalResult.writeErrors == null) finalResult.writeErrors = [];\n        finalResult.writeErrors.push({\n            index: i\n          , code: result.code\n          , errmsg: result.errmsg || result.err || result.errMsg\n        });\n      } else {\n        finalResult.writeConcernError = {\n            code: result.code\n          , errmsg: result.errmsg || result.err || result.errMsg\n        }\n      }\n    } else if(typeof result.n == 'number') {\n      finalResult.n += result.n;\n    } else {\n      finalResult.n += 1;\n    }\n\n    // Result as expected\n    if(result != null && result.lastOp) finalResult.lastOp = result.lastOp;\n  }\n\n  // Return finalResult aggregated results\n  return new CommandResult(finalResult, connection);\n}\n\n//\n// Execute all inserts in an ordered manner\n//\nvar executeOrdered = function(opType ,command, ismaster, ns, bson, pool, ops, options, callback) {\n  var _ops = ops.slice(0);\n  // Collect all the getLastErrors\n  var getLastErrors = [];\n  // Execute an operation\n  var executeOp = function(list, _callback) {\n    // No more items in the list\n    if(list.length == 0) {\n      return process.nextTick(function() {\n        _callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, null));\n      });\n    }\n\n    // Get the first operation\n    var doc = list.shift();\n    // Create an insert command\n    var op = new command(Query.getRequestId(), ismaster, bson, ns, [doc], options);\n    // Write concern\n    var optionWriteConcern = options.writeConcern || {w:1};\n    // Final write concern\n    var writeConcern = cloneWriteConcern(optionWriteConcern);\n\n    // Get the db name\n    var db = ns.split('.').shift();\n\n    try {\n      // Add binary message to list of commands to execute\n      var commands = [op];\n\n      // Add getLastOrdered\n      var getLastErrorCmd = {getlasterror: 1};\n      // Merge all the fields\n      for(var i = 0; i < writeConcernFields.length; i++) {\n        if(writeConcern[writeConcernFields[i]] != null) {\n          getLastErrorCmd[writeConcernFields[i]] = writeConcern[writeConcernFields[i]];\n        }\n      }\n\n      // Create a getLastError command\n      var getLastErrorOp = new Query(bson, f(\"%s.$cmd\", db), getLastErrorCmd, {numberToReturn: -1});\n      // Add getLastError command to list of ops to execute\n      commands.push(getLastErrorOp);\n\n      // getLastError callback\n      var getLastErrorCallback = function(err, result) {\n        if(err) return callback(err);\n        // Get the document\n        var doc = result.result;\n        // Save the getLastError document\n        getLastErrors.push(doc);\n\n        // If we have an error terminate\n        if(doc.ok == 0 || doc.err || doc.errmsg) {\n          return callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, result.connection));\n        }\n\n        // Execute the next op in the list\n        executeOp(list, callback);\n      }\n\n      // Write both commands out at the same time\n      pool.write(commands, getLastErrorCallback);\n    } catch(err) {\n      // We have a serialization error, rewrite as a write error to have same behavior as modern\n      // write commands\n      getLastErrors.push({ ok: 1, errmsg: typeof err == 'string' ? err : err.message, code: 14 });\n      // Return due to an error\n      process.nextTick(function() {\n        _callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, null));\n      });\n    }\n  }\n\n  // Execute the operations\n  executeOp(_ops, callback);\n}\n\nvar executeUnordered = function(opType, command, ismaster, ns, bson, pool, ops, options, callback) {\n  // Total operations to write\n  var totalOps = ops.length;\n  // Collect all the getLastErrors\n  var getLastErrors = [];\n  // Write concern\n  var optionWriteConcern = options.writeConcern || {w:1};\n  // Final write concern\n  var writeConcern = cloneWriteConcern(optionWriteConcern);\n  // Driver level error\n  var error;\n\n  // Execute all the operations\n  for(var i = 0; i < ops.length; i++) {\n    // Create an insert command\n    var op = new command(Query.getRequestId(), ismaster, bson, ns, [ops[i]], options);\n    // Get db name\n    var db = ns.split('.').shift();\n\n    try {\n      // Add binary message to list of commands to execute\n      var commands = [op];\n\n      // If write concern 0 don't fire getLastError\n      if(hasWriteConcern(writeConcern)) {\n        var getLastErrorCmd = {getlasterror: 1};\n        // Merge all the fields\n        for(var j = 0; j < writeConcernFields.length; j++) {\n          if(writeConcern[writeConcernFields[j]] != null)\n            getLastErrorCmd[writeConcernFields[j]] = writeConcern[writeConcernFields[j]];\n        }\n\n        // Create a getLastError command\n        var getLastErrorOp = new Query(bson, f(\"%s.$cmd\", db), getLastErrorCmd, {numberToReturn: -1});\n        // Add getLastError command to list of ops to execute\n        commands.push(getLastErrorOp);\n\n        // Give the result from getLastError the right index\n        var callbackOp = function(_index) {\n          return function(err, result) {\n            if(err) error = err;\n            // Update the number of operations executed\n            totalOps = totalOps - 1;\n            // Save the getLastError document\n            if(!err) getLastErrors[_index] = result.result;\n            // Check if we are done\n            if(totalOps == 0) {\n              process.nextTick(function() {\n                if(error) return callback(error);\n                callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, result.connection));\n              });\n            }\n          }\n        }\n\n        // Write both commands out at the same time\n        pool.write(commands, callbackOp(i));\n      } else {\n        pool.write(commands, {immediateRelease:true, noResponse:true});\n      }\n    } catch(err) {\n      // Update the number of operations executed\n      totalOps = totalOps - 1;\n      // We have a serialization error, rewrite as a write error to have same behavior as modern\n      // write commands\n      getLastErrors[i] = { ok: 1, errmsg: typeof err == 'string' ? err : err.message, code: 14 };\n      // Check if we are done\n      if(totalOps == 0) {\n        callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, null));\n      }\n    }\n  }\n\n  // Empty w:0 return\n  if(writeConcern\n    && writeConcern.w == 0 && callback) {\n    callback(null, new CommandResult({ok:1}, null));\n  }\n}\n\nmodule.exports = WireProtocol;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/wireprotocol/commands.js":"\"use strict\";\n\nvar MongoError = require('../error');\n\n// Wire command operation ids\nvar OP_UPDATE = 2001;\nvar OP_INSERT = 2002;\nvar OP_DELETE = 2006;\n\nvar Insert = function(requestId, ismaster, bson, ns, documents, options) {\n  // Basic options needed to be passed in\n  if(ns == null) throw new MongoError(\"ns must be specified for query\");\n  if(!Array.isArray(documents) || documents.length == 0) throw new MongoError(\"documents array must contain at least one document to insert\");\n\n  // Validate that we are not passing 0x00 in the collection name\n  if(!!~ns.indexOf(\"\\x00\")) {\n    throw new MongoError(\"namespace cannot contain a null character\");\n  }\n\n  // Set internal\n  this.requestId = requestId;\n  this.bson = bson;\n  this.ns = ns;\n  this.documents = documents;\n  this.ismaster = ismaster;\n\n  // Ensure empty options\n  options = options || {};\n\n  // Unpack options\n  this.serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;\n  this.ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false;\n  this.checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys : true;\n  this.continueOnError = typeof options.continueOnError == 'boolean' ? options.continueOnError : false;\n  // Set flags\n  this.flags = this.continueOnError ? 1 : 0;\n}\n\n// To Binary\nInsert.prototype.toBin = function() {\n  // Contains all the buffers to be written\n  var buffers = [];\n\n  // Header buffer\n  var header = new Buffer(\n    4 * 4 // Header\n    + 4   // Flags\n    + Buffer.byteLength(this.ns) + 1 // namespace\n  );\n\n  // Add header to buffers\n  buffers.push(header);\n\n  // Total length of the message\n  var totalLength = header.length;\n\n  // Serialize all the documents\n  for(var i = 0; i < this.documents.length; i++) {\n    var buffer = this.bson.serialize(this.documents[i], {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined,\n    });\n\n    // Document is larger than maxBsonObjectSize, terminate serialization\n    if(buffer.length > this.ismaster.maxBsonObjectSize) {\n      throw new MongoError(\"Document exceeds maximum allowed bson size of \" + this.ismaster.maxBsonObjectSize + \" bytes\");\n    }\n\n    // Add to total length of wire protocol message\n    totalLength = totalLength + buffer.length;\n    // Add to buffer\n    buffers.push(buffer);\n  }\n\n  // Command is larger than maxMessageSizeBytes terminate serialization\n  if(totalLength > this.ismaster.maxMessageSizeBytes) {\n    throw new MongoError(\"Command exceeds maximum message size of \" + this.ismaster.maxMessageSizeBytes + \" bytes\");\n  }\n\n  // Add all the metadata\n  var index = 0;\n\n  // Write header length\n  header[index + 3] = (totalLength >> 24) & 0xff;\n  header[index + 2] = (totalLength >> 16) & 0xff;\n  header[index + 1] = (totalLength >> 8) & 0xff;\n  header[index] = (totalLength) & 0xff;\n  index = index + 4;\n\n  // Write header requestId\n  header[index + 3] = (this.requestId >> 24) & 0xff;\n  header[index + 2] = (this.requestId >> 16) & 0xff;\n  header[index + 1] = (this.requestId >> 8) & 0xff;\n  header[index] = (this.requestId) & 0xff;\n  index = index + 4;\n\n  // No flags\n  header[index + 3] = (0 >> 24) & 0xff;\n  header[index + 2] = (0 >> 16) & 0xff;\n  header[index + 1] = (0 >> 8) & 0xff;\n  header[index] = (0) & 0xff;\n  index = index + 4;\n\n  // Operation\n  header[index + 3] = (OP_INSERT >> 24) & 0xff;\n  header[index + 2] = (OP_INSERT >> 16) & 0xff;\n  header[index + 1] = (OP_INSERT >> 8) & 0xff;\n  header[index] = (OP_INSERT) & 0xff;\n  index = index + 4;\n\n  // Flags\n  header[index + 3] = (this.flags >> 24) & 0xff;\n  header[index + 2] = (this.flags >> 16) & 0xff;\n  header[index + 1] = (this.flags >> 8) & 0xff;\n  header[index] = (this.flags) & 0xff;\n  index = index + 4;\n\n  // Write collection name\n  index = index + header.write(this.ns, index, 'utf8') + 1;\n  header[index - 1] = 0;\n\n  // Return the buffers\n  return buffers;\n}\n\nvar Update = function(requestId, ismaster, bson, ns, update, options) {\n  // Basic options needed to be passed in\n  if(ns == null) throw new MongoError(\"ns must be specified for query\");\n\n  // Ensure empty options\n  options = options || {};\n\n  // Set internal\n  this.requestId = requestId;\n  this.bson = bson;\n  this.ns = ns;\n  this.ismaster = ismaster;\n\n  // Unpack options\n  this.serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;\n  this.ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false;\n  this.checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys : false;\n\n  // Unpack the update document\n  this.upsert = typeof update[0].upsert == 'boolean' ? update[0].upsert : false;\n  this.multi = typeof update[0].multi == 'boolean' ? update[0].multi : false;\n  this.q = update[0].q;\n  this.u = update[0].u;\n\n  // Create flag value\n  this.flags = this.upsert ? 1 : 0;\n  this.flags = this.multi ? this.flags | 2 : this.flags;\n}\n\n// To Binary\nUpdate.prototype.toBin = function() {\n  // Contains all the buffers to be written\n  var buffers = [];\n\n  // Header buffer\n  var header = new Buffer(\n    4 * 4 // Header\n    + 4   // ZERO\n    + Buffer.byteLength(this.ns) + 1 // namespace\n    + 4   // Flags\n  );\n\n  // Add header to buffers\n  buffers.push(header);\n\n  // Total length of the message\n  var totalLength = header.length;\n\n  // Serialize the selector\n  var selector = this.bson.serialize(this.q, {\n    checkKeys: this.checkKeys,\n    serializeFunctions: this.serializeFunctions,\n    ignoreUndefined: this.ignoreUndefined,\n  });\n  buffers.push(selector);\n  totalLength = totalLength + selector.length;\n\n  // Serialize the update\n  var update = this.bson.serialize(this.u, {\n    checkKeys: this.checkKeys,\n    serializeFunctions: this.serializeFunctions,\n    ignoreUndefined: this.ignoreUndefined,\n  });\n  buffers.push(update);\n  totalLength = totalLength + update.length;\n\n  // Index in header buffer\n  var index = 0;\n\n  // Write header length\n  header[index + 3] = (totalLength >> 24) & 0xff;\n  header[index + 2] = (totalLength >> 16) & 0xff;\n  header[index + 1] = (totalLength >> 8) & 0xff;\n  header[index] = (totalLength) & 0xff;\n  index = index + 4;\n\n  // Write header requestId\n  header[index + 3] = (this.requestId >> 24) & 0xff;\n  header[index + 2] = (this.requestId >> 16) & 0xff;\n  header[index + 1] = (this.requestId >> 8) & 0xff;\n  header[index] = (this.requestId) & 0xff;\n  index = index + 4;\n\n  // No flags\n  header[index + 3] = (0 >> 24) & 0xff;\n  header[index + 2] = (0 >> 16) & 0xff;\n  header[index + 1] = (0 >> 8) & 0xff;\n  header[index] = (0) & 0xff;\n  index = index + 4;\n\n  // Operation\n  header[index + 3] = (OP_UPDATE >> 24) & 0xff;\n  header[index + 2] = (OP_UPDATE >> 16) & 0xff;\n  header[index + 1] = (OP_UPDATE >> 8) & 0xff;\n  header[index] = (OP_UPDATE) & 0xff;\n  index = index + 4;\n\n  // Write ZERO\n  header[index + 3] = (0 >> 24) & 0xff;\n  header[index + 2] = (0 >> 16) & 0xff;\n  header[index + 1] = (0 >> 8) & 0xff;\n  header[index] = (0) & 0xff;\n  index = index + 4;\n\n  // Write collection name\n  index = index + header.write(this.ns, index, 'utf8') + 1;\n  header[index - 1] = 0;\n\n  // Flags\n  header[index + 3] = (this.flags >> 24) & 0xff;\n  header[index + 2] = (this.flags >> 16) & 0xff;\n  header[index + 1] = (this.flags >> 8) & 0xff;\n  header[index] = (this.flags) & 0xff;\n  index = index + 4;\n\n  // Return the buffers\n  return buffers;\n}\n\nvar Remove = function(requestId, ismaster, bson, ns, remove, options) {\n  // Basic options needed to be passed in\n  if(ns == null) throw new MongoError(\"ns must be specified for query\");\n\n  // Ensure empty options\n  options = options || {};\n\n  // Set internal\n  this.requestId = requestId;\n  this.bson = bson;\n  this.ns = ns;\n  this.ismaster = ismaster;\n\n  // Unpack options\n  this.serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;\n  this.ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false;\n  this.checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys : false;\n\n  // Unpack the update document\n  this.limit = typeof remove[0].limit == 'number' ? remove[0].limit : 1;\n  this.q = remove[0].q;\n\n  // Create flag value\n  this.flags = this.limit == 1 ? 1 : 0;\n}\n\n// To Binary\nRemove.prototype.toBin = function() {\n  // Contains all the buffers to be written\n  var buffers = [];\n\n  // Header buffer\n  var header = new Buffer(\n    4 * 4 // Header\n    + 4   // ZERO\n    + Buffer.byteLength(this.ns) + 1 // namespace\n    + 4   // Flags\n  );\n\n  // Add header to buffers\n  buffers.push(header);\n\n  // Total length of the message\n  var totalLength = header.length;\n\n  // Serialize the selector\n  var selector = this.bson.serialize(this.q, {\n    checkKeys: this.checkKeys,\n    serializeFunctions: this.serializeFunctions,\n    ignoreUndefined: this.ignoreUndefined,\n  });\n  buffers.push(selector);\n  totalLength = totalLength + selector.length;\n\n  // Index in header buffer\n  var index = 0;\n\n  // Write header length\n  header[index + 3] = (totalLength >> 24) & 0xff;\n  header[index + 2] = (totalLength >> 16) & 0xff;\n  header[index + 1] = (totalLength >> 8) & 0xff;\n  header[index] = (totalLength) & 0xff;\n  index = index + 4;\n\n  // Write header requestId\n  header[index + 3] = (this.requestId >> 24) & 0xff;\n  header[index + 2] = (this.requestId >> 16) & 0xff;\n  header[index + 1] = (this.requestId >> 8) & 0xff;\n  header[index] = (this.requestId) & 0xff;\n  index = index + 4;\n\n  // No flags\n  header[index + 3] = (0 >> 24) & 0xff;\n  header[index + 2] = (0 >> 16) & 0xff;\n  header[index + 1] = (0 >> 8) & 0xff;\n  header[index] = (0) & 0xff;\n  index = index + 4;\n\n  // Operation\n  header[index + 3] = (OP_DELETE >> 24) & 0xff;\n  header[index + 2] = (OP_DELETE >> 16) & 0xff;\n  header[index + 1] = (OP_DELETE >> 8) & 0xff;\n  header[index] = (OP_DELETE) & 0xff;\n  index = index + 4;\n\n  // Write ZERO\n  header[index + 3] = (0 >> 24) & 0xff;\n  header[index + 2] = (0 >> 16) & 0xff;\n  header[index + 1] = (0 >> 8) & 0xff;\n  header[index] = (0) & 0xff;\n  index = index + 4;\n\n  // Write collection name\n  index = index + header.write(this.ns, index, 'utf8') + 1;\n  header[index - 1] = 0;\n\n  // Write ZERO\n  header[index + 3] = (this.flags >> 24) & 0xff;\n  header[index + 2] = (this.flags >> 16) & 0xff;\n  header[index + 1] = (this.flags >> 8) & 0xff;\n  header[index] = (this.flags) & 0xff;\n  index = index + 4;\n\n  // Return the buffers\n  return buffers;\n}\n\nmodule.exports = {\n    Insert: Insert\n  , Update: Update\n  , Remove: Remove\n}\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/wireprotocol/shared.js":"\"use strict\"\n\nvar ReadPreference = require('../topologies/read_preference'),\n  MongoError = require('../error');\n\nvar getReadPreference = function(cmd, options) {\n  // Default to command version of the readPreference\n  var readPreference = cmd.readPreference || new ReadPreference('primary');\n  // If we have an option readPreference override the command one\n  if(options.readPreference) {\n    readPreference = options.readPreference;\n  }\n\n  if(typeof readPreference == 'string') {\n    readPreference = new ReadPreference(readPreference);\n  }\n\n  if(!(readPreference instanceof ReadPreference)) {\n    throw new MongoError('readPreference must be a ReadPreference instance');\n  }\n\n  return readPreference;\n}\n\nmodule.exports = {\n  getReadPreference: getReadPreference\n}\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/wireprotocol/2_6_support.js":"\"use strict\";\n\nvar copy = require('../connection/utils').copy\n  , retrieveBSON = require('../connection/utils').retrieveBSON\n  , KillCursor = require('../connection/commands').KillCursor\n  , GetMore = require('../connection/commands').GetMore\n  , Query = require('../connection/commands').Query\n  , f = require('util').format\n  , MongoError = require('../error')\n  , getReadPreference = require('./shared').getReadPreference;\n\nvar BSON = retrieveBSON(),\n  Long = BSON.Long;\n\nvar WireProtocol = function() {}\n\n//\n// Execute a write operation\nvar executeWrite = function(pool, bson, type, opsField, ns, ops, options, callback) {\n  if(ops.length == 0) throw new MongoError(\"insert must contain at least one document\");\n  if(typeof options == 'function') {\n    callback = options;\n    options = {};\n    options = options || {};\n  }\n\n  // Split the ns up to get db and collection\n  var p = ns.split(\".\");\n  var d = p.shift();\n  // Options\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  var writeConcern = options.writeConcern;\n\n  // return skeleton\n  var writeCommand = {};\n  writeCommand[type] = p.join('.');\n  writeCommand[opsField] = ops;\n  writeCommand.ordered = ordered;\n\n  // Did we specify a write concern\n  if(writeConcern && Object.keys(writeConcern).length > 0) {\n    writeCommand.writeConcern = writeConcern;\n  }\n\n  // Do we have bypassDocumentValidation set, then enable it on the write command\n  if(typeof options.bypassDocumentValidation == 'boolean') {\n    writeCommand.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n\n  // Options object\n  var opts = { command: true };\n  var queryOptions = { checkKeys : false, numberToSkip: 0, numberToReturn: 1 };\n  if(type == 'insert') queryOptions.checkKeys = true;\n  if(typeof options.checkKeys == 'boolean') queryOptions.checkKeys = options.checkKeys;\n  // Ensure we support serialization of functions\n  if(options.serializeFunctions) queryOptions.serializeFunctions = options.serializeFunctions;\n  // Do not serialize the undefined fields\n  if(options.ignoreUndefined) queryOptions.ignoreUndefined = options.ignoreUndefined;\n\n  try {\n    // Create write command\n    var cmd = new Query(bson, f(\"%s.$cmd\", d), writeCommand, queryOptions);\n    // Execute command\n    pool.write(cmd, opts, callback);\n  } catch(err) {\n    callback(err);\n  }\n}\n\n//\n// Needs to support legacy mass insert as well as ordered/unordered legacy\n// emulation\n//\nWireProtocol.prototype.insert = function(pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'insert', 'documents', ns, ops, options, callback);\n}\n\nWireProtocol.prototype.update = function(pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'update', 'updates', ns, ops, options, callback);\n}\n\nWireProtocol.prototype.remove = function(pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'delete', 'deletes', ns, ops, options, callback);\n}\n\nWireProtocol.prototype.killCursor = function(bson, ns, cursorId, pool, callback) {\n  // Create a kill cursor command\n  var killCursor = new KillCursor(bson, [cursorId]);\n  // Execute the kill cursor command\n  if(pool && pool.isConnected()) {\n    pool.write(killCursor, {\n      immediateRelease:true, noResponse: true\n    });\n  }\n\n  // Callback\n  if(typeof callback == 'function') callback(null, null);\n}\n\nWireProtocol.prototype.getMore = function(bson, ns, cursorState, batchSize, raw, connection, options, callback) {\n  // Create getMore command\n  var getMore = new GetMore(bson, ns, cursorState.cursorId, {numberToReturn: batchSize});\n\n  // Query callback\n  var queryCallback = function(err, result) {\n    if(err) return callback(err);\n    // Get the raw message\n    var r = result.message;\n\n    // If we have a timed out query or a cursor that was killed\n    if((r.responseFlags & (1 << 0)) != 0) {\n      return callback(new MongoError(\"cursor does not exist, was killed or timed out\"), null);\n    }\n\n    // Ensure we have a Long valie cursor id\n    var cursorId = typeof r.cursorId == 'number'\n      ? Long.fromNumber(r.cursorId)\n      : r.cursorId;\n\n    // Set all the values\n    cursorState.documents = r.documents;\n    cursorState.cursorId = cursorId;\n\n    // Return\n    callback(null, null, r.connection);\n  }\n\n  // Contains any query options\n  var queryOptions = {};\n\n  // If we have a raw query decorate the function\n  if(raw) {\n    queryOptions.raw = raw;\n  }\n\n  // Check if we need to promote longs\n  if(typeof cursorState.promoteLongs == 'boolean') {\n    queryOptions.promoteLongs = cursorState.promoteLongs;\n  }\n\n  if(typeof cursorState.promoteValues == 'boolean') {\n    queryOptions.promoteValues = cursorState.promoteValues;\n  }\n\n  if(typeof cursorState.promoteBuffers == 'boolean') {\n    queryOptions.promoteBuffers = cursorState.promoteBuffers;\n  }\n\n  // Write out the getMore command\n  connection.write(getMore, queryOptions, queryCallback);\n}\n\nWireProtocol.prototype.command = function(bson, ns, cmd, cursorState, topology, options) {\n  // Establish type of command\n  if(cmd.find) {\n    return setupClassicFind(bson, ns, cmd, cursorState, topology, options)\n  } else if(cursorState.cursorId != null) {\n    return;\n  } else if(cmd) {\n    return setupCommand(bson, ns, cmd, cursorState, topology, options);\n  } else {\n    throw new MongoError(f(\"command %s does not return a cursor\", JSON.stringify(cmd)));\n  }\n}\n\n//\n// Execute a find command\nvar setupClassicFind = function(bson, ns, cmd, cursorState, topology, options) {\n  // Ensure we have at least some options\n  options = options || {};\n  // Get the readPreference\n  var readPreference = getReadPreference(cmd, options);\n  // Set the optional batchSize\n  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;\n  var numberToReturn = 0;\n\n  // Unpack the limit and batchSize values\n  if(cursorState.limit == 0) {\n    numberToReturn = cursorState.batchSize;\n  } else if(cursorState.limit < 0 || cursorState.limit < cursorState.batchSize || (cursorState.limit > 0 && cursorState.batchSize == 0)) {\n    numberToReturn = cursorState.limit;\n  } else {\n    numberToReturn = cursorState.batchSize;\n  }\n\n  var numberToSkip = cursorState.skip || 0;\n  // Build actual find command\n  var findCmd = {};\n  // Using special modifier\n  var usesSpecialModifier = false;\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if(topology.type == 'mongos' && readPreference) {\n    findCmd['$readPreference'] = readPreference.toJSON();\n    usesSpecialModifier = true;\n  }\n\n  // Add special modifiers to the query\n  if(cmd.sort) findCmd['orderby'] = cmd.sort, usesSpecialModifier = true;\n  if(cmd.hint) findCmd['$hint'] = cmd.hint, usesSpecialModifier = true;\n  if(cmd.snapshot) findCmd['$snapshot'] = cmd.snapshot, usesSpecialModifier = true;\n  if(cmd.returnKey) findCmd['$returnKey'] = cmd.returnKey, usesSpecialModifier = true;\n  if(cmd.maxScan) findCmd['$maxScan'] = cmd.maxScan, usesSpecialModifier = true;\n  if(cmd.min) findCmd['$min'] = cmd.min, usesSpecialModifier = true;\n  if(cmd.max) findCmd['$max'] = cmd.max, usesSpecialModifier = true;\n  if(cmd.showDiskLoc) findCmd['$showDiskLoc'] = cmd.showDiskLoc, usesSpecialModifier = true;\n  if(cmd.comment) findCmd['$comment'] = cmd.comment, usesSpecialModifier = true;\n  if(cmd.maxTimeMS) findCmd['$maxTimeMS'] = cmd.maxTimeMS, usesSpecialModifier = true;\n\n  if(cmd.explain) {\n\t// nToReturn must be 0 (match all) or negative (match N and close cursor)\n\t// nToReturn > 0 will give explain results equivalent to limit(0)\n    numberToReturn = -Math.abs(cmd.limit || 0);\n    usesSpecialModifier = true;\n    findCmd['$explain'] = true;\n  }\n\n  // If we have a special modifier\n  if(usesSpecialModifier) {\n    findCmd['$query'] = cmd.query;\n  } else {\n    findCmd = cmd.query;\n  }\n\n  // Throw on majority readConcern passed in\n  if(cmd.readConcern && cmd.readConcern.level != 'local') {\n    throw new MongoError(f('server find command does not support a readConcern level of %s', cmd.readConcern.level));\n  }\n\n  // Remove readConcern, ensure no failing commands\n  if(cmd.readConcern) {\n    cmd = copy(cmd);\n    delete cmd['readConcern'];\n  }\n\n  // Serialize functions\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean'\n    ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean'\n    ? options.ignoreUndefined : false;\n\n  // Build Query object\n  var query = new Query(bson, ns, findCmd, {\n      numberToSkip: numberToSkip, numberToReturn: numberToReturn\n    , checkKeys: false, returnFieldSelector: cmd.fields\n    , serializeFunctions: serializeFunctions\n    , ignoreUndefined: ignoreUndefined\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Set up the option bits for wire protocol\n  if(typeof cmd.tailable == 'boolean') {\n    query.tailable = cmd.tailable;\n  }\n\n  if(typeof cmd.oplogReplay == 'boolean') {\n    query.oplogReplay = cmd.oplogReplay;\n  }\n\n  if(typeof cmd.noCursorTimeout == 'boolean') {\n    query.noCursorTimeout = cmd.noCursorTimeout;\n  }\n\n  if(typeof cmd.awaitData == 'boolean') {\n    query.awaitData = cmd.awaitData;\n  }\n\n  if(typeof cmd.partial == 'boolean') {\n    query.partial = cmd.partial;\n  }\n\n  // Return the query\n  return query;\n}\n\n//\n// Set up a command cursor\nvar setupCommand = function(bson, ns, cmd, cursorState, topology, options) {\n  // Set empty options object\n  options = options || {}\n  // Get the readPreference\n  var readPreference = getReadPreference(cmd, options);\n\n  // Final query\n  var finalCmd = {};\n  for(var name in cmd) {\n    finalCmd[name] = cmd[name];\n  }\n\n  // Build command namespace\n  var parts = ns.split(/\\./);\n\n  // Serialize functions\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean'\n    ? options.serializeFunctions : false;\n\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean'\n    ? options.ignoreUndefined : false;\n\n  // Throw on majority readConcern passed in\n  if(cmd.readConcern && cmd.readConcern.level != 'local') {\n    throw new MongoError(f('server %s command does not support a readConcern level of %s', JSON.stringify(cmd), cmd.readConcern.level));\n  }\n\n  // Remove readConcern, ensure no failing commands\n  if(cmd.readConcern) delete cmd['readConcern'];\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if(topology.type == 'mongos'\n    && readPreference\n    && readPreference.preference != 'primary') {\n    finalCmd = {\n      '$query': finalCmd,\n      '$readPreference': readPreference.toJSON()\n    };\n  }\n\n  // Build Query object\n  var query = new Query(bson, f('%s.$cmd', parts.shift()), finalCmd, {\n      numberToSkip: 0, numberToReturn: -1\n    , checkKeys: false, serializeFunctions: serializeFunctions\n    , ignoreUndefined: ignoreUndefined\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Return the query\n  return query;\n}\n\nmodule.exports = WireProtocol;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/wireprotocol/3_2_support.js":"\"use strict\";\n\nvar Query = require('../connection/commands').Query\n  , retrieveBSON = require('../connection/utils').retrieveBSON\n  , f = require('util').format\n  , MongoError = require('../error')\n  , getReadPreference = require('./shared').getReadPreference;\n\nvar BSON = retrieveBSON(),\n  Long = BSON.Long;\n\nvar WireProtocol = function(legacyWireProtocol) {\n  this.legacyWireProtocol = legacyWireProtocol;\n}\n\n//\n// Execute a write operation\nvar executeWrite = function(pool, bson, type, opsField, ns, ops, options, callback) {\n  if(ops.length == 0) throw new MongoError(\"insert must contain at least one document\");\n  if(typeof options == 'function') {\n    callback = options;\n    options = {};\n    options = options || {};\n  }\n\n  // Split the ns up to get db and collection\n  var p = ns.split(\".\");\n  var d = p.shift();\n  // Options\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  var writeConcern = options.writeConcern;\n\n  // return skeleton\n  var writeCommand = {};\n  writeCommand[type] = p.join('.');\n  writeCommand[opsField] = ops;\n  writeCommand.ordered = ordered;\n\n  // Did we specify a write concern\n  if(writeConcern && Object.keys(writeConcern).length > 0) {\n    writeCommand.writeConcern = writeConcern;\n  }\n\n  // If we have collation passed in\n  if(options.collation) {\n    for(var i = 0; i < writeCommand[opsField].length; i++) {\n      if(!writeCommand[opsField][i].collation) {\n        writeCommand[opsField][i].collation = options.collation;\n      }\n    }\n  }\n\n  // Do we have bypassDocumentValidation set, then enable it on the write command\n  if(typeof options.bypassDocumentValidation == 'boolean') {\n    writeCommand.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n\n  // Options object\n  var opts = { command: true };\n  var queryOptions = { checkKeys : false, numberToSkip: 0, numberToReturn: 1 };\n  if(type == 'insert') queryOptions.checkKeys = true;\n  if(typeof options.checkKeys == 'boolean') queryOptions.checkKeys = options.checkKeys;\n\n  // Ensure we support serialization of functions\n  if(options.serializeFunctions) queryOptions.serializeFunctions = options.serializeFunctions;\n  // Do not serialize the undefined fields\n  if(options.ignoreUndefined) queryOptions.ignoreUndefined = options.ignoreUndefined;\n\n  try {\n    // Create write command\n    var cmd = new Query(bson, f(\"%s.$cmd\", d), writeCommand, queryOptions);\n    // Execute command\n    pool.write(cmd, opts, callback);\n  } catch(err) {\n    callback(err);\n  }\n}\n\n//\n// Needs to support legacy mass insert as well as ordered/unordered legacy\n// emulation\n//\nWireProtocol.prototype.insert = function(pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'insert', 'documents', ns, ops, options, callback);\n}\n\nWireProtocol.prototype.update = function(pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'update', 'updates', ns, ops, options, callback);\n}\n\nWireProtocol.prototype.remove = function(pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'delete', 'deletes', ns, ops, options, callback);\n}\n\nWireProtocol.prototype.killCursor = function(bson, ns, cursorId, pool, callback) {\n  // Build command namespace\n  var parts = ns.split(/\\./);\n  // Command namespace\n  var commandns = f('%s.$cmd', parts.shift());\n  // Create getMore command\n  var killcursorCmd = {\n    killCursors: parts.join('.'),\n    cursors: [cursorId]\n  }\n\n  // Build Query object\n  var query = new Query(bson, commandns, killcursorCmd, {\n      numberToSkip: 0, numberToReturn: -1\n    , checkKeys: false, returnFieldSelector: null\n  });\n\n  // Set query flags\n  query.slaveOk = true;\n\n  // Kill cursor callback\n  var killCursorCallback = function(err, result) {\n    if(err) {\n      if(typeof callback != 'function') return;\n      return callback(err);\n    }\n\n    // Result\n    var r = result.message;\n    // If we have a timed out query or a cursor that was killed\n    if((r.responseFlags & (1 << 0)) != 0) {\n      if(typeof callback != 'function') return;\n      return callback(new MongoError(\"cursor killed or timed out\"), null);\n    }\n\n    if(!Array.isArray(r.documents) || r.documents.length == 0) {\n      if(typeof callback != 'function') return;\n      return callback(new MongoError(f('invalid killCursors result returned for cursor id %s', cursorId)));\n    }\n\n    // Return the result\n    if(typeof callback == 'function') {\n      callback(null, r.documents[0]);\n    }\n  }\n\n  // Execute the kill cursor command\n  if(pool && pool.isConnected()) {\n    pool.write(query, {\n      command: true\n    }, killCursorCallback);\n  }\n}\n\nWireProtocol.prototype.getMore = function(bson, ns, cursorState, batchSize, raw, connection, options, callback) {\n  options = options || {};\n  // Build command namespace\n  var parts = ns.split(/\\./);\n  // Command namespace\n  var commandns = f('%s.$cmd', parts.shift());\n\n  // Create getMore command\n  var getMoreCmd = {\n    getMore: cursorState.cursorId,\n    collection: parts.join('.'),\n    batchSize: Math.abs(batchSize)\n  }\n\n  if(cursorState.cmd.tailable\n    && typeof cursorState.cmd.maxAwaitTimeMS == 'number') {\n    getMoreCmd.maxTimeMS = cursorState.cmd.maxAwaitTimeMS;\n  }\n\n  // Build Query object\n  var query = new Query(bson, commandns, getMoreCmd, {\n      numberToSkip: 0, numberToReturn: -1\n    , checkKeys: false, returnFieldSelector: null\n  });\n\n  // Set query flags\n  query.slaveOk = true;\n\n  // Query callback\n  var queryCallback = function(err, result) {\n    if(err) return callback(err);\n    // Get the raw message\n    var r = result.message;\n\n    // If we have a timed out query or a cursor that was killed\n    if((r.responseFlags & (1 << 0)) != 0) {\n      return callback(new MongoError(\"cursor killed or timed out\"), null);\n    }\n\n    // Raw, return all the extracted documents\n    if(raw) {\n      cursorState.documents = r.documents;\n      cursorState.cursorId = r.cursorId;\n      return callback(null, r.documents);\n    }\n\n    // We have an error detected\n    if(r.documents[0].ok == 0) {\n      return callback(MongoError.create(r.documents[0]));\n    }\n\n    // Ensure we have a Long valid cursor id\n    var cursorId = typeof r.documents[0].cursor.id == 'number'\n      ? Long.fromNumber(r.documents[0].cursor.id)\n      : r.documents[0].cursor.id;\n\n    // Set all the values\n    cursorState.documents = r.documents[0].cursor.nextBatch;\n    cursorState.cursorId = cursorId;\n\n    // Return the result\n    callback(null, r.documents[0], r.connection);\n  }\n\n  // Query options\n  var queryOptions = { command: true };\n\n  // If we have a raw query decorate the function\n  if(raw) {\n    queryOptions.raw = raw;\n  }\n\n  // Add the result field needed\n  queryOptions.documentsReturnedIn = 'nextBatch';\n\n  // Check if we need to promote longs\n  if(typeof cursorState.promoteLongs == 'boolean') {\n    queryOptions.promoteLongs = cursorState.promoteLongs;\n  }\n\n  if(typeof cursorState.promoteValues == 'boolean') {\n    queryOptions.promoteValues = cursorState.promoteValues;\n  }\n\n  if(typeof cursorState.promoteBuffers == 'boolean') {\n    queryOptions.promoteBuffers = cursorState.promoteBuffers;\n  }\n\n  // Write out the getMore command\n  connection.write(query, queryOptions, queryCallback);\n}\n\nWireProtocol.prototype.command = function(bson, ns, cmd, cursorState, topology, options) {\n  options = options || {}\n  // Check if this is a wire protocol command or not\n  var wireProtocolCommand = typeof options.wireProtocolCommand == 'boolean' ? options.wireProtocolCommand : true;\n\n  // Establish type of command\n  if(cmd.find && wireProtocolCommand) {\n    // Create the find command\n    var query = executeFindCommand(bson, ns, cmd, cursorState, topology, options)\n    // Mark the cmd as virtual\n    cmd.virtual = false;\n    // Signal the documents are in the firstBatch value\n    query.documentsReturnedIn = 'firstBatch';\n    // Return the query\n    return query;\n  } else if(cursorState.cursorId != null) {\n    return;\n  } else if(cmd) {\n    return setupCommand(bson, ns, cmd, cursorState, topology, options);\n  } else {\n    throw new MongoError(f(\"command %s does not return a cursor\", JSON.stringify(cmd)));\n  }\n}\n\n// // Command\n// {\n//     find: ns\n//   , query: <object>\n//   , limit: <n>\n//   , fields: <object>\n//   , skip: <n>\n//   , hint: <string>\n//   , explain: <boolean>\n//   , snapshot: <boolean>\n//   , batchSize: <n>\n//   , returnKey: <boolean>\n//   , maxScan: <n>\n//   , min: <n>\n//   , max: <n>\n//   , showDiskLoc: <boolean>\n//   , comment: <string>\n//   , maxTimeMS: <n>\n//   , raw: <boolean>\n//   , readPreference: <ReadPreference>\n//   , tailable: <boolean>\n//   , oplogReplay: <boolean>\n//   , noCursorTimeout: <boolean>\n//   , awaitdata: <boolean>\n//   , exhaust: <boolean>\n//   , partial: <boolean>\n// }\n\n// FIND/GETMORE SPEC\n// {\n//     “find”: <string>,\n//     “filter”: { ... },\n//     “sort”: { ... },\n//     “projection”: { ... },\n//     “hint”: { ... },\n//     “skip”: <int>,\n//     “limit”: <int>,\n//     “batchSize”: <int>,\n//     “singleBatch”: <bool>,\n//     “comment”: <string>,\n//     “maxScan”: <int>,\n//     “maxTimeMS”: <int>,\n//     “max”: { ... },\n//     “min”: { ... },\n//     “returnKey”: <bool>,\n//     “showRecordId”: <bool>,\n//     “snapshot”: <bool>,\n//     “tailable”: <bool>,\n//     “oplogReplay”: <bool>,\n//     “noCursorTimeout”: <bool>,\n//     “awaitData”: <bool>,\n//     “partial”: <bool>,\n//     “$readPreference”: { ... }\n// }\n\n//\n// Execute a find command\nvar executeFindCommand = function(bson, ns, cmd, cursorState, topology, options) {\n  // Ensure we have at least some options\n  options = options || {};\n  // Get the readPreference\n  var readPreference = getReadPreference(cmd, options);\n  // Set the optional batchSize\n  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;\n\n  // Build command namespace\n  var parts = ns.split(/\\./);\n  // Command namespace\n  var commandns = f('%s.$cmd', parts.shift());\n\n  // Build actual find command\n  var findCmd = {\n    find: parts.join('.')\n  };\n\n  // I we provided a filter\n  if(cmd.query) {\n    // Check if the user is passing in the $query parameter\n    if(cmd.query['$query']) {\n      findCmd.filter = cmd.query['$query'];\n    } else {\n      findCmd.filter = cmd.query;\n    }\n  }\n\n  // Sort value\n  var sortValue = cmd.sort;\n\n  // Handle issue of sort being an Array\n  if(Array.isArray(sortValue)) {\n    var sortObject = {};\n\n    if(sortValue.length > 0 && !Array.isArray(sortValue[0])) {\n      var sortDirection = sortValue[1];\n      // Translate the sort order text\n      if(sortDirection == 'asc') {\n        sortDirection = 1;\n      } else if(sortDirection == 'desc') {\n        sortDirection = -1;\n      }\n\n      // Set the sort order\n      sortObject[sortValue[0]] = sortDirection;\n    } else {\n      for(var i = 0; i < sortValue.length; i++) {\n        sortDirection = sortValue[i][1];\n        // Translate the sort order text\n        if(sortDirection == 'asc') {\n          sortDirection = 1;\n        } else if(sortDirection == 'desc') {\n          sortDirection = -1;\n        }\n\n        // Set the sort order\n        sortObject[sortValue[i][0]] = sortDirection;\n      }\n    }\n\n    sortValue = sortObject;\n  }\n\n  // Add sort to command\n  if(cmd.sort) findCmd.sort = sortValue;\n  // Add a projection to the command\n  if(cmd.fields) findCmd.projection = cmd.fields;\n  // Add a hint to the command\n  if(cmd.hint) findCmd.hint = cmd.hint;\n  // Add a skip\n  if(cmd.skip) findCmd.skip = cmd.skip;\n  // Add a limit\n  if(cmd.limit) findCmd.limit = cmd.limit;\n\n  // Check if we wish to have a singleBatch\n  if(cmd.limit < 0) {\n    findCmd.limit = Math.abs(cmd.limit);\n    findCmd.singleBatch = true;\n  }\n\n  // Add a batchSize\n  if(typeof cmd.batchSize == 'number') {\n    if (cmd.batchSize < 0) {\n      if (cmd.limit != 0 && Math.abs(cmd.batchSize) < Math.abs(cmd.limit)) {\n        findCmd.limit = Math.abs(cmd.batchSize);\n      }\n\n      findCmd.singleBatch = true;\n    }\n\n    findCmd.batchSize = Math.abs(cmd.batchSize);\n  }\n\n  // If we have comment set\n  if(cmd.comment) findCmd.comment = cmd.comment;\n\n  // If we have maxScan\n  if(cmd.maxScan) findCmd.maxScan = cmd.maxScan;\n\n  // If we have maxTimeMS set\n  if(cmd.maxTimeMS) findCmd.maxTimeMS = cmd.maxTimeMS;\n\n  // If we have min\n  if(cmd.min) findCmd.min = cmd.min;\n\n  // If we have max\n  if(cmd.max) findCmd.max = cmd.max;\n\n  // If we have returnKey set\n  if(cmd.returnKey) findCmd.returnKey = cmd.returnKey;\n\n  // If we have showDiskLoc set\n  if(cmd.showDiskLoc) findCmd.showRecordId = cmd.showDiskLoc;\n\n  // If we have snapshot set\n  if(cmd.snapshot) findCmd.snapshot = cmd.snapshot;\n\n  // If we have tailable set\n  if(cmd.tailable) findCmd.tailable = cmd.tailable;\n\n  // If we have oplogReplay set\n  if(cmd.oplogReplay) findCmd.oplogReplay = cmd.oplogReplay;\n\n  // If we have noCursorTimeout set\n  if(cmd.noCursorTimeout) findCmd.noCursorTimeout = cmd.noCursorTimeout;\n\n  // If we have awaitData set\n  if(cmd.awaitData) findCmd.awaitData = cmd.awaitData;\n  if(cmd.awaitdata) findCmd.awaitData = cmd.awaitdata;\n\n  // If we have partial set\n  if(cmd.partial) findCmd.partial = cmd.partial;\n\n  // If we have collation passed in\n  if(cmd.collation) findCmd.collation = cmd.collation;\n\n  // If we have explain, we need to rewrite the find command\n  // to wrap it in the explain command\n  if(cmd.explain) {\n    findCmd = {\n      explain: findCmd\n    }\n  }\n\n  // Did we provide a readConcern\n  if(cmd.readConcern) findCmd.readConcern = cmd.readConcern;\n\n  // Set up the serialize and ignoreUndefined fields\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean'\n    ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean'\n    ? options.ignoreUndefined : false;\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if(topology.type == 'mongos'\n    && readPreference\n    && readPreference.preference != 'primary') {\n    findCmd = {\n      '$query': findCmd,\n      '$readPreference': readPreference.toJSON()\n    };\n  }\n\n  // Build Query object\n  var query = new Query(bson, commandns, findCmd, {\n      numberToSkip: 0, numberToReturn: 1\n    , checkKeys: false, returnFieldSelector: null\n    , serializeFunctions: serializeFunctions, ignoreUndefined: ignoreUndefined\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Return the query\n  return query;\n}\n\n//\n// Set up a command cursor\nvar setupCommand = function(bson, ns, cmd, cursorState, topology, options) {\n  // Set empty options object\n  options = options || {}\n  // Get the readPreference\n  var readPreference = getReadPreference(cmd, options);\n\n  // Final query\n  var finalCmd = {};\n  for(var name in cmd) {\n    finalCmd[name] = cmd[name];\n  }\n\n  // Build command namespace\n  var parts = ns.split(/\\./);\n\n  // Serialize functions\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean'\n    ? options.serializeFunctions : false;\n\n  // Set up the serialize and ignoreUndefined fields\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean'\n    ? options.ignoreUndefined : false;\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if(topology.type == 'mongos'\n    && readPreference\n    && readPreference.preference != 'primary') {\n    finalCmd = {\n      '$query': finalCmd,\n      '$readPreference': readPreference.toJSON()\n    };\n  }\n\n  // Build Query object\n  var query = new Query(bson, f('%s.$cmd', parts.shift()), finalCmd, {\n      numberToSkip: 0, numberToReturn: -1\n    , checkKeys: false, serializeFunctions: serializeFunctions\n    , ignoreUndefined: ignoreUndefined\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Return the query\n  return query;\n}\n\nmodule.exports = WireProtocol;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/cursor.js":"\"use strict\";\n\nvar Logger = require('./connection/logger')\n  , retrieveBSON = require('./connection/utils').retrieveBSON\n  , MongoError = require('./error')\n  , f = require('util').format;\n\nvar BSON = retrieveBSON(),\n  Long = BSON.Long;\n\n/**\n * This is a cursor results callback\n *\n * @callback resultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {object} document\n */\n\n/**\n * @fileOverview The **Cursor** class is an internal class that embodies a cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query.\n *\n * **CURSORS Cannot directly be instantiated**\n * @example\n * var Server = require('mongodb-core').Server\n *   , ReadPreference = require('mongodb-core').ReadPreference\n *   , assert = require('assert');\n *\n * var server = new Server({host: 'localhost', port: 27017});\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   assert.equal(null, err);\n *\n *   // Execute the write\n *   var cursor = _server.cursor('integration_tests.inserts_example4', {\n *       find: 'integration_tests.example4'\n *     , query: {a:1}\n *   }, {\n *     readPreference: new ReadPreference('secondary');\n *   });\n *\n *   // Get the first document\n *   cursor.next(function(err, doc) {\n *     assert.equal(null, err);\n *     server.destroy();\n *   });\n * });\n *\n * // Start connecting\n * server.connect();\n */\n\n/**\n * Creates a new Cursor, not to be used directly\n * @class\n * @param {object} bson An instance of the BSON parser\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|Long} cmd The selector (can be a command or a cursorId)\n * @param {object} [options=null] Optional settings.\n * @param {object} [options.batchSize=1000] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {object} [options.transforms=null] Transform methods for the cursor results\n * @param {function} [options.transforms.query] Transform the value returned from the initial query\n * @param {function} [options.transforms.doc] Transform each document returned from Cursor.prototype.next\n * @param {object} topology The server topology instance.\n * @param {object} topologyOptions The server topology options.\n * @return {Cursor} A cursor instance\n * @property {number} cursorBatchSize The current cursorBatchSize for the cursor\n * @property {number} cursorLimit The current cursorLimit for the cursor\n * @property {number} cursorSkip The current cursorSkip for the cursor\n */\nvar Cursor = function(bson, ns, cmd, options, topology, topologyOptions) {\n  options = options || {};\n\n  // Cursor pool\n  this.pool = null;\n  // Cursor server\n  this.server = null;\n\n  // Do we have a not connected handler\n  this.disconnectHandler = options.disconnectHandler;\n\n  // Set local values\n  this.bson = bson;\n  this.ns = ns;\n  this.cmd = cmd;\n  this.options = options;\n  this.topology = topology;\n\n  // All internal state\n  this.cursorState = {\n      cursorId: null\n    , cmd: cmd\n    , documents: options.documents || []\n    , cursorIndex: 0\n    , dead: false\n    , killed: false\n    , init: false\n    , notified: false\n    , limit: options.limit || cmd.limit || 0\n    , skip: options.skip || cmd.skip || 0\n    , batchSize: options.batchSize || cmd.batchSize || 1000\n    , currentLimit: 0\n    // Result field name if not a cursor (contains the array of results)\n    , transforms: options.transforms\n  }\n\n  // Add promoteLong to cursor state\n  if(typeof topologyOptions.promoteLongs == 'boolean') {\n    this.cursorState.promoteLongs = topologyOptions.promoteLongs;\n  } else if(typeof options.promoteLongs == 'boolean') {\n    this.cursorState.promoteLongs = options.promoteLongs;\n  }\n\n  // Add promoteValues to cursor state\n  if(typeof topologyOptions.promoteValues == 'boolean') {\n    this.cursorState.promoteValues = topologyOptions.promoteValues;\n  } else if(typeof options.promoteValues == 'boolean') {\n    this.cursorState.promoteValues = options.promoteValues;\n  }\n\n  // Add promoteBuffers to cursor state\n  if(typeof topologyOptions.promoteBuffers == 'boolean') {\n    this.cursorState.promoteBuffers = topologyOptions.promoteBuffers;\n  } else if(typeof options.promoteBuffers == 'boolean') {\n    this.cursorState.promoteBuffers = options.promoteBuffers;\n  }\n\n  // Logger\n  this.logger = Logger('Cursor', topologyOptions);\n\n  //\n  // Did we pass in a cursor id\n  if(typeof cmd == 'number') {\n    this.cursorState.cursorId = Long.fromNumber(cmd);\n    this.cursorState.lastCursorId = this.cursorState.cursorId;\n  } else if(cmd instanceof Long) {\n    this.cursorState.cursorId = cmd;\n    this.cursorState.lastCursorId = cmd;\n  }\n}\n\nCursor.prototype.setCursorBatchSize = function(value) {\n  this.cursorState.batchSize = value;\n}\n\nCursor.prototype.cursorBatchSize = function() {\n  return this.cursorState.batchSize;\n}\n\nCursor.prototype.setCursorLimit = function(value) {\n  this.cursorState.limit = value;\n}\n\nCursor.prototype.cursorLimit = function() {\n  return this.cursorState.limit;\n}\n\nCursor.prototype.setCursorSkip = function(value) {\n  this.cursorState.skip = value;\n}\n\nCursor.prototype.cursorSkip = function() {\n  return this.cursorState.skip;\n}\n\n//\n// Handle callback (including any exceptions thrown)\nvar handleCallback = function(callback, err, result) {\n  try {\n    callback(err, result);\n  } catch(err) {\n    process.nextTick(function() {\n      throw err;\n    });\n  }\n}\n\n// Internal methods\nCursor.prototype._find = function(callback) {\n  var self = this;\n\n  if(self.logger.isDebug()) {\n    self.logger.debug(f('issue initial query [%s] with flags [%s]'\n      , JSON.stringify(self.cmd)\n      , JSON.stringify(self.query)));\n  }\n\n  var queryCallback = function(err, r) {\n    if(err) return callback(err);\n\n    // Get the raw message\n    var result = r.message;\n\n    // Query failure bit set\n    if(result.queryFailure) {\n      return callback(MongoError.create(result.documents[0]), null);\n    }\n\n    // Check if we have a command cursor\n    if(Array.isArray(result.documents) && result.documents.length == 1\n      && (!self.cmd.find || (self.cmd.find && self.cmd.virtual == false))\n      && (result.documents[0].cursor != 'string'\n        || result.documents[0]['$err']\n        || result.documents[0]['errmsg']\n        || Array.isArray(result.documents[0].result))\n      ) {\n\n      // We have a an error document return the error\n      if(result.documents[0]['$err']\n        || result.documents[0]['errmsg']) {\n        return callback(MongoError.create(result.documents[0]), null);\n      }\n\n      // We have a cursor document\n      if(result.documents[0].cursor != null\n        && typeof result.documents[0].cursor != 'string') {\n          var id = result.documents[0].cursor.id;\n          // If we have a namespace change set the new namespace for getmores\n          if(result.documents[0].cursor.ns) {\n            self.ns = result.documents[0].cursor.ns;\n          }\n          // Promote id to long if needed\n          self.cursorState.cursorId = typeof id == 'number' ? Long.fromNumber(id) : id;\n          self.cursorState.lastCursorId = self.cursorState.cursorId;\n          // If we have a firstBatch set it\n          if(Array.isArray(result.documents[0].cursor.firstBatch)) {\n            self.cursorState.documents = result.documents[0].cursor.firstBatch;//.reverse();\n          }\n\n          // Return after processing command cursor\n          return callback(null, null);\n      }\n\n      if(Array.isArray(result.documents[0].result)) {\n        self.cursorState.documents = result.documents[0].result;\n        self.cursorState.cursorId = Long.ZERO;\n        return callback(null, null);\n      }\n    }\n\n    // Otherwise fall back to regular find path\n    self.cursorState.cursorId = result.cursorId;\n    self.cursorState.documents = result.documents;\n    self.cursorState.lastCursorId = result.cursorId;\n\n    // Transform the results with passed in transformation method if provided\n    if(self.cursorState.transforms && typeof self.cursorState.transforms.query == 'function') {\n      self.cursorState.documents = self.cursorState.transforms.query(result);\n    }\n\n    // Return callback\n    callback(null, null);\n  }\n\n  // Options passed to the pool\n  var queryOptions = {};\n\n  // If we have a raw query decorate the function\n  if(self.options.raw || self.cmd.raw) {\n    // queryCallback.raw = self.options.raw || self.cmd.raw;\n    queryOptions.raw = self.options.raw || self.cmd.raw;\n  }\n\n  // Do we have documentsReturnedIn set on the query\n  if(typeof self.query.documentsReturnedIn == 'string') {\n    // queryCallback.documentsReturnedIn = self.query.documentsReturnedIn;\n    queryOptions.documentsReturnedIn = self.query.documentsReturnedIn;\n  }\n\n  // Add promote Long value if defined\n  if(typeof self.cursorState.promoteLongs == 'boolean') {\n    queryOptions.promoteLongs = self.cursorState.promoteLongs;\n  }\n\n  // Add promote values if defined\n  if(typeof self.cursorState.promoteValues == 'boolean') {\n    queryOptions.promoteValues = self.cursorState.promoteValues;\n  }\n\n  // Add promote values if defined\n  if(typeof self.cursorState.promoteBuffers == 'boolean') {\n    queryOptions.promoteBuffers = self.cursorState.promoteBuffers;\n  }\n  // Write the initial command out\n  self.server.s.pool.write(self.query, queryOptions, queryCallback);\n}\n\nCursor.prototype._getmore = function(callback) {\n  if(this.logger.isDebug()) this.logger.debug(f('schedule getMore call for query [%s]', JSON.stringify(this.query)))\n  // Determine if it's a raw query\n  var raw = this.options.raw || this.cmd.raw;\n\n  // Set the current batchSize\n  var batchSize = this.cursorState.batchSize;\n  if(this.cursorState.limit > 0\n    && ((this.cursorState.currentLimit + batchSize) > this.cursorState.limit)) {\n    batchSize = this.cursorState.limit - this.cursorState.currentLimit;\n  }\n\n  // Default pool\n  var pool = this.server.s.pool;\n\n  // We have a wire protocol handler\n  this.server.wireProtocolHandler.getMore(this.bson, this.ns, this.cursorState, batchSize, raw, pool, this.options, callback);\n}\n\nCursor.prototype._killcursor = function(callback) {\n  // Set cursor to dead\n  this.cursorState.dead = true;\n  this.cursorState.killed = true;\n  // Remove documents\n  this.cursorState.documents = [];\n\n  // If no cursor id just return\n  if(this.cursorState.cursorId == null || this.cursorState.cursorId.isZero() || this.cursorState.init == false) {\n    if(callback) callback(null, null);\n    return;\n  }\n\n  // Default pool\n  var pool = this.server.s.pool;\n  // Execute command\n  this.server.wireProtocolHandler.killCursor(this.bson, this.ns, this.cursorState.cursorId, pool, callback);\n}\n\n/**\n * Clone the cursor\n * @method\n * @return {Cursor}\n */\nCursor.prototype.clone = function() {\n  return this.topology.cursor(this.ns, this.cmd, this.options);\n}\n\n/**\n * Checks if the cursor is dead\n * @method\n * @return {boolean} A boolean signifying if the cursor is dead or not\n */\nCursor.prototype.isDead = function() {\n  return this.cursorState.dead == true;\n}\n\n/**\n * Checks if the cursor was killed by the application\n * @method\n * @return {boolean} A boolean signifying if the cursor was killed by the application\n */\nCursor.prototype.isKilled = function() {\n  return this.cursorState.killed == true;\n}\n\n/**\n * Checks if the cursor notified it's caller about it's death\n * @method\n * @return {boolean} A boolean signifying if the cursor notified the callback\n */\nCursor.prototype.isNotified = function() {\n  return this.cursorState.notified == true;\n}\n\n/**\n * Returns current buffered documents length\n * @method\n * @return {number} The number of items in the buffered documents\n */\nCursor.prototype.bufferedCount = function() {\n  return this.cursorState.documents.length - this.cursorState.cursorIndex;\n}\n\n/**\n * Returns current buffered documents\n * @method\n * @return {Array} An array of buffered documents\n */\nCursor.prototype.readBufferedDocuments = function(number) {\n  var unreadDocumentsLength = this.cursorState.documents.length - this.cursorState.cursorIndex;\n  var length = number < unreadDocumentsLength ? number : unreadDocumentsLength;\n  var elements = this.cursorState.documents.slice(this.cursorState.cursorIndex, this.cursorState.cursorIndex + length);\n\n  // Transform the doc with passed in transformation method if provided\n  if(this.cursorState.transforms && typeof this.cursorState.transforms.doc == 'function') {\n    // Transform all the elements\n    for(var i = 0; i < elements.length; i++) {\n      elements[i] = this.cursorState.transforms.doc(elements[i]);\n    }\n  }\n\n  // Ensure we do not return any more documents than the limit imposed\n  // Just return the number of elements up to the limit\n  if(this.cursorState.limit > 0 && (this.cursorState.currentLimit + elements.length) > this.cursorState.limit) {\n    elements = elements.slice(0, (this.cursorState.limit - this.cursorState.currentLimit));\n    this.kill();\n  }\n\n  // Adjust current limit\n  this.cursorState.currentLimit = this.cursorState.currentLimit + elements.length;\n  this.cursorState.cursorIndex = this.cursorState.cursorIndex + elements.length;\n\n  // Return elements\n  return elements;\n}\n\n/**\n * Kill the cursor\n * @method\n * @param {resultCallback} callback A callback function\n */\nCursor.prototype.kill = function(callback) {\n  this._killcursor(callback);\n}\n\n/**\n * Resets the cursor\n * @method\n * @return {null}\n */\nCursor.prototype.rewind = function() {\n  if(this.cursorState.init) {\n    if(!this.cursorState.dead) {\n      this.kill();\n    }\n\n    this.cursorState.currentLimit = 0;\n    this.cursorState.init = false;\n    this.cursorState.dead = false;\n    this.cursorState.killed = false;\n    this.cursorState.notified = false;\n    this.cursorState.documents = [];\n    this.cursorState.cursorId = null;\n    this.cursorState.cursorIndex = 0;\n  }\n}\n\n/**\n * Validate if the pool is dead and return error\n */\nvar isConnectionDead = function(self, callback) {\n  if(self.pool\n    && self.pool.isDestroyed()) {\n    self.cursorState.notified = true;\n    self.cursorState.killed = true;\n    self.cursorState.documents = [];\n    self.cursorState.cursorIndex = 0;\n    callback(MongoError.create(f('connection to host %s:%s was destroyed', self.pool.host, self.pool.port)))\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Validate if the cursor is dead but was not explicitly killed by user\n */\nvar isCursorDeadButNotkilled = function(self, callback) {\n  // Cursor is dead but not marked killed, return null\n  if(self.cursorState.dead && !self.cursorState.killed) {\n    self.cursorState.notified = true;\n    self.cursorState.killed = true;\n    self.cursorState.documents = [];\n    self.cursorState.cursorIndex = 0;\n    handleCallback(callback, null, null);\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Validate if the cursor is dead and was killed by user\n */\nvar isCursorDeadAndKilled = function(self, callback) {\n  if(self.cursorState.dead && self.cursorState.killed) {\n    handleCallback(callback, MongoError.create('cursor is dead'));\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Validate if the cursor was killed by the user\n */\nvar isCursorKilled = function(self, callback) {\n  if(self.cursorState.killed) {\n    self.cursorState.notified = true;\n    self.cursorState.documents = [];\n    self.cursorState.cursorIndex = 0;\n    handleCallback(callback, null, null);\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Mark cursor as being dead and notified\n */\nvar setCursorDeadAndNotified = function(self, callback) {\n  self.cursorState.dead = true;\n  self.cursorState.notified = true;\n  self.cursorState.documents = [];\n  self.cursorState.cursorIndex = 0;\n  handleCallback(callback, null, null);\n}\n\n/**\n * Mark cursor as being notified\n */\nvar setCursorNotified = function(self, callback) {\n  self.cursorState.notified = true;\n  self.cursorState.documents = [];\n  self.cursorState.cursorIndex = 0;\n  handleCallback(callback, null, null);\n}\n\nvar nextFunction = function(self, callback) {\n  // We have notified about it\n  if(self.cursorState.notified) {\n    return callback(new Error('cursor is exhausted'));\n  }\n\n  // Cursor is killed return null\n  if(isCursorKilled(self, callback)) return;\n\n  // Cursor is dead but not marked killed, return null\n  if(isCursorDeadButNotkilled(self, callback)) return;\n\n  // We have a dead and killed cursor, attempting to call next should error\n  if(isCursorDeadAndKilled(self, callback)) return;\n\n  // We have just started the cursor\n  if(!self.cursorState.init) {\n    // Topology is not connected, save the call in the provided store to be\n    // Executed at some point when the handler deems it's reconnected\n    if(!self.topology.isConnected(self.options) && self.disconnectHandler != null) {\n      if (self.topology.isDestroyed()) {\n        // Topology was destroyed, so don't try to wait for it to reconnect\n        return callback(new MongoError('Topology was destroyed'));\n      }\n      return self.disconnectHandler.addObjectAndMethod('cursor', self, 'next', [callback], callback);\n    }\n\n    try {\n      self.server = self.topology.getServer(self.options);\n    } catch(err) {\n      // Handle the error and add object to next method call\n      if(self.disconnectHandler != null) {\n        return self.disconnectHandler.addObjectAndMethod('cursor', self, 'next', [callback], callback);\n      }\n\n      // Otherwise return the error\n      return callback(err);\n    }\n\n    // Set as init\n    self.cursorState.init = true;\n\n    // Server does not support server\n    if(self.cmd\n      && self.cmd.collation\n      && self.server.ismaster.maxWireVersion < 5) {\n      return callback(new MongoError(f('server %s does not support collation', self.server.name)));\n    }\n\n    try {\n      self.query = self.server.wireProtocolHandler.command(self.bson, self.ns, self.cmd, self.cursorState, self.topology, self.options);\n    } catch(err) {\n      return callback(err);\n    }\n  }\n\n  // If we don't have a cursorId execute the first query\n  if(self.cursorState.cursorId == null) {\n    // Check if pool is dead and return if not possible to\n    // execute the query against the db\n    if(isConnectionDead(self, callback)) return;\n\n    // Check if topology is destroyed\n    if(self.topology.isDestroyed()) return callback(new MongoError('connection destroyed, not possible to instantiate cursor'));\n\n    // query, cmd, options, cursorState, callback\n    self._find(function(err) {\n      if(err) return handleCallback(callback, err, null);\n\n      if(self.cursorState.documents.length == 0\n        && self.cursorState.cursorId && self.cursorState.cursorId.isZero()\n        && !self.cmd.tailable && !self.cmd.awaitData) {\n        return setCursorNotified(self, callback);\n      }\n\n      nextFunction(self, callback);\n    });\n  } else if(self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n    // Ensure we kill the cursor on the server\n    self.kill();\n    // Set cursor in dead and notified state\n    return setCursorDeadAndNotified(self, callback);\n  } else if(self.cursorState.cursorIndex == self.cursorState.documents.length\n      && !Long.ZERO.equals(self.cursorState.cursorId)) {\n      // Ensure an empty cursor state\n      self.cursorState.documents = [];\n      self.cursorState.cursorIndex = 0;\n\n      // Check if topology is destroyed\n      if(self.topology.isDestroyed()) return callback(new MongoError('connection destroyed, not possible to instantiate cursor'));\n\n      // Check if connection is dead and return if not possible to\n      // execute a getmore on this connection\n      if(isConnectionDead(self, callback)) return;\n\n      // Execute the next get more\n      self._getmore(function(err, doc, connection) {\n        if(err) return handleCallback(callback, err);\n\n        // Save the returned connection to ensure all getMore's fire over the same connection\n        self.connection = connection;\n\n        // Tailable cursor getMore result, notify owner about it\n        // No attempt is made here to retry, this is left to the user of the\n        // core module to handle to keep core simple\n        if(self.cursorState.documents.length == 0\n          && self.cmd.tailable && Long.ZERO.equals(self.cursorState.cursorId)) {\n          // No more documents in the tailed cursor\n          return handleCallback(callback, MongoError.create({\n              message: 'No more documents in tailed cursor'\n            , tailable: self.cmd.tailable\n            , awaitData: self.cmd.awaitData\n          }));\n        } else if(self.cursorState.documents.length == 0\n          && self.cmd.tailable && !Long.ZERO.equals(self.cursorState.cursorId)) {\n          return nextFunction(self, callback);\n        }\n\n        if(self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n          return setCursorDeadAndNotified(self, callback);\n        }\n\n        nextFunction(self, callback);\n      });\n  } else if(self.cursorState.documents.length == self.cursorState.cursorIndex\n    && self.cmd.tailable && Long.ZERO.equals(self.cursorState.cursorId)) {\n      return handleCallback(callback, MongoError.create({\n          message: 'No more documents in tailed cursor'\n        , tailable: self.cmd.tailable\n        , awaitData: self.cmd.awaitData\n      }));\n  } else if(self.cursorState.documents.length == self.cursorState.cursorIndex\n      && Long.ZERO.equals(self.cursorState.cursorId)) {\n      setCursorDeadAndNotified(self, callback);\n  } else {\n    if(self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n      // Ensure we kill the cursor on the server\n      self.kill();\n      // Set cursor in dead and notified state\n      return setCursorDeadAndNotified(self, callback);\n    }\n\n    // Increment the current cursor limit\n    self.cursorState.currentLimit += 1;\n\n    // Get the document\n    var doc = self.cursorState.documents[self.cursorState.cursorIndex++];\n\n    // Doc overflow\n    if(!doc || doc.$err) {\n      // Ensure we kill the cursor on the server\n      self.kill();\n      // Set cursor in dead and notified state\n      return setCursorDeadAndNotified(self, function() {\n        handleCallback(callback, new MongoError(doc ? doc.$err : undefined));\n      });\n    }\n\n    // Transform the doc with passed in transformation method if provided\n    if(self.cursorState.transforms && typeof self.cursorState.transforms.doc == 'function') {\n      doc = self.cursorState.transforms.doc(doc);\n    }\n\n    // Return the document\n    handleCallback(callback, null, doc);\n  }\n}\n\n/**\n * Retrieve the next document from the cursor\n * @method\n * @param {resultCallback} callback A callback function\n */\nCursor.prototype.next = function(callback) {\n  nextFunction(this, callback);\n}\n\nmodule.exports = Cursor;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/topologies/replset.js":"\"use strict\"\n\nvar inherits = require('util').inherits,\n  f = require('util').format,\n  EventEmitter = require('events').EventEmitter,\n  ReadPreference = require('./read_preference'),\n  BasicCursor = require('../cursor'),\n  retrieveBSON = require('../connection/utils').retrieveBSON,\n  Logger = require('../connection/logger'),\n  MongoError = require('../error'),\n  Server = require('./server'),\n  ReplSetState = require('./replset_state'),\n  assign = require('./shared').assign,\n  clone = require('./shared').clone,\n  createClientInfo = require('./shared').createClientInfo;\n\nvar MongoCR = require('../auth/mongocr')\n  , X509 = require('../auth/x509')\n  , Plain = require('../auth/plain')\n  , GSSAPI = require('../auth/gssapi')\n  , SSPI = require('../auth/sspi')\n  , ScramSHA1 = require('../auth/scram');\n\nvar BSON = retrieveBSON();\n\n//\n// States\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYED = 'destroyed';\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    'disconnected': [CONNECTING, DESTROYED, DISCONNECTED],\n    'connecting': [CONNECTING, DESTROYED, CONNECTED, DISCONNECTED],\n    'connected': [CONNECTED, DISCONNECTED, DESTROYED, UNREFERENCED],\n    'unreferenced': [UNREFERENCED, DESTROYED],\n    'destroyed': [DESTROYED]\n  }\n\n  // Get current state\n  var legalStates = legalTransitions[self.state];\n  if(legalStates && legalStates.indexOf(newState) != -1) {\n    self.state = newState;\n  } else {\n    self.s.logger.error(f('Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]'\n      , self.id, self.state, newState, legalStates));\n  }\n}\n\n//\n// ReplSet instance id\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n\n/**\n * Creates a new Replset instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {boolean} options.setName The Replicaset set name\n * @param {boolean} [options.secondaryOnlyConnectionAllowed=false] Allow connection to a secondary only replicaset\n * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry\n * @param {boolean} [options.emitError=false] Server will emit errors events\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=10000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {number} [options.pingInterval=5000] Ping interval to check the response time to the different servers\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for Replicaset member selection\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @return {ReplSet} A cursor instance\n * @fires ReplSet#connect\n * @fires ReplSet#ha\n * @fires ReplSet#joined\n * @fires ReplSet#left\n * @fires ReplSet#failed\n * @fires ReplSet#fullsetup\n * @fires ReplSet#all\n * @fires ReplSet#error\n * @fires ReplSet#serverHeartbeatStarted\n * @fires ReplSet#serverHeartbeatSucceeded\n * @fires ReplSet#serverHeartbeatFailed\n * @fires ReplSet#topologyOpening\n * @fires ReplSet#topologyClosed\n * @fires ReplSet#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar ReplSet = function(seedlist, options) {\n  var self = this;\n  options = options || {};\n\n  // Validate seedlist\n  if(!Array.isArray(seedlist)) throw new MongoError(\"seedlist must be an array\");\n  // Validate list\n  if(seedlist.length == 0) throw new MongoError(\"seedlist must contain at least one entry\");\n  // Validate entries\n  seedlist.forEach(function(e) {\n    if(typeof e.host != 'string' || typeof e.port != 'number')\n      throw new MongoError(\"seedlist entry must contain a host and port\");\n  });\n\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Get replSet Id\n  this.id = id++;\n\n  // Get the localThresholdMS\n  var localThresholdMS = options.localThresholdMS || 15;\n  // Backward compatibility\n  if(options.acceptableLatency) localThresholdMS = options.acceptableLatency;\n\n  // Create a logger\n  var logger = Logger('ReplSet', options);\n\n  // Internal state\n  this.s = {\n    options: assign({}, options),\n    // BSON instance\n    bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128,\n      BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey,\n      BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n    // Factory overrides\n    Cursor: options.cursorFactory || BasicCursor,\n    // Logger instance\n    logger: logger,\n    // Seedlist\n    seedlist: seedlist,\n    // Replicaset state\n    replicaSetState: new ReplSetState({\n      id: this.id, setName: options.setName,\n      acceptableLatency: localThresholdMS,\n      heartbeatFrequencyMS: options.haInterval ? options.haInterval : 10000,\n      logger: logger\n    }),\n    // Current servers we are connecting to\n    connectingServers: [],\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Minimum heartbeat frequency used if we detect a server close\n    minHeartbeatFrequencyMS: 500,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug == 'boolean' ? options.debug : false,\n    // Client info\n    clientInfo: createClientInfo(options),\n    // Authentication context\n    authenticationContexts: [],\n  }\n\n  // Add handler for topology change\n  this.s.replicaSetState.on('topologyDescriptionChanged', function(r) { self.emit('topologyDescriptionChanged', r); });\n\n  // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n  if(this.s.logger.isWarn()\n    && this.s.options.socketTimeout != 0\n    && this.s.options.socketTimeout < this.s.haInterval) {\n      this.s.logger.warn(f('warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts'\n        , this.s.options.socketTimeout, this.s.haInterval));\n  }\n\n  // All the authProviders\n  this.authProviders = options.authProviders || {\n      'mongocr': new MongoCR(this.s.bson), 'x509': new X509(this.s.bson)\n    , 'plain': new Plain(this.s.bson), 'gssapi': new GSSAPI(this.s.bson)\n    , 'sspi': new SSPI(this.s.bson), 'scram-sha-1': new ScramSHA1(this.s.bson)\n  }\n\n  // Add forwarding of events from state handler\n  var types = ['joined', 'left'];\n  types.forEach(function(x) {\n    self.s.replicaSetState.on(x, function(t, s) {\n      self.emit(x, t, s);\n    });\n  });\n\n  // Connect stat\n  this.initialConnectState = {\n    connect: false, fullsetup: false, all: false\n  }\n\n  // Disconnected state\n  this.state = DISCONNECTED;\n  this.haTimeoutId = null;\n  // Are we authenticating\n  this.authenticating = false;\n  // Last ismaster\n  this.ismaster = null;\n  // Contains the intervalId\n  this.intervalIds = [];\n}\n\ninherits(ReplSet, EventEmitter);\n\nObject.defineProperty(ReplSet.prototype, 'type', {\n  enumerable:true, get: function() { return 'replset'; }\n});\n\nObject.defineProperty(ReplSet.prototype, 'parserType', {\n  enumerable:true, get: function() {\n    return BSON.native ? \"c++\" : \"js\";\n  }\n});\n\nfunction rexecuteOperations(self) {\n  // If we have a primary and a disconnect handler, execute\n  // buffered operations\n  if(self.s.replicaSetState.hasPrimaryAndSecondary() && self.s.disconnectHandler) {\n    self.s.disconnectHandler.execute();\n  } else if(self.s.replicaSetState.hasPrimary() && self.s.disconnectHandler) {\n    self.s.disconnectHandler.execute({ executePrimary:true });\n  } else if(self.s.replicaSetState.hasSecondary() && self.s.disconnectHandler) {\n    self.s.disconnectHandler.execute({ executeSecondary:true });\n  }\n}\n\nfunction connectNewServers(self, servers, callback) {\n  // Count lefts\n  var count = servers.length;\n  var error = null;\n\n  // Handle events\n  var _handleEvent = function(self, event) {\n    return function(err) {\n      var _self = this;\n      count = count - 1;\n\n      // Destroyed\n      if(self.state == DESTROYED || self.state == UNREFERENCED) {\n        return this.destroy();\n      }\n\n      if(event == 'connect' && !self.authenticating) {\n        // Destroyed\n        if(self.state == DESTROYED || self.state == UNREFERENCED) {\n          return _self.destroy();\n        }\n\n        // Do we have authentication contexts that need to be applied\n        applyAuthenticationContexts(self, _self, function() {\n          // Destroy the instance\n          if(self.state == DESTROYED || self.state == UNREFERENCED) {\n            return _self.destroy();\n          }\n\n          // Update the state\n          var result = self.s.replicaSetState.update(_self);\n          // Update the state with the new server\n          if(result) {\n            // Primary lastIsMaster store it\n            if(_self.lastIsMaster() && _self.lastIsMaster().ismaster) {\n              self.ismaster = _self.lastIsMaster();\n            }\n\n            // Remove the handlers\n            for(var i = 0; i < handlers.length; i++) {\n              _self.removeAllListeners(handlers[i]);\n            }\n\n            // Add stable state handlers\n            _self.on('error', handleEvent(self, 'error'));\n            _self.on('close', handleEvent(self, 'close'));\n            _self.on('timeout', handleEvent(self, 'timeout'));\n            _self.on('parseError', handleEvent(self, 'parseError'));\n\n            // Rexecute any stalled operation\n            rexecuteOperations(self);\n          } else {\n            _self.destroy();\n          }\n        });\n      } else if(event == 'connect' && self.authenticating) {\n        this.destroy();\n      } else if(event == 'error') {\n        error = err;\n      }\n\n      // Rexecute any stalled operation\n      rexecuteOperations(self);\n\n      // Are we done finish up callback\n      if(count == 0) { callback(error); }\n    }\n  }\n\n  // No new servers\n  if(count == 0) return callback();\n\n  // Execute method\n  function execute(_server, i) {\n    setTimeout(function() {\n      // Destroyed\n      if(self.state == DESTROYED || self.state == UNREFERENCED) {\n        return;\n      }\n\n      // Create a new server instance\n      var server = new Server(assign({}, self.s.options, {\n        host: _server.split(':')[0],\n        port: parseInt(_server.split(':')[1], 10)\n      }, {\n        authProviders: self.authProviders, reconnect:false, monitoring: false, inTopology: true\n      }, {\n        clientInfo: clone(self.s.clientInfo)\n      }));\n\n      // Add temp handlers\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError'));\n\n      // SDAM Monitoring events\n      server.on('serverOpening', function(e) { self.emit('serverOpening', e); });\n      server.on('serverDescriptionChanged', function(e) { self.emit('serverDescriptionChanged', e); });\n      server.on('serverClosed', function(e) { self.emit('serverClosed', e); });\n      server.connect(self.s.connectOptions);\n    }, i);\n  }\n\n  // Create new instances\n  for(var i = 0; i < servers.length; i++) {\n    execute(servers[i], i);\n  }\n}\n\n// Ping the server\nvar pingServer = function(self, server, cb) {\n  // Measure running time\n  var start = new Date().getTime();\n\n  // Emit the server heartbeat start\n  emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: server.name });\n\n  // Execute ismaster\n  // Set the socketTimeout for a monitoring message to a low number\n  // Ensuring ismaster calls are timed out quickly\n  server.command('admin.$cmd', {\n    ismaster:true\n  }, {\n    monitoring: true,\n    socketTimeout: self.s.options.connectionTimeout || 2000,\n  }, function(err, r) {\n    if(self.state == DESTROYED || self.state == UNREFERENCED) {\n      server.destroy();\n      return cb(err, r);\n    }\n\n    // Calculate latency\n    var latencyMS = new Date().getTime() - start;\n    // Set the last updatedTime\n    var hrTime = process.hrtime();\n    // Calculate the last update time\n    server.lastUpdateTime = hrTime[0] * 1000 + Math.round(hrTime[1]/1000);\n\n    // We had an error, remove it from the state\n    if(err) {\n      // Emit the server heartbeat failure\n      emitSDAMEvent(self, 'serverHeartbeatFailed', { durationMS: latencyMS, failure: err, connectionId: server.name });\n\n      // Remove server from the state\n      self.s.replicaSetState.remove(server);\n    } else {\n      // Update the server ismaster\n      server.ismaster = r.result;\n\n      // Check if we have a lastWriteDate convert it to MS\n      // and store on the server instance for later use\n      if(server.ismaster.lastWrite && server.ismaster.lastWrite.lastWriteDate) {\n        server.lastWriteDate = server.ismaster.lastWrite.lastWriteDate.getTime();\n      }\n\n      // Do we have a brand new server\n      if(server.lastIsMasterMS == -1) {\n        server.lastIsMasterMS = latencyMS;\n      } else if(server.lastIsMasterMS) {\n        // After the first measurement, average RTT MUST be computed using an\n        // exponentially-weighted moving average formula, with a weighting factor (alpha) of 0.2.\n        // If the prior average is denoted old_rtt, then the new average (new_rtt) is\n        // computed from a new RTT measurement (x) using the following formula:\n        // alpha = 0.2\n        // new_rtt = alpha * x + (1 - alpha) * old_rtt\n        server.lastIsMasterMS = 0.2 * latencyMS + (1 - 0.2) * server.lastIsMasterMS;\n      }\n\n      if(self.s.replicaSetState.update(server)) {\n        // Primary lastIsMaster store it\n        if(server.lastIsMaster() && server.lastIsMaster().ismaster) {\n          self.ismaster = server.lastIsMaster();\n        }\n      }\n\n      // Server heart beat event\n      emitSDAMEvent(self, 'serverHeartbeatSucceeded', { durationMS: latencyMS, reply: r.result, connectionId: server.name });\n    }\n\n    // Calculate the stalness for this server\n    self.s.replicaSetState.updateServerMaxStaleness(server, self.s.haInterval);\n\n    // Callback\n    cb(err, r);\n  });\n}\n\nfunction topologyMonitor(self, options) {\n  if(self.state == DESTROYED || self.state == UNREFERENCED) return;\n  options = options || {};\n\n  var servers = Object.keys(self.s.replicaSetState.set);\n\n  // Get the haInterval\n  var _process = options.haInterval ? setTimeout : setInterval;\n  var _haInterval = options.haInterval ? options.haInterval : self.s.haInterval;\n\n  // Count of initial sweep servers to check\n  var count = servers.length;\n\n  // Each server is monitored in parallel in their own timeout loop\n  var monitorServer = function(_host, _self, _options) {\n    var intervalId = _process(function() {\n      if(self.state == DESTROYED || self.state == UNREFERENCED) {\n        clearInterval(intervalId);\n        return;\n      }\n\n      // Adjust the count\n      count = count - 1;\n\n      // Do we already have server connection available for this host\n      var _server = _self.s.replicaSetState.get(_host);\n\n      // Check if we have a known server connection and reuse\n      if(_server) {\n        return pingServer(_self, _server, function(err) {\n          if(self.state == DESTROYED || self.state == UNREFERENCED) {\n            clearInterval(intervalId);\n            return;\n          }\n\n          // Initial sweep\n          if(_process === setTimeout) {\n            if(_self.state == CONNECTING && (\n              (\n                self.s.replicaSetState.hasSecondary()\n                && self.s.options.secondaryOnlyConnectionAllowed\n              )\n              || self.s.replicaSetState.hasPrimary()\n            )) {\n              _self.state = CONNECTED;\n\n              // Emit connected sign\n              process.nextTick(function() {\n                self.emit('connect', self);\n              });\n\n              // Start topology interval check\n              topologyMonitor(_self, {});\n            }\n          } else {\n            if(_self.state == DISCONNECTED && (\n              (\n                self.s.replicaSetState.hasSecondary()\n                && self.s.options.secondaryOnlyConnectionAllowed\n              )\n              || self.s.replicaSetState.hasPrimary()\n            )) {\n              _self.state = CONNECTED;\n\n              // Rexecute any stalled operation\n              rexecuteOperations(self);\n\n              // Emit connected sign\n              process.nextTick(function() {\n                self.emit('reconnect', self);\n              });\n            }\n          }\n\n          if(self.initialConnectState.connect\n            && !self.initialConnectState.fullsetup\n            && self.s.replicaSetState.hasPrimaryAndSecondary()) {\n              // Set initial connect state\n              self.initialConnectState.fullsetup = true;\n              self.initialConnectState.all = true;\n\n              process.nextTick(function() {\n                self.emit('fullsetup', self);\n                self.emit('all', self);\n              });\n          }\n        });\n      }\n    }, _haInterval);\n\n    // Add the intervalId to our list of intervalIds\n    self.intervalIds.push(intervalId);\n  }\n\n  if(_process === setTimeout) {\n    return connectNewServers(self, self.s.replicaSetState.unknownServers, function(err) {\n      if(!self.s.replicaSetState.hasPrimary() && !self.s.options.secondaryOnlyConnectionAllowed) {\n        if(err) return self.emit('error', err);\n        self.emit('error', new MongoError('no primary found in replicaset'));\n        return self.destroy();\n      } else if(!self.s.replicaSetState.hasSecondary() && self.s.options.secondaryOnlyConnectionAllowed) {\n        if(err) return self.emit('error', err);\n        self.emit('error', new MongoError('no secondary found in replicaset'));\n        return self.destroy();\n      }\n\n      for(var i = 0; i < servers.length; i++) {\n        monitorServer(servers[i], self, options);\n      }\n    });\n  } else {\n    for(var i = 0; i < servers.length; i++) {\n      monitorServer(servers[i], self, options);\n    }\n  }\n\n  // Run the reconnect process\n  function executeReconnect(self) {\n    return function() {\n      if(self.state == DESTROYED || self.state == UNREFERENCED) {\n        return;\n      }\n\n      connectNewServers(self, self.s.replicaSetState.unknownServers, function() {\n        if(self.s.replicaSetState.hasPrimary()) {\n          self.intervalIds.push(setTimeout(executeReconnect(self), _haInterval));\n        } else {\n          self.intervalIds.push(setTimeout(executeReconnect(self), self.s.minHeartbeatFrequencyMS));\n        }\n      });\n    }\n  }\n\n  // Decide what kind of interval to use\n  var intervalTime = !self.s.replicaSetState.hasPrimary()\n    ? self.s.minHeartbeatFrequencyMS\n    : _haInterval\n\n  self.intervalIds.push(setTimeout(executeReconnect(self), intervalTime));\n}\n\nfunction addServerToList(list, server) {\n  for(var i = 0; i < list.length; i++) {\n    if(list[i].name.toLowerCase() === server.name.toLowerCase()) return true;\n  }\n\n  list.push(server);\n}\n\nfunction handleEvent(self, event) {\n  return function() {\n    if(self.state == DESTROYED || self.state == UNREFERENCED) return;\n    // Debug log\n    if(self.s.logger.isDebug()) {\n      self.s.logger.debug(f('handleEvent %s from server %s in replset with id %s', event, this.name, self.id));\n    }\n\n    // Remove from the replicaset state\n    self.s.replicaSetState.remove(this);\n\n    // Are we in a destroyed state return\n    if(self.state == DESTROYED || self.state == UNREFERENCED) return;\n\n    // If no primary and secondary available\n    if(!self.s.replicaSetState.hasPrimary()\n      && !self.s.replicaSetState.hasSecondary()\n      && self.s.options.secondaryOnlyConnectionAllowed) {\n      stateTransition(self, DISCONNECTED);\n    } else if(!self.s.replicaSetState.hasPrimary()) {\n      stateTransition(self, DISCONNECTED);\n    }\n\n    addServerToList(self.s.connectingServers, this);\n  }\n}\n\nfunction applyAuthenticationContexts(self, server, callback) {\n  if(self.s.authenticationContexts.length == 0) {\n    return callback();\n  }\n\n  // Do not apply any auth contexts if it's an arbiter\n  if(server.lastIsMaster() && server.lastIsMaster().arbiterOnly) {\n    return callback();\n  }\n\n  // Copy contexts to ensure no modificiation in the middle of\n  // auth process.\n  var authContexts = self.s.authenticationContexts.slice(0);\n\n  // Apply one of the contexts\n  function applyAuth(authContexts, server, callback) {\n    if(authContexts.length == 0) return callback();\n    // Get the first auth context\n    var authContext = authContexts.shift();\n    // Copy the params\n    var customAuthContext = authContext.slice(0);\n    // Push our callback handler\n    customAuthContext.push(function(err) {\n      applyAuth(authContexts, server, callback);\n    });\n\n    // Attempt authentication\n    server.auth.apply(server, customAuthContext)\n  }\n\n  // Apply all auth contexts\n  applyAuth(authContexts, server, callback);\n}\n\nfunction handleInitialConnectEvent(self, event) {\n  return function() {\n    var _this = this;\n    // Debug log\n    if(self.s.logger.isDebug()) {\n      self.s.logger.debug(f('handleInitialConnectEvent %s from server %s in replset with id %s', event, this.name, self.id));\n    }\n\n    // Destroy the instance\n    if(self.state == DESTROYED || self.state == UNREFERENCED) {\n      return this.destroy();\n    }\n\n    // Check the type of server\n    if(event == 'connect') {\n      // Do we have authentication contexts that need to be applied\n      applyAuthenticationContexts(self, _this, function() {\n        // Destroy the instance\n        if(self.state == DESTROYED || self.state == UNREFERENCED) {\n          return _this.destroy();\n        }\n\n        // Update the state\n        var result = self.s.replicaSetState.update(_this);\n        if(result == true) {\n          // Primary lastIsMaster store it\n          if(_this.lastIsMaster() && _this.lastIsMaster().ismaster) {\n            self.ismaster = _this.lastIsMaster();\n          }\n\n          // Debug log\n          if(self.s.logger.isDebug()) {\n            self.s.logger.debug(f('handleInitialConnectEvent %s from server %s in replset with id %s has state [%s]', event, _this.name, self.id, JSON.stringify(self.s.replicaSetState.set)));\n          }\n\n          // Remove the handlers\n          for(var i = 0; i < handlers.length; i++) {\n            _this.removeAllListeners(handlers[i]);\n          }\n\n          // Add stable state handlers\n          _this.on('error', handleEvent(self, 'error'));\n          _this.on('close', handleEvent(self, 'close'));\n          _this.on('timeout', handleEvent(self, 'timeout'));\n          _this.on('parseError', handleEvent(self, 'parseError'));\n\n          // Do we have a primary or primaryAndSecondary\n          if(self.state === CONNECTING && self.s.replicaSetState.hasPrimary()\n            || (self.s.replicaSetState.hasSecondary() && self.s.options.secondaryOnlyConnectionAllowed)) {\n            // We are connected\n            self.state = CONNECTED;\n\n            // Set initial connect state\n            self.initialConnectState.connect = true;\n            // Emit connect event\n            process.nextTick(function() {\n              self.emit('connect', self);\n            });\n\n            topologyMonitor(self, {});\n          }\n        } else if(result instanceof MongoError) {\n          _this.destroy();\n          self.destroy();\n          return self.emit('error', result);\n        } else {\n          _this.destroy();\n        }\n      });\n    } else {\n      // Emit failure to connect\n      self.emit('failed', this);\n\n      addServerToList(self.s.connectingServers, this);\n      // Remove from the state\n      self.s.replicaSetState.remove(this);\n    }\n\n    if(self.initialConnectState.connect\n      && !self.initialConnectState.fullsetup\n      && self.s.replicaSetState.hasPrimaryAndSecondary()) {\n        // Set initial connect state\n        self.initialConnectState.fullsetup = true;\n        self.initialConnectState.all = true;\n\n        process.nextTick(function() {\n          self.emit('fullsetup', self);\n          self.emit('all', self);\n        });\n    }\n\n    // Remove from the list from connectingServers\n    for(var i = 0; i < self.s.connectingServers.length; i++) {\n      if(self.s.connectingServers[i].equals(this)) {\n        self.s.connectingServers.splice(i, 1);\n      }\n    }\n\n    // Trigger topologyMonitor\n    if(self.s.connectingServers.length == 0 && self.state == CONNECTING) {\n      topologyMonitor(self, {haInterval: 1});\n    }\n  };\n}\n\nfunction connectServers(self, servers) {\n  // Update connectingServers\n  self.s.connectingServers = self.s.connectingServers.concat(servers);\n\n  // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n  var timeoutInterval = 0;\n\n  function connect(server, timeoutInterval) {\n    setTimeout(function() {\n      // Add the server to the state\n      if(self.s.replicaSetState.update(server)) {\n        // Primary lastIsMaster store it\n        if(server.lastIsMaster() && server.lastIsMaster().ismaster) {\n          self.ismaster = server.lastIsMaster();\n        }\n      }\n\n      // Add event handlers\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect'));\n      // SDAM Monitoring events\n      server.on('serverOpening', function(e) { self.emit('serverOpening', e); });\n      server.on('serverDescriptionChanged', function(e) { self.emit('serverDescriptionChanged', e); });\n      server.on('serverClosed', function(e) { self.emit('serverClosed', e); });\n      // Start connection\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  }\n\n  // Start all the servers\n  while(servers.length > 0) {\n    connect(servers.shift(), timeoutInterval++);\n  }\n}\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if(self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\n/**\n * Initiate server connect\n * @method\n * @param {array} [options.auth=null] Array of auth options to apply on connect\n */\nReplSet.prototype.connect = function(options) {\n  var self = this;\n  // Add any connect level options to the internal state\n  this.s.connectOptions = options || {};\n  // Set connecting state\n  stateTransition(this, CONNECTING);\n  // Create server instances\n  var servers = this.s.seedlist.map(function(x) {\n    return new Server(assign({}, self.s.options, x, {\n      authProviders: self.authProviders, reconnect:false, monitoring:false, inTopology: true\n    }, {\n      clientInfo: clone(self.s.clientInfo)\n    }));\n  });\n\n  // Error out as high availbility interval must be < than socketTimeout\n  if(this.s.options.socketTimeout > 0 && this.s.options.socketTimeout <= this.s.options.haInterval) {\n    return self.emit('error', new MongoError(f(\"haInterval [%s] MS must be set to less than socketTimeout [%s] MS\"\n      , this.s.options.haInterval, this.s.options.socketTimeout)));\n  }\n\n  // Emit the topology opening event\n  emitSDAMEvent(this, 'topologyOpening', { topologyId: this.id });\n  // Start all server connections\n  connectServers(self, servers);\n}\n\n/**\n * Destroy the server connection\n * @param {boolean} [options.force=false] Force destroy the pool\n * @method\n */\nReplSet.prototype.destroy = function(options) {\n  options = options || {};\n  // Transition state\n  stateTransition(this, DESTROYED);\n  // Clear out any monitoring process\n  if(this.haTimeoutId) clearTimeout(this.haTimeoutId);\n  // Destroy the replicaset\n  this.s.replicaSetState.destroy(options);\n  // Clear out authentication contexts\n  this.s.authenticationContexts = [];\n\n  // Destroy all connecting servers\n  this.s.connectingServers.forEach(function(x) {\n    x.destroy(options);\n  });\n\n  // Clear out all monitoring\n  for(var i = 0; i < this.intervalIds.length; i++) {\n    clearInterval(this.intervalIds[i]);\n    clearTimeout(this.intervalIds[i]);\n  }\n\n  // Reset list of intervalIds\n  this.intervalIds = [];\n\n  // Emit toplogy closing event\n  emitSDAMEvent(this, 'topologyClosed', { topologyId: this.id });\n}\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nReplSet.prototype.unref = function() {\n  // Transition state\n  stateTransition(this, UNREFERENCED);\n\n  this.s.replicaSetState.allServers().forEach(function(x) {\n    x.unref();\n  });\n\n  clearTimeout(this.haTimeoutId);\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nReplSet.prototype.lastIsMaster = function() {\n  // If secondaryOnlyConnectionAllowed and no primary but secondary\n  // return the secondaries ismaster result.\n  if (this.s.options.secondaryOnlyConnectionAllowed\n    && !this.s.replicaSetState.hasPrimary()\n    && this.s.replicaSetState.hasSecondary()) {\n      return this.s.replicaSetState.secondaries[0].lastIsMaster();\n    }\n\n  return this.s.replicaSetState.primary\n    ? this.s.replicaSetState.primary.lastIsMaster() : this.ismaster;\n}\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nReplSet.prototype.connections = function() {\n  var servers = this.s.replicaSetState.allServers();\n  var connections = [];\n  for(var i = 0; i < servers.length; i++) {\n    connections = connections.concat(servers[i].connections());\n  }\n\n  return connections;\n}\n\n/**\n * Figure out if the server is connected\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {boolean}\n */\nReplSet.prototype.isConnected = function(options) {\n  options = options || {};\n\n  // If we are authenticating signal not connected\n  // To avoid interleaving of operations\n  if(this.authenticating) return false;\n\n  // If we specified a read preference check if we are connected to something\n  // than can satisfy this\n  if(options.readPreference\n    && options.readPreference.equals(ReadPreference.secondary)) {\n    return this.s.replicaSetState.hasSecondary();\n  }\n\n  if(options.readPreference\n    && options.readPreference.equals(ReadPreference.primary)) {\n    return this.s.replicaSetState.hasPrimary();\n  }\n\n  if(options.readPreference\n    && options.readPreference.equals(ReadPreference.primaryPreferred)) {\n    return this.s.replicaSetState.hasSecondary() || this.s.replicaSetState.hasPrimary();\n  }\n\n  if(options.readPreference\n    && options.readPreference.equals(ReadPreference.secondaryPreferred)) {\n    return this.s.replicaSetState.hasSecondary() || this.s.replicaSetState.hasPrimary();\n  }\n\n  if(this.s.options.secondaryOnlyConnectionAllowed\n    && this.s.replicaSetState.hasSecondary()) {\n      return true;\n  }\n\n  return this.s.replicaSetState.hasPrimary();\n}\n\n/**\n * Figure out if the replicaset instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nReplSet.prototype.isDestroyed = function() {\n  return this.state == DESTROYED;\n}\n\n/**\n * Get server\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Server}\n */\nReplSet.prototype.getServer = function(options) {\n  // Ensure we have no options\n  options = options || {};\n  // Pick the right server baspickServerd on readPreference\n  var server = this.s.replicaSetState.pickServer(options.readPreference);\n  if(this.s.debug) this.emit('pickedServer', options.readPreference, server);\n  return server;\n}\n\n/**\n * Get a direct connection\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Connection}\n */\nReplSet.prototype.getConnection = function(options) {\n  var server = this.getServer(options);\n  if(server) return server.getConnection();\n}\n\n/**\n * Get all connected servers\n * @method\n * @return {Server[]}\n */\nReplSet.prototype.getServers = function() {\n  return this.s.replicaSetState.allServers();\n}\n\n//\n// Execute write operation\nvar executeWriteOperation = function(self, op, ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  // Ensure we have no options\n  options = options || {};\n\n  // No server returned we had an error\n  if(self.s.replicaSetState.primary == null) {\n    return callback(new MongoError(\"no primary server found\"));\n  }\n\n  // Execute the command\n  self.s.replicaSetState.primary[op](ns, ops, options, callback);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.insert = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  // Not connected but we have a disconnecthandler\n  if(!this.s.replicaSetState.hasPrimary() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  }\n\n  // Execute write operation\n  executeWriteOperation(this, 'insert', ns, ops, options, callback);\n}\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.update = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  // Not connected but we have a disconnecthandler\n  if(!this.s.replicaSetState.hasPrimary() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  }\n\n  // Execute write operation\n  executeWriteOperation(this, 'update', ns, ops, options, callback);\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.remove = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  // Not connected but we have a disconnecthandler\n  if(!this.s.replicaSetState.hasPrimary() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  }\n\n  // Execute write operation\n  executeWriteOperation(this, 'remove', ns, ops, options, callback);\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.command = function(ns, cmd, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  var self = this;\n\n  // Establish readPreference\n  var readPreference = options.readPreference ? options.readPreference : ReadPreference.primary;\n\n  // If the readPreference is primary and we have no primary, store it\n  if(readPreference.preference == 'primary' && !this.s.replicaSetState.hasPrimary() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  } else if(readPreference.preference == 'secondary' && !this.s.replicaSetState.hasSecondary() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  } else if(readPreference.preference != 'primary' && !this.s.replicaSetState.hasSecondary() && !this.s.replicaSetState.hasPrimary() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // Pick a server\n  var server = this.s.replicaSetState.pickServer(readPreference);\n  // We received an error, return it\n  if(!(server instanceof Server)) return callback(server);\n  // Emit debug event\n  if(self.s.debug) self.emit('pickedServer', ReadPreference.primary, server);\n\n  // No server returned we had an error\n  if(server == null) {\n    return callback(new MongoError(f(\"no server found that matches the provided readPreference %s\", readPreference)));\n  }\n\n  // Execute the command\n  server.command(ns, cmd, options, callback);\n}\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nReplSet.prototype.auth = function(mechanism, db) {\n  var allArgs = Array.prototype.slice.call(arguments, 0).slice(0);\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  var callback = args.pop();\n  var currentContextIndex = 0;\n\n  // If we don't have the mechanism fail\n  if(this.authProviders[mechanism] == null && mechanism != 'default') {\n    return callback(new MongoError(f(\"auth provider %s does not exist\", mechanism)));\n  }\n\n  // Are we already authenticating, throw\n  if(this.authenticating) {\n    return callback(new MongoError('authentication or logout allready in process'));\n  }\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(self.s.disconnectHandler != null) {\n    if(!self.s.replicaSetState.hasPrimary() && !self.s.options.secondaryOnlyConnectionAllowed) {\n      return self.s.disconnectHandler.add('auth', db, allArgs, {}, callback);\n    } else if(!self.s.replicaSetState.hasSecondary() && self.s.options.secondaryOnlyConnectionAllowed) {\n      return self.s.disconnectHandler.add('auth', db, allArgs, {}, callback);\n    }\n  }\n\n  // Set to authenticating\n  this.authenticating = true;\n  // All errors\n  var errors = [];\n\n  // Get all the servers\n  var servers = this.s.replicaSetState.allServers();\n  // No servers return\n  if(servers.length == 0) {\n    this.authenticating = false;\n    callback(null, true);\n  }\n\n  // Authenticate\n  function auth(server) {\n    // Arguments without a callback\n    var argsWithoutCallback = [mechanism, db].concat(args.slice(0));\n    // Create arguments\n    var finalArguments = argsWithoutCallback.concat([function(err) {\n      count = count - 1;\n      // Save all the errors\n      if(err) errors.push({name: server.name, err: err});\n      // We are done\n      if(count == 0) {\n        // Auth is done\n        self.authenticating = false;\n\n        // Return the auth error\n        if(errors.length) {\n          // Remove the entry from the stored authentication contexts\n          self.s.authenticationContexts.splice(currentContextIndex, 0);\n          // Return error\n          return callback(MongoError.create({\n            message: 'authentication fail', errors: errors\n          }), false);\n        }\n\n        // Successfully authenticated session\n        callback(null, self);\n      }\n    }]);\n\n    if(!server.lastIsMaster().arbiterOnly) {\n      // Execute the auth only against non arbiter servers\n      server.auth.apply(server, finalArguments);\n    } else {\n      // If we are authenticating against an arbiter just ignore it\n      finalArguments.pop()(null);\n    }\n  }\n\n  // Get total count\n  var count = servers.length;\n\n  // Save current context index\n  currentContextIndex = this.s.authenticationContexts.length;\n\n  // Store the auth context and return the last index\n  this.s.authenticationContexts.push([mechanism, db].concat(args.slice(0)));\n\n  // Authenticate against all servers\n  while(servers.length > 0) {\n    auth(servers.shift());\n  }\n}\n\n/**\n * Logout from a database\n * @method\n * @param {string} db The db we are logging out from\n * @param {authResultCallback} callback A callback function\n */\nReplSet.prototype.logout = function(dbName, callback) {\n  var self = this;\n  // Are we authenticating or logging out, throw\n  if(this.authenticating) {\n    throw new MongoError('authentication or logout allready in process');\n  }\n\n  // Ensure no new members are processed while logging out\n  this.authenticating = true;\n\n  // Remove from all auth providers (avoid any reaplication of the auth details)\n  var providers = Object.keys(this.authProviders);\n  for(var i = 0; i < providers.length; i++) {\n    this.authProviders[providers[i]].logout(dbName);\n  }\n\n  // Clear out any contexts associated with the db\n  self.s.authenticationContexts = self.s.authenticationContexts.filter(function(context) {\n    return context[1] !== dbName;\n  });\n\n  // Now logout all the servers\n  var servers = this.s.replicaSetState.allServers();\n  var count = servers.length;\n  if(count == 0) return callback();\n  var errors = [];\n\n  function logoutServer(_server, cb) {\n    _server.logout(dbName, function(err) {\n      if(err) errors.push({name: _server.name, err: err});\n      cb();\n    });\n  }\n\n  // Execute logout on all server instances\n  for(i = 0; i < servers.length; i++) {\n    logoutServer(servers[i], function() {\n      count = count - 1;\n\n      if(count == 0) {\n        // Do not block new operations\n        self.authenticating = false;\n        // If we have one or more errors\n        if(errors.length) return callback(MongoError.create({\n          message: f('logout failed against db %s', dbName), errors: errors\n        }), false);\n\n        // No errors\n        callback();\n      }\n    })\n  }\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.cursor = function(ns, cmd, cursorOptions) {\n  cursorOptions = cursorOptions || {};\n  var FinalCursor = cursorOptions.cursorFactory || this.s.Cursor;\n  return new FinalCursor(this.s.bson, ns, cmd, cursorOptions, this, this.s.options);\n}\n\n/**\n * A replset connect event, used to verify that the connection is up and running\n *\n * @event ReplSet#connect\n * @type {ReplSet}\n */\n\n/**\n * A replset reconnect event, used to verify that the topology reconnected\n *\n * @event ReplSet#reconnect\n * @type {ReplSet}\n */\n\n/**\n * A replset fullsetup event, used to signal that all topology members have been contacted.\n *\n * @event ReplSet#fullsetup\n * @type {ReplSet}\n */\n\n/**\n * A replset all event, used to signal that all topology members have been contacted.\n *\n * @event ReplSet#all\n * @type {ReplSet}\n */\n\n/**\n * A replset failed event, used to signal that initial replset connection failed.\n *\n * @event ReplSet#failed\n * @type {ReplSet}\n */\n\n/**\n * A server member left the replicaset\n *\n * @event ReplSet#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the replicaset\n *\n * @event ReplSet#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event ReplSet#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event ReplSet#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event ReplSet#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event ReplSet#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event ReplSet#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event ReplSet#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event ReplSet#serverHeartbeatStarted\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event ReplSet#serverHeartbeatFailed\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event ReplSet#serverHeartbeatSucceeded\n * @type {object}\n */\n\nmodule.exports = ReplSet;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/topologies/replset_state.js":"\"use strict\"\n\nvar inherits = require('util').inherits,\n  f = require('util').format,\n  EventEmitter = require('events').EventEmitter,\n  Logger = require('../connection/logger'),\n  ReadPreference = require('./read_preference'),\n  MongoError = require('../error');\n\nvar TopologyType = {\n  'Single': 'Single', 'ReplicaSetNoPrimary': 'ReplicaSetNoPrimary',\n  'ReplicaSetWithPrimary': 'ReplicaSetWithPrimary', 'Sharded': 'Sharded',\n  'Unknown': 'Unknown'\n};\n\nvar ServerType = {\n  'Standalone': 'Standalone', 'Mongos': 'Mongos', 'PossiblePrimary': 'PossiblePrimary',\n  'RSPrimary': 'RSPrimary', 'RSSecondary': 'RSSecondary', 'RSArbiter': 'RSArbiter',\n  'RSOther': 'RSOther', 'RSGhost': 'RSGhost', 'Unknown': 'Unknown'\n};\n\nvar ReplSetState = function(options) {\n  options = options || {};\n  // Add event listener\n  EventEmitter.call(this);\n  // Topology state\n  this.topologyType = TopologyType.ReplicaSetNoPrimary;\n  this.setName = options.setName;\n\n  // Server set\n  this.set = {};\n\n  // Unpacked options\n  this.id = options.id;\n  this.setName = options.setName;\n\n  // Replicaset logger\n  this.logger = options.logger || Logger('ReplSet', options);\n\n  // Server selection index\n  this.index = 0;\n  // Acceptable latency\n  this.acceptableLatency = options.acceptableLatency || 15;\n\n  // heartbeatFrequencyMS\n  this.heartbeatFrequencyMS = options.heartbeatFrequencyMS || 10000;\n\n  // Server side\n  this.primary = null;\n  this.secondaries = [];\n  this.arbiters = [];\n  this.passives = [];\n  this.ghosts = [];\n  // Current unknown hosts\n  this.unknownServers = [];\n  // In set status\n  this.set = {};\n  // Status\n  this.maxElectionId = null;\n  this.maxSetVersion = 0;\n  // Description of the Replicaset\n  this.replicasetDescription = {\n    \"topologyType\": \"Unknown\", \"servers\": []\n  };\n}\n\ninherits(ReplSetState, EventEmitter);\n\nReplSetState.prototype.hasPrimaryAndSecondary = function() {\n  return this.primary != null && this.secondaries.length > 0;\n}\n\nReplSetState.prototype.hasPrimaryOrSecondary = function() {\n  return this.hasPrimary() || this.hasSecondary();\n}\n\nReplSetState.prototype.hasPrimary = function() {\n  return this.primary != null;\n}\n\nReplSetState.prototype.hasSecondary = function() {\n  return this.secondaries.length > 0;\n}\n\nReplSetState.prototype.get = function(host) {\n  var servers = this.allServers();\n\n  for(var i = 0; i < servers.length; i++) {\n    if(servers[i].name.toLowerCase() === host.toLowerCase()) {\n      return servers[i];\n    }\n  }\n\n  return null;\n}\n\nReplSetState.prototype.allServers = function(options) {\n  options = options || {};\n  var servers = this.primary ? [this.primary] : [];\n  servers = servers.concat(this.secondaries);\n  if(!options.ignoreArbiters) servers = servers.concat(this.arbiters);\n  servers = servers.concat(this.passives);\n  return servers;\n}\n\nReplSetState.prototype.destroy = function(options) {\n  // Destroy all sockets\n  if(this.primary) this.primary.destroy(options);\n  this.secondaries.forEach(function(x) { x.destroy(options); });\n  this.arbiters.forEach(function(x) { x.destroy(options); });\n  this.passives.forEach(function(x) { x.destroy(options); });\n  this.ghosts.forEach(function(x) { x.destroy(options); });\n  // Clear out the complete state\n  this.secondaries = [];\n  this.arbiters = [];\n  this.passives = [];\n  this.ghosts = [];\n  this.unknownServers = [];\n  this.set = {};\n}\n\nReplSetState.prototype.remove = function(server, options) {\n  options = options || {};\n\n  // Get the server name and lowerCase it\n  var serverName = server.name.toLowerCase();\n\n  // Only remove if the current server is not connected\n  var servers = this.primary ? [this.primary] : [];\n  servers = servers.concat(this.secondaries);\n  servers = servers.concat(this.arbiters);\n  servers = servers.concat(this.passives);\n\n  // Check if it's active and this is just a failed connection attempt\n  for(var i = 0; i < servers.length; i++) {\n    if(!options.force\n      && servers[i].equals(server)\n      && servers[i].isConnected\n      && servers[i].isConnected()) {\n      return;\n    }\n  }\n\n  // If we have it in the set remove it\n  if(this.set[serverName]) {\n    this.set[serverName].type = ServerType.Unknown;\n    this.set[serverName].electionId = null;\n    this.set[serverName].setName = null;\n    this.set[serverName].setVersion = null;\n  }\n\n  // Remove type\n  var removeType = null;\n\n  // Remove from any lists\n  if(this.primary && this.primary.equals(server)) {\n    this.primary = null;\n    this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    removeType = 'primary';\n  }\n\n  // Remove from any other server lists\n  removeType = removeFrom(server, this.secondaries) ? 'secondary' : removeType;\n  removeType = removeFrom(server, this.arbiters) ? 'arbiter' : removeType;\n  removeType = removeFrom(server, this.passives) ? 'secondary' : removeType;\n  removeFrom(server, this.ghosts);\n  removeFrom(server, this.unknownServers);\n\n  // Push to unknownServers\n  this.unknownServers.push(serverName);\n\n  // Do we have a removeType\n  if(removeType) {\n    this.emit('left', removeType, server);\n  }\n}\n\nReplSetState.prototype.update = function(server) {\n  var self = this;\n  // Get the current ismaster\n  var ismaster = server.lastIsMaster();\n\n  // Get the server name and lowerCase it\n  var serverName = server.name.toLowerCase();\n\n  //\n  // Add any hosts\n  //\n  if(ismaster) {\n    // Join all the possible new hosts\n    var hosts = Array.isArray(ismaster.hosts) ? ismaster.hosts : [];\n    hosts = hosts.concat(Array.isArray(ismaster.arbiters) ? ismaster.arbiters : []);\n    hosts = hosts.concat(Array.isArray(ismaster.passives) ? ismaster.passives : []);\n    hosts = hosts.map(function(s) { return s.toLowerCase() });\n\n    // Add all hosts as unknownServers\n    for(var i = 0; i < hosts.length; i++) {\n      // Add to the list of unknown server\n      if(this.unknownServers.indexOf(hosts[i]) == -1\n        && (!this.set[hosts[i]] || this.set[hosts[i]].type == ServerType.Unknown)) {\n        this.unknownServers.push(hosts[i].toLowerCase());\n      }\n\n      if(!this.set[hosts[i]]) {\n        this.set[hosts[i]] = {\n          type: ServerType.Unknown,\n          electionId: null,\n          setName: null,\n          setVersion: null\n        }\n      }\n    }\n  }\n\n  //\n  // Unknown server\n  //\n  if(!ismaster && !inList(ismaster, server, this.unknownServers)) {\n    self.set[serverName] = {\n      type: ServerType.Unknown, setVersion: null, electionId: null, setName: null\n    }\n    // Update set information about the server instance\n    self.set[serverName].type = ServerType.Unknown;\n    self.set[serverName].electionId = ismaster ? ismaster.electionId : ismaster;\n    self.set[serverName].setName = ismaster ? ismaster.setName : ismaster;\n    self.set[serverName].setVersion = ismaster ? ismaster.setVersion : ismaster;\n\n    if(self.unknownServers.indexOf(server.name) == -1) {\n      self.unknownServers.push(serverName);\n    }\n\n    // Set the topology\n    return false;\n  }\n\n  //\n  // Is this a mongos\n  //\n  if(ismaster && ismaster.msg == 'isdbgrid') {\n    return false;\n  }\n\n  // A RSOther instance\n  if((ismaster.setName && ismaster.hidden)\n    || (ismaster.setName && !ismaster.ismaster && !ismaster.secondary && !ismaster.arbiterOnly && !ismaster.passive)) {\n    self.set[serverName] = {\n      type: ServerType.RSOther, setVersion: null,\n      electionId: null, setName: ismaster.setName\n    }\n    // Set the topology\n    this.topologyType = this.primary ? TopologyType.ReplicaSetWithPrimary : TopologyType.ReplicaSetNoPrimary;\n    if(ismaster.setName) this.setName = ismaster.setName;\n    return false;\n  }\n\n  // A RSGhost instance\n  if(ismaster.isreplicaset) {\n    self.set[serverName] = {\n      type: ServerType.RSGhost, setVersion: null,\n      electionId: null, setName: null\n    }\n\n    // Set the topology\n    this.topologyType = this.primary ? TopologyType.ReplicaSetWithPrimary : TopologyType.ReplicaSetNoPrimary;\n    if(ismaster.setName) this.setName = ismaster.setName;\n\n    // Set the topology\n    return false;\n  }\n\n  //\n  // Standalone server, destroy and return\n  //\n  if(ismaster && ismaster.ismaster && !ismaster.setName) {\n    this.topologyType = this.primary ? TopologyType.ReplicaSetWithPrimary : TopologyType.Unknown;\n    this.remove(server, {force:true});\n    return false;\n  }\n\n  //\n  // Server in maintanance mode\n  //\n  if(ismaster && !ismaster.ismaster && !ismaster.secondary && !ismaster.arbiterOnly) {\n    this.remove(server, {force:true});\n    return false;\n  }\n\n  //\n  // If the .me field does not match the passed in server\n  //\n  if(ismaster.me && ismaster.me.toLowerCase() != serverName) {\n    if(this.logger.isWarn()) {\n      this.logger.warn(f('the seedlist server was removed due to its address %s not matching its ismaster.me address %s', server.name, ismaster.me));\n    }\n\n    // Delete from the set\n    delete this.set[serverName];\n    // Delete unknown servers\n    removeFrom(server, self.unknownServers);\n\n    // Destroy the instance\n    server.destroy();\n\n    // Set the type of topology we have\n    if(this.primary && !this.primary.equals(server)) {\n      this.topologyType = TopologyType.ReplicaSetWithPrimary;\n    } else {\n      this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    }\n\n    //\n    // We have a potential primary\n    //\n    if(!this.primary && ismaster.primary) {\n      this.set[ismaster.primary.toLowerCase()] = {\n        type: ServerType.PossiblePrimary,\n        setName: null,\n        electionId: null,\n        setVersion: null,\n      }\n    }\n\n    return false;\n  }\n\n  //\n  // Primary handling\n  //\n  if(!this.primary && ismaster.ismaster && ismaster.setName) {\n    var ismasterElectionId = server.lastIsMaster().electionId;\n    if(this.setName && this.setName != ismaster.setName) {\n      this.topologyType = TopologyType.ReplicaSetNoPrimary;\n      return new MongoError(f('setName from ismaster does not match provided connection setName [%s] != [%s]', ismaster.setName, this.setName));\n    }\n\n    if(!this.maxElectionId && ismasterElectionId) {\n      this.maxElectionId = ismasterElectionId;\n    } else if(this.maxElectionId && ismasterElectionId) {\n      var result = compareObjectIds(this.maxElectionId, ismasterElectionId);\n      // Get the electionIds\n      var ismasterSetVersion = server.lastIsMaster().setVersion;\n\n      if(result == 1) {\n        this.topologyType = TopologyType.ReplicaSetNoPrimary;\n        return false;\n      } else if(result == 0 && ismasterSetVersion) {\n        if(ismasterSetVersion < this.maxSetVersion) {\n          this.topologyType = TopologyType.ReplicaSetNoPrimary;\n          return false;\n        }\n      }\n\n      this.maxSetVersion = ismasterSetVersion;\n      this.maxElectionId = ismasterElectionId;\n    }\n\n    // Hande normalization of server names\n    var normalizedHosts = ismaster.hosts.map(function(x) { return x.toLowerCase() });\n    var locationIndex = normalizedHosts.indexOf(serverName);\n\n    // Validate that the server exists in the host list\n    if(locationIndex != -1) {\n      self.primary = server;\n      self.set[serverName] = {\n        type: ServerType.RSPrimary,\n        setVersion: ismaster.setVersion,\n        electionId: ismaster.electionId,\n        setName: ismaster.setName\n      }\n\n      // Set the topology\n      this.topologyType = TopologyType.ReplicaSetWithPrimary;\n      if(ismaster.setName) this.setName = ismaster.setName;\n      removeFrom(server, self.unknownServers);\n      removeFrom(server, self.secondaries);\n      removeFrom(server, self.passives);\n      self.emit('joined', 'primary', server);\n    } else {\n      this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    }\n\n    emitTopologyDescriptionChanged(self);\n    return true;\n  } else if(ismaster.ismaster && ismaster.setName) {\n    // Get the electionIds\n    var currentElectionId = self.set[self.primary.name.toLowerCase()].electionId;\n    var currentSetVersion = self.set[self.primary.name.toLowerCase()].setVersion;\n    var currentSetName = self.set[self.primary.name.toLowerCase()].setName;\n    ismasterElectionId = server.lastIsMaster().electionId;\n    ismasterSetVersion = server.lastIsMaster().setVersion;\n    var ismasterSetName = server.lastIsMaster().setName;\n\n    // Is it the same server instance\n    if(this.primary.equals(server)\n      && currentSetName == ismasterSetName) {\n        return false;\n    }\n\n    // If we do not have the same rs name\n    if(currentSetName && currentSetName != ismasterSetName) {\n      if(!this.primary.equals(server)) {\n        this.topologyType = TopologyType.ReplicaSetWithPrimary;\n      } else {\n        this.topologyType = TopologyType.ReplicaSetNoPrimary;\n      }\n\n      return false;\n    }\n\n    // Check if we need to replace the server\n    if(currentElectionId && ismasterElectionId) {\n      result = compareObjectIds(currentElectionId, ismasterElectionId);\n\n      if(result == 1) {\n        return false;\n      } else if(result == 0 && (currentSetVersion > ismasterSetVersion)) {\n        return false;\n      }\n    } else if(!currentElectionId && ismasterElectionId\n      && ismasterSetVersion) {\n        if(ismasterSetVersion < this.maxSetVersion) {\n          return false;\n        }\n    }\n\n    if(!this.maxElectionId && ismasterElectionId) {\n      this.maxElectionId = ismasterElectionId;\n    } else if(this.maxElectionId && ismasterElectionId) {\n      result = compareObjectIds(this.maxElectionId, ismasterElectionId);\n\n      if(result == 1) {\n        return false;\n      } else if(result == 0 && currentSetVersion && ismasterSetVersion) {\n        if(ismasterSetVersion < this.maxSetVersion) {\n          return false;\n        }\n      } else {\n        if(ismasterSetVersion < this.maxSetVersion) {\n          return false;\n        }\n      }\n\n      this.maxElectionId = ismasterElectionId;\n      this.maxSetVersion = ismasterSetVersion;\n    } else {\n      this.maxSetVersion = ismasterSetVersion;\n    }\n\n    // Modify the entry to unknown\n    self.set[self.primary.name.toLowerCase()] = {\n      type: ServerType.Unknown, setVersion: null,\n      electionId: null, setName: null\n    }\n\n    // Signal primary left\n    self.emit('left', 'primary', this.primary);\n    // Destroy the instance\n    self.primary.destroy();\n    // Set the new instance\n    self.primary = server;\n    // Set the set information\n    self.set[serverName] = {\n      type: ServerType.RSPrimary, setVersion: ismaster.setVersion,\n      electionId: ismaster.electionId, setName: ismaster.setName\n    }\n\n    // Set the topology\n    this.topologyType = TopologyType.ReplicaSetWithPrimary;\n    if(ismaster.setName) this.setName = ismaster.setName;\n    removeFrom(server, self.unknownServers);\n    removeFrom(server, self.secondaries);\n    removeFrom(server, self.passives);\n    self.emit('joined', 'primary', server);\n    emitTopologyDescriptionChanged(self);\n    return true;\n  }\n\n  // A possible instance\n  if(!this.primary && ismaster.primary) {\n    self.set[ismaster.primary.toLowerCase()] = {\n      type: ServerType.PossiblePrimary, setVersion: null,\n      electionId: null, setName: null\n    }\n  }\n\n  //\n  // Secondary handling\n  //\n  if(ismaster.secondary && ismaster.setName\n    && !inList(ismaster, server, this.secondaries)\n    && this.setName && this.setName == ismaster.setName) {\n    addToList(self, ServerType.RSSecondary, ismaster, server, this.secondaries);\n    // Set the topology\n    this.topologyType = this.primary ? TopologyType.ReplicaSetWithPrimary : TopologyType.ReplicaSetNoPrimary;\n    if(ismaster.setName) this.setName = ismaster.setName;\n    removeFrom(server, self.unknownServers);\n\n    // Remove primary\n    if(this.primary\n      && this.primary.name.toLowerCase() == serverName) {\n        server.destroy();\n        this.primary = null;\n        self.emit('left', 'primary', server);\n    }\n\n    self.emit('joined', 'secondary', server);\n    emitTopologyDescriptionChanged(self);\n    return true;\n  }\n\n  //\n  // Arbiter handling\n  //\n  if(ismaster.arbiterOnly && ismaster.setName\n    && !inList(ismaster, server, this.arbiters)\n    && this.setName && this.setName == ismaster.setName) {\n    addToList(self, ServerType.RSArbiter, ismaster, server, this.arbiters);\n    // Set the topology\n    this.topologyType = this.primary ? TopologyType.ReplicaSetWithPrimary : TopologyType.ReplicaSetNoPrimary;\n    if(ismaster.setName) this.setName = ismaster.setName;\n    removeFrom(server, self.unknownServers);\n    self.emit('joined', 'arbiter', server);\n    emitTopologyDescriptionChanged(self);\n    return true;\n  }\n\n  //\n  // Passive handling\n  //\n  if(ismaster.passive && ismaster.setName\n    && !inList(ismaster, server, this.passives)\n    && this.setName && this.setName == ismaster.setName) {\n    addToList(self, ServerType.RSSecondary, ismaster, server, this.passives);\n    // Set the topology\n    this.topologyType = this.primary ? TopologyType.ReplicaSetWithPrimary : TopologyType.ReplicaSetNoPrimary;\n    if(ismaster.setName) this.setName = ismaster.setName;\n    removeFrom(server, self.unknownServers);\n\n    // Remove primary\n    if(this.primary\n      && this.primary.name.toLowerCase() == serverName) {\n        server.destroy();\n        this.primary = null;\n        self.emit('left', 'primary', server);\n    }\n\n    self.emit('joined', 'secondary', server);\n    emitTopologyDescriptionChanged(self);\n    return true;\n  }\n\n  //\n  // Remove the primary\n  //\n  if(this.set[serverName] && this.set[serverName].type == ServerType.RSPrimary) {\n    self.emit('left', 'primary', this.primary);\n    this.primary.destroy();\n    this.primary = null;\n    this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    return false;\n  }\n\n  this.topologyType = this.primary ? TopologyType.ReplicaSetWithPrimary : TopologyType.ReplicaSetNoPrimary;\n  return false;\n}\n\n/**\n * Recalculate single server max staleness\n * @method\n */\nReplSetState.prototype.updateServerMaxStaleness = function(server, haInterval) {\n  // Locate the max secondary lastwrite\n  var max = 0;\n  // Go over all secondaries\n  for(var i = 0; i < this.secondaries.length; i++) {\n    max = Math.max(max, this.secondaries[i].lastWriteDate);\n  }\n\n  // Perform this servers staleness calculation\n  if(server.ismaster.maxWireVersion >= 5\n    && server.ismaster.secondary\n    && this.hasPrimary()) {\n    server.staleness = (server.lastUpdateTime - server.lastWriteDate)\n      - (this.primary.lastUpdateTime - this.primary.lastWriteDate)\n      + haInterval;\n  } else if(server.ismaster.maxWireVersion >= 5\n    && server.ismaster.secondary){\n    server.staleness = max - server.lastWriteDate + haInterval;\n  }\n}\n\n/**\n * Recalculate all the stalness values for secodaries\n * @method\n */\nReplSetState.prototype.updateSecondariesMaxStaleness = function(haInterval) {\n  for(var i = 0; i < this.secondaries.length; i++) {\n    this.updateServerMaxStaleness(this.secondaries[i], haInterval);\n  }\n}\n\n/**\n * Pick a server by the passed in ReadPreference\n * @method\n * @param {ReadPreference} readPreference The ReadPreference instance to use\n */\nReplSetState.prototype.pickServer = function(readPreference) {\n  // If no read Preference set to primary by default\n  readPreference = readPreference || ReadPreference.primary;\n\n  // maxStalenessSeconds is not allowed with a primary read\n  if(readPreference.preference == 'primary' && readPreference.maxStalenessSeconds != null) {\n    return new MongoError('primary readPreference incompatible with maxStalenessSeconds');\n  }\n\n  // Check if we have any non compatible servers for maxStalenessSeconds\n  var allservers = this.primary ? [this.primary] : [];\n  allservers = allservers.concat(this.secondaries);\n\n  // Does any of the servers not support the right wire protocol version\n  // for maxStalenessSeconds when maxStalenessSeconds specified on readPreference. Then error out\n  if(readPreference.maxStalenessSeconds != null) {\n    for(var i = 0; i < allservers.length; i++) {\n      if(allservers[i].ismaster.maxWireVersion < 5) {\n        return new MongoError('maxStalenessSeconds not supported by at least one of the replicaset members');\n      }\n    }\n  }\n\n  // Do we have the nearest readPreference\n  if(readPreference.preference == 'nearest' && readPreference.maxStalenessSeconds == null) {\n    return pickNearest(this, readPreference);\n  } else if(readPreference.preference == 'nearest' && readPreference.maxStalenessSeconds != null) {\n    return pickNearestMaxStalenessSeconds(this, readPreference);\n  }\n\n  // Get all the secondaries\n  var secondaries = this.secondaries;\n\n  // Check if we can satisfy and of the basic read Preferences\n  if(readPreference.equals(ReadPreference.secondary)\n    && secondaries.length == 0) {\n      return new MongoError(\"no secondary server available\");\n    }\n\n  if(readPreference.equals(ReadPreference.secondaryPreferred)\n    && secondaries.length == 0\n    && this.primary == null) {\n      return new MongoError(\"no secondary or primary server available\");\n    }\n\n  if(readPreference.equals(ReadPreference.primary)\n    && this.primary == null) {\n      return new MongoError(\"no primary server available\");\n    }\n\n  // Secondary preferred or just secondaries\n  if(readPreference.equals(ReadPreference.secondaryPreferred)\n    || readPreference.equals(ReadPreference.secondary)) {\n\n    if(secondaries.length > 0 && readPreference.maxStalenessSeconds == null) {\n      // Pick nearest of any other servers available\n      var server = pickNearest(this, readPreference);\n      // No server in the window return primary\n      if(server) {\n        return server;\n      }\n    } else if(secondaries.length > 0 && readPreference.maxStalenessSeconds != null) {\n      // Pick nearest of any other servers available\n      server = pickNearestMaxStalenessSeconds(this, readPreference);\n      // No server in the window return primary\n      if(server) {\n        return server;\n      }\n    }\n\n    if(readPreference.equals(ReadPreference.secondaryPreferred)){\n      return this.primary;\n    }\n\n    return null;\n  }\n\n  // Primary preferred\n  if(readPreference.equals(ReadPreference.primaryPreferred)) {\n    server = null;\n\n    // We prefer the primary if it's available\n    if(this.primary) {\n      return this.primary;\n    }\n\n    // Pick a secondary\n    if(secondaries.length > 0 && readPreference.maxStalenessSeconds == null) {\n      server = pickNearest(this, readPreference);\n    } else if(secondaries.length > 0 && readPreference.maxStalenessSeconds != null) {\n      server = pickNearestMaxStalenessSeconds(this, readPreference);\n    }\n\n    //  Did we find a server\n    if(server) return server;\n  }\n\n  // Return the primary\n  return this.primary;\n}\n\n//\n// Filter serves by tags\nvar filterByTags = function(readPreference, servers) {\n  if(readPreference.tags == null) return servers;\n  var filteredServers = [];\n  var tagsArray = Array.isArray(readPreference.tags) ? readPreference.tags : [readPreference.tags];\n\n  // Iterate over the tags\n  for(var j = 0; j < tagsArray.length; j++) {\n    var tags = tagsArray[j];\n\n    // Iterate over all the servers\n    for(var i = 0; i < servers.length; i++) {\n      var serverTag = servers[i].lastIsMaster().tags || {};\n\n      // Did we find the a matching server\n      var found = true;\n      // Check if the server is valid\n      for(var name in tags) {\n        if(serverTag[name] != tags[name]) {\n          found = false;\n        }\n      }\n\n      // Add to candidate list\n      if(found) {\n        filteredServers.push(servers[i]);\n      }\n    }\n  }\n\n  // Returned filtered servers\n  return filteredServers;\n}\n\nfunction pickNearestMaxStalenessSeconds(self, readPreference) {\n  // Only get primary and secondaries as seeds\n  var servers = [];\n  var heartbeatFrequencyMS = self.heartbeatFrequencyMS;\n\n  // Get the maxStalenessMS\n  var maxStalenessMS = readPreference.maxStalenessSeconds * 1000;\n\n  // Check if the maxStalenessMS > 90 seconds\n  if(maxStalenessMS < 90 * 1000) {\n    return new MongoError('maxStalenessSeconds must be set to at least 90 seconds');\n  }\n\n  // Add primary to list if not a secondary read preference\n  if(self.primary && readPreference.preference != 'secondary') {\n    servers.push(self.primary);\n  }\n\n  // Add all the secondaries\n  for(var i = 0; i < self.secondaries.length; i++) {\n    servers.push(self.secondaries[i]);\n  }\n\n  // Filter by tags\n  servers = filterByTags(readPreference, servers);\n\n  //\n  // Locate lowest time (picked servers are lowest time + acceptable Latency margin)\n  // var lowest = servers.length > 0 ? servers[0].lastIsMasterMS : 0;\n\n  // Filter by latency\n  servers = servers.filter(function(s) {\n    return s.staleness <= maxStalenessMS;\n  });\n\n  // Sort by time\n  servers.sort(function(a, b) {\n    // return a.time > b.time;\n    return a.lastIsMasterMS > b.lastIsMasterMS\n  });\n\n  // No servers, default to primary\n  if(servers.length == 0) {\n    return null\n  }\n\n  // Ensure index does not overflow the number of available servers\n  self.index = self.index % servers.length;\n\n  // Get the server\n  var server = servers[self.index];\n  // Add to the index\n  self.index = self.index + 1;\n  // Return the first server of the sorted and filtered list\n  return server;\n}\n\nfunction pickNearest(self, readPreference) {\n  // Only get primary and secondaries as seeds\n  var servers = [];\n\n  // Add primary to list if not a secondary read preference\n  if(self.primary && readPreference.preference != 'secondary') {\n    servers.push(self.primary);\n  }\n\n  // Add all the secondaries\n  for(var i = 0; i < self.secondaries.length; i++) {\n    servers.push(self.secondaries[i]);\n  }\n\n  // Filter by tags\n  servers = filterByTags(readPreference, servers);\n\n  // Sort by time\n  servers.sort(function(a, b) {\n    // return a.time > b.time;\n    return a.lastIsMasterMS > b.lastIsMasterMS\n  });\n\n  // Locate lowest time (picked servers are lowest time + acceptable Latency margin)\n  var lowest = servers.length > 0 ? servers[0].lastIsMasterMS : 0;\n\n  // Filter by latency\n  servers = servers.filter(function(s) {\n    return s.lastIsMasterMS <= lowest + self.acceptableLatency;\n  });\n\n  // No servers, default to primary\n  if(servers.length == 0) {\n    return null\n  }\n\n  // Ensure index does not overflow the number of available servers\n  self.index = self.index % servers.length;\n  // Get the server\n  var server = servers[self.index];\n  // Add to the index\n  self.index = self.index + 1;\n  // Return the first server of the sorted and filtered list\n  return server;\n}\n\nfunction inList(ismaster, server, list) {\n  for(var i = 0; i < list.length; i++) {\n    if(list[i] && list[i].name\n      && list[i].name.toLowerCase() == server.name.toLowerCase()) return true;\n  }\n\n  return false;\n}\n\nfunction addToList(self, type, ismaster, server, list) {\n  var serverName = server.name.toLowerCase();\n  // Update set information about the server instance\n  self.set[serverName].type = type;\n  self.set[serverName].electionId = ismaster ? ismaster.electionId : ismaster;\n  self.set[serverName].setName = ismaster ? ismaster.setName : ismaster;\n  self.set[serverName].setVersion = ismaster ? ismaster.setVersion : ismaster;\n  // Add to the list\n  list.push(server);\n}\n\nfunction compareObjectIds(id1, id2) {\n  var a = new Buffer(id1.toHexString(), 'hex');\n  var b = new Buffer(id2.toHexString(), 'hex');\n\n  if(a === b) {\n    return 0;\n  }\n\n  if(typeof Buffer.compare === 'function') {\n    return Buffer.compare(a, b);\n  }\n\n  var x = a.length;\n  var y = b.length;\n  var len = Math.min(x, y);\n\n  for (var i = 0; i < len; i++) {\n    if (a[i] !== b[i]) {\n      break;\n    }\n  }\n\n  if (i !== len) {\n    x = a[i];\n    y = b[i];\n  }\n\n  return x < y ? -1 : y < x ? 1 : 0;\n}\n\nfunction removeFrom(server, list) {\n  for(var i = 0; i < list.length; i++) {\n    if(list[i].equals && list[i].equals(server)) {\n      list.splice(i, 1);\n      return true;\n    } else if(typeof list[i] == 'string'\n      && list[i].toLowerCase() == server.name.toLowerCase()) {\n        list.splice(i, 1);\n        return true;\n    }\n  }\n\n  return false;\n}\n\nfunction emitTopologyDescriptionChanged(self) {\n  if(self.listeners('topologyDescriptionChanged').length > 0) {\n    var topology = 'Unknown';\n    var setName = self.setName;\n\n    if(self.hasPrimaryAndSecondary()) {\n      topology = 'ReplicaSetWithPrimary';\n    } else if(!self.hasPrimary() && self.hasSecondary()) {\n      topology = 'ReplicaSetNoPrimary';\n    }\n\n    // Generate description\n    var description = {\n      topologyType: topology,\n      setName: setName,\n      servers: []\n    }\n\n    // Add the primary to the list\n    if(self.hasPrimary()) {\n      var desc = self.primary.getDescription();\n      desc.type = 'RSPrimary';\n      description.servers.push(desc);\n    }\n\n    // Add all the secondaries\n    description.servers = description.servers.concat(self.secondaries.map(function(x) {\n      var description = x.getDescription();\n      description.type = 'RSSecondary';\n      return description;\n    }));\n\n    // Add all the arbiters\n    description.servers = description.servers.concat(self.arbiters.map(function(x) {\n      var description = x.getDescription();\n      description.type = 'RSArbiter';\n      return description;\n    }));\n\n    // Add all the passives\n    description.servers = description.servers.concat(self.passives.map(function(x) {\n      var description = x.getDescription();\n      description.type = 'RSSecondary';\n      return description;\n    }));\n\n    // Create the result\n    var result = {\n      topologyId: self.id,\n      previousDescription: self.replicasetDescription,\n      newDescription: description,\n      diff: diff(self.replicasetDescription, description)\n    };\n\n    // Emit the topologyDescription change\n    self.emit('topologyDescriptionChanged', result);\n\n    // Set the new description\n    self.replicasetDescription = description;\n  }\n}\n\nfunction diff(previous, current) {\n  // Difference document\n  var diff = {\n    servers: []\n  }\n\n  // Previous entry\n  if(!previous) {\n    previous = { servers: [] };\n  }\n\n  // Got through all the servers\n  for(var i = 0; i < previous.servers.length; i++) {\n    var prevServer = previous.servers[i];\n\n    // Go through all current servers\n    for(var j = 0; j < current.servers.length; j++) {\n      var currServer = current.servers[j];\n\n      // Matching server\n      if(prevServer.address.toLowerCase() === currServer.address.toLowerCase()) {\n        // We had a change in state\n        if(prevServer.type != currServer.type) {\n          diff.servers.push({\n            address: prevServer.address,\n            from: prevServer.type,\n            to: currServer.type\n          });\n        }\n      }\n    }\n  }\n\n  // Return difference\n  return diff;\n}\n\nmodule.exports = ReplSetState;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/topologies/mongos.js":"\"use strict\"\n\nvar inherits = require('util').inherits,\n  f = require('util').format,\n  EventEmitter = require('events').EventEmitter,\n  BasicCursor = require('../cursor'),\n  Logger = require('../connection/logger'),\n  retrieveBSON = require('../connection/utils').retrieveBSON,\n  MongoError = require('../error'),\n  Server = require('./server'),\n  assign = require('./shared').assign,\n  clone = require('./shared').clone,\n  cloneOptions = require('./shared').cloneOptions,\n  createClientInfo = require('./shared').createClientInfo;\n\nvar BSON = retrieveBSON();\n\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n *\n * @example\n * var Mongos = require('mongodb-core').Mongos\n *   , ReadPreference = require('mongodb-core').ReadPreference\n *   , assert = require('assert');\n *\n * var server = new Mongos([{host: 'localhost', port: 30000}]);\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   server.destroy();\n * });\n *\n * // Start connecting\n * server.connect();\n */\n\nvar MongoCR = require('../auth/mongocr')\n  , X509 = require('../auth/x509')\n  , Plain = require('../auth/plain')\n  , GSSAPI = require('../auth/gssapi')\n  , SSPI = require('../auth/sspi')\n  , ScramSHA1 = require('../auth/scram');\n\n//\n// States\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYED = 'destroyed';\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    'disconnected': [CONNECTING, DESTROYED, DISCONNECTED],\n    'connecting': [CONNECTING, DESTROYED, CONNECTED, DISCONNECTED],\n    'connected': [CONNECTED, DISCONNECTED, DESTROYED, UNREFERENCED],\n    'unreferenced': [UNREFERENCED, DESTROYED],\n    'destroyed': [DESTROYED]\n  }\n\n  // Get current state\n  var legalStates = legalTransitions[self.state];\n  if(legalStates && legalStates.indexOf(newState) != -1) {\n    self.state = newState;\n  } else {\n    self.logger.error(f('Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]'\n      , self.id, self.state, newState, legalStates));\n  }\n}\n\n//\n// ReplSet instance id\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n\n/**\n * Creates a new Mongos instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @return {Mongos} A cursor instance\n * @fires Mongos#connect\n * @fires Mongos#reconnect\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#failed\n * @fires Mongos#fullsetup\n * @fires Mongos#all\n * @fires Mongos#serverHeartbeatStarted\n * @fires Mongos#serverHeartbeatSucceeded\n * @fires Mongos#serverHeartbeatFailed\n * @fires Mongos#topologyOpening\n * @fires Mongos#topologyClosed\n * @fires Mongos#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar Mongos = function(seedlist, options) {\n  options = options || {};\n\n  // Get replSet Id\n  this.id = id++;\n\n  // Internal state\n  this.s = {\n    options: assign({}, options),\n    // BSON instance\n    bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128,\n      BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey,\n      BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n    // Factory overrides\n    Cursor: options.cursorFactory || BasicCursor,\n    // Logger instance\n    logger: Logger('Mongos', options),\n    // Seedlist\n    seedlist: seedlist,\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug == 'boolean' ? options.debug : false,\n    // localThresholdMS\n    localThresholdMS: options.localThresholdMS || 15,\n    // Client info\n    clientInfo: createClientInfo(options),\n    // Authentication context\n    authenticationContexts: [],\n  }\n\n  // Set the client info\n  this.s.options.clientInfo = createClientInfo(options);\n\n  // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n  if(this.s.logger.isWarn()\n    && this.s.options.socketTimeout != 0\n    && this.s.options.socketTimeout < this.s.haInterval) {\n      this.s.logger.warn(f('warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts'\n        , this.s.options.socketTimeout, this.s.haInterval));\n  }\n\n  // All the authProviders\n  this.authProviders = options.authProviders || {\n      'mongocr': new MongoCR(this.s.bson), 'x509': new X509(this.s.bson)\n    , 'plain': new Plain(this.s.bson), 'gssapi': new GSSAPI(this.s.bson)\n    , 'sspi': new SSPI(this.s.bson), 'scram-sha-1': new ScramSHA1(this.s.bson)\n  }\n\n  // Disconnected state\n  this.state = DISCONNECTED;\n\n  // Current proxies we are connecting to\n  this.connectingProxies = [];\n  // Currently connected proxies\n  this.connectedProxies = [];\n  // Disconnected proxies\n  this.disconnectedProxies = [];\n  // Are we authenticating\n  this.authenticating = false;\n  // Index of proxy to run operations against\n  this.index = 0;\n  // High availability timeout id\n  this.haTimeoutId = null;\n  // Last ismaster\n  this.ismaster = null;\n\n  // Add event listener\n  EventEmitter.call(this);\n}\n\ninherits(Mongos, EventEmitter);\n\nObject.defineProperty(Mongos.prototype, 'type', {\n  enumerable:true, get: function() { return 'mongos'; }\n});\n\nObject.defineProperty(Mongos.prototype, 'parserType', {\n  enumerable:true, get: function() {\n    return BSON.native ? \"c++\" : \"js\";\n  }\n});\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if(self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\n/**\n * Initiate server connect\n * @method\n * @param {array} [options.auth=null] Array of auth options to apply on connect\n */\nMongos.prototype.connect = function(options) {\n  var self = this;\n  // Add any connect level options to the internal state\n  this.s.connectOptions = options || {};\n  // Set connecting state\n  stateTransition(this, CONNECTING);\n  // Create server instances\n  var servers = this.s.seedlist.map(function(x) {\n    return new Server(assign({}, self.s.options, x, {\n      authProviders: self.authProviders, reconnect:false, monitoring:false, inTopology: true\n    }, {\n      clientInfo: clone(self.s.clientInfo)\n    }));\n  });\n\n  // Emit the topology opening event\n  emitSDAMEvent(this, 'topologyOpening', { topologyId: this.id });\n\n  // Start all server connections\n  connectProxies(self, servers);\n}\n\nfunction handleEvent(self) {\n  return function() {\n    if(self.state == DESTROYED) return;\n    // Move to list of disconnectedProxies\n    moveServerFrom(self.connectedProxies, self.disconnectedProxies, this);\n    // Emit the left signal\n    self.emit('left', 'mongos', this);\n  }\n}\n\nfunction handleInitialConnectEvent(self, event) {\n  return function() {\n    var _this = this;\n\n    // Destroy the instance\n    if(self.state == DESTROYED) {\n      // Move from connectingProxies\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      return this.destroy();\n    }\n\n    // Check the type of server\n    if(event == 'connect') {\n      // Do we have authentication contexts that need to be applied\n      applyAuthenticationContexts(self, _this, function() {\n        // Get last known ismaster\n        self.ismaster = _this.lastIsMaster();\n\n        // Is this not a proxy, remove t\n        if(self.ismaster.msg == 'isdbgrid') {\n          // Add to the connectd list\n          for(var i = 0; i < self.connectedProxies.length; i++) {\n            if(self.connectedProxies[i].name == _this.name) {\n              // Move from connectingProxies\n              moveServerFrom(self.connectingProxies, self.disconnectedProxies, _this);\n              _this.destroy();\n              return self.emit('failed', _this);\n            }\n          }\n\n          // Remove the handlers\n          for(i = 0; i < handlers.length; i++) {\n            _this.removeAllListeners(handlers[i]);\n          }\n\n          // Add stable state handlers\n          _this.on('error', handleEvent(self, 'error'));\n          _this.on('close', handleEvent(self, 'close'));\n          _this.on('timeout', handleEvent(self, 'timeout'));\n          _this.on('parseError', handleEvent(self, 'parseError'));\n\n          // Move from connecting proxies connected\n          moveServerFrom(self.connectingProxies, self.connectedProxies, _this);\n          // Emit the joined event\n          self.emit('joined', 'mongos', _this);\n        } else {\n\n          // Print warning if we did not find a mongos proxy\n          if(self.s.logger.isWarn()) {\n            var message = 'expected mongos proxy, but found replicaset member mongod for server %s';\n            // We have a standalone server\n            if(!self.ismaster.hosts) {\n              message = 'expected mongos proxy, but found standalone mongod for server %s';\n            }\n\n            self.s.logger.warn(f(message, _this.name));\n          }\n\n          // This is not a mongos proxy, remove it completely\n          removeProxyFrom(self.connectingProxies, _this);\n          // Emit the left event\n          self.emit('left', 'server', _this);\n          // Emit failed event\n          self.emit('failed', _this);\n        }\n      });\n    } else {\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      // Emit the left event\n      self.emit('left', 'mongos', this);\n      // Emit failed event\n      self.emit('failed', this);\n    }\n\n    // Trigger topologyMonitor\n    if(self.connectingProxies.length == 0) {\n      // Emit connected if we are connected\n      if(self.connectedProxies.length > 0) {\n        // Set the state to connected\n        stateTransition(self, CONNECTED);\n        // Emit the connect event\n        self.emit('connect', self);\n        self.emit('fullsetup', self);\n        self.emit('all', self);\n      } else if(self.disconnectedProxies.length == 0) {\n        // Print warning if we did not find a mongos proxy\n        if(self.s.logger.isWarn()) {\n          self.s.logger.warn(f('no mongos proxies found in seed list, did you mean to connect to a replicaset'));\n        }\n\n        // Emit the error that no proxies were found\n        return self.emit('error', new MongoError('no mongos proxies found in seed list'));\n      }\n\n      // Topology monitor\n      topologyMonitor(self, {firstConnect:true});\n    }\n  };\n}\n\nfunction connectProxies(self, servers) {\n  // Update connectingProxies\n  self.connectingProxies = self.connectingProxies.concat(servers);\n\n  // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n  var timeoutInterval = 0;\n\n  function connect(server, timeoutInterval) {\n    setTimeout(function() {\n      // Add event handlers\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect'));\n      // SDAM Monitoring events\n      server.on('serverOpening', function(e) { self.emit('serverOpening', e); });\n      server.on('serverDescriptionChanged', function(e) { self.emit('serverDescriptionChanged', e); });\n      server.on('serverClosed', function(e) { self.emit('serverClosed', e); });\n      // Start connection\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  }\n  // Start all the servers\n  while(servers.length > 0) {\n    connect(servers.shift(), timeoutInterval++);\n  }\n}\n\nfunction pickProxy(self) {\n  // Get the currently connected Proxies\n  var connectedProxies = self.connectedProxies.slice(0);\n\n  // Set lower bound\n  var lowerBoundLatency = Number.MAX_VALUE;\n\n  // Determine the lower bound for the Proxies\n  for(var i = 0; i < connectedProxies.length; i++) {\n    if(connectedProxies[i].lastIsMasterMS < lowerBoundLatency) {\n      lowerBoundLatency = connectedProxies[i].lastIsMasterMS;\n    }\n  }\n\n  // Filter out the possible servers\n  connectedProxies = connectedProxies.filter(function(server) {\n    if((server.lastIsMasterMS <= (lowerBoundLatency + self.s.localThresholdMS))\n      && server.isConnected()) {\n      return true;\n    }\n  });\n\n  // We have no connectedProxies pick first of the connected ones\n  if(connectedProxies.length == 0) {\n    return self.connectedProxies[0];\n  }\n\n  // Get proxy\n  var proxy = connectedProxies[self.index % connectedProxies.length];\n  // Update the index\n  self.index = (self.index + 1) % connectedProxies.length;\n  // Return the proxy\n  return proxy;\n}\n\nfunction moveServerFrom(from, to, proxy) {\n  for(var i = 0; i < from.length; i++) {\n    if(from[i].name == proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n\n  for(i = 0; i < to.length; i++) {\n    if(to[i].name == proxy.name) {\n      to.splice(i, 1);\n    }\n  }\n\n  to.push(proxy);\n}\n\nfunction removeProxyFrom(from, proxy) {\n  for(var i = 0; i < from.length; i++) {\n    if(from[i].name == proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n}\n\nfunction reconnectProxies(self, proxies, callback) {\n  // Count lefts\n  var count = proxies.length;\n\n  // Handle events\n  var _handleEvent = function(self, event) {\n    return function() {\n      var _self = this;\n      count = count - 1;\n\n      // Destroyed\n      if(self.state == DESTROYED || self.state == UNREFERENCED) {\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        return this.destroy();\n      }\n\n      if(event == 'connect' && !self.authenticating) {\n        // Do we have authentication contexts that need to be applied\n        applyAuthenticationContexts(self, _self, function() {\n          // Destroyed\n          if(self.state == DESTROYED || self.state == UNREFERENCED) {\n            moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n            return _self.destroy();\n          }\n\n          // Remove the handlers\n          for(var i = 0; i < handlers.length; i++) {\n            _self.removeAllListeners(handlers[i]);\n          }\n\n          // Add stable state handlers\n          _self.on('error', handleEvent(self, 'error'));\n          _self.on('close', handleEvent(self, 'close'));\n          _self.on('timeout', handleEvent(self, 'timeout'));\n          _self.on('parseError', handleEvent(self, 'parseError'));\n\n          // Move to the connected servers\n          moveServerFrom(self.disconnectedProxies, self.connectedProxies, _self);\n          // Emit joined event\n          self.emit('joined', 'mongos', _self);\n        });\n      } else if(event == 'connect' && self.authenticating) {\n        // Move from connectingProxies\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        this.destroy();\n      }\n\n      // Are we done finish up callback\n      if(count == 0) {\n        callback();\n      }\n    }\n  }\n\n  // No new servers\n  if(count == 0) {\n    return callback();\n  }\n\n  // Execute method\n  function execute(_server, i) {\n    setTimeout(function() {\n      // Destroyed\n      if(self.state == DESTROYED || self.state == UNREFERENCED) {\n        return;\n      }\n\n      // Create a new server instance\n      var server = new Server(assign({}, self.s.options, {\n        host: _server.name.split(':')[0],\n        port: parseInt(_server.name.split(':')[1], 10)\n      }, {\n        authProviders: self.authProviders, reconnect:false, monitoring: false, inTopology: true\n      }, {\n        clientInfo: clone(self.s.clientInfo)\n      }));\n\n      // Add temp handlers\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError'));\n\n      // SDAM Monitoring events\n      server.on('serverOpening', function(e) { self.emit('serverOpening', e); });\n      server.on('serverDescriptionChanged', function(e) { self.emit('serverDescriptionChanged', e); });\n      server.on('serverClosed', function(e) { self.emit('serverClosed', e); });\n      server.connect(self.s.connectOptions);\n    }, i);\n  }\n\n  // Create new instances\n  for(var i = 0; i < proxies.length; i++) {\n    execute(proxies[i], i);\n  }\n}\n\nfunction applyAuthenticationContexts(self, server, callback) {\n  if(self.s.authenticationContexts.length == 0) {\n    return callback();\n  }\n\n  // Copy contexts to ensure no modificiation in the middle of\n  // auth process.\n  var authContexts = self.s.authenticationContexts.slice(0);\n\n  // Apply one of the contexts\n  function applyAuth(authContexts, server, callback) {\n    if(authContexts.length == 0) return callback();\n    // Get the first auth context\n    var authContext = authContexts.shift();\n    // Copy the params\n    var customAuthContext = authContext.slice(0);\n    // Push our callback handler\n    customAuthContext.push(function(err) {\n      applyAuth(authContexts, server, callback);\n    });\n\n    // Attempt authentication\n    server.auth.apply(server, customAuthContext)\n  }\n\n  // Apply all auth contexts\n  applyAuth(authContexts, server, callback);\n}\n\nfunction topologyMonitor(self, options) {\n  options = options || {};\n\n  // Set momitoring timeout\n  self.haTimeoutId = setTimeout(function() {\n    if(self.state == DESTROYED || self.state == UNREFERENCED) return;\n    // If we have a primary and a disconnect handler, execute\n    // buffered operations\n    if(self.isConnected() && self.s.disconnectHandler) {\n      self.s.disconnectHandler.execute();\n    }\n\n    // Get the connectingServers\n    var proxies = self.connectedProxies.slice(0);\n    // Get the count\n    var count = proxies.length;\n\n    // If the count is zero schedule a new fast\n    function pingServer(_self, _server, cb) {\n      // Measure running time\n      var start = new Date().getTime();\n\n      // Emit the server heartbeat start\n      emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: _server.name });\n\n      // Execute ismaster\n      _server.command('admin.$cmd', {\n        ismaster:true\n      }, {\n        monitoring: true,\n        socketTimeout: self.s.options.connectionTimeout || 2000,\n      }, function(err, r) {\n        if(self.state == DESTROYED || self.state == UNREFERENCED) {\n          // Move from connectingProxies\n          moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n          _server.destroy();\n          return cb(err, r);\n        }\n\n        // Calculate latency\n        var latencyMS = new Date().getTime() - start;\n\n        // We had an error, remove it from the state\n        if(err) {\n          // Emit the server heartbeat failure\n          emitSDAMEvent(self, 'serverHeartbeatFailed', { durationMS: latencyMS, failure: err, connectionId: _server.name });\n          // Move from connected proxies to disconnected proxies\n          moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n        } else {\n          // Update the server ismaster\n          _server.ismaster = r.result;\n          _server.lastIsMasterMS = latencyMS;\n\n          // Server heart beat event\n          emitSDAMEvent(self, 'serverHeartbeatSucceeded', { durationMS: latencyMS, reply: r.result, connectionId: _server.name });\n        }\n\n        cb(err, r);\n      });\n    }\n\n    // No proxies initiate monitor again\n    if(proxies.length == 0) {\n      // Emit close event if any listeners registered\n      if(self.listeners(\"close\").length > 0 && self.state == CONNECTING) {\n        self.emit('error', new MongoError('no mongos proxy available'));\n      } else {\n        self.emit('close', self);\n      }\n\n      // Attempt to connect to any unknown servers\n      return reconnectProxies(self, self.disconnectedProxies, function() {\n        if(self.state == DESTROYED || self.state == UNREFERENCED) return;\n\n        // Are we connected ? emit connect event\n        if(self.state == CONNECTING && options.firstConnect) {\n          self.emit('connect', self);\n          self.emit('fullsetup', self);\n          self.emit('all', self);\n        } else if(self.isConnected()) {\n          self.emit('reconnect', self);\n        } else if(!self.isConnected() && self.listeners(\"close\").length > 0) {\n          self.emit('close', self);\n        }\n\n        // Perform topology monitor\n        topologyMonitor(self);\n      });\n    }\n\n    // Ping all servers\n    for(var i = 0; i < proxies.length; i++) {\n      pingServer(self, proxies[i], function() {\n        count = count - 1;\n\n        if(count == 0) {\n          if(self.state == DESTROYED || self.state == UNREFERENCED) return;\n\n          // Attempt to connect to any unknown servers\n          reconnectProxies(self, self.disconnectedProxies, function() {\n            if(self.state == DESTROYED || self.state == UNREFERENCED) return;\n            // Perform topology monitor\n            topologyMonitor(self);\n          });\n        }\n      });\n    }\n  }, self.s.haInterval);\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nMongos.prototype.lastIsMaster = function() {\n  return this.ismaster;\n}\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nMongos.prototype.unref = function() {\n  // Transition state\n  stateTransition(this, UNREFERENCED);\n  // Get all proxies\n  var proxies = this.connectedProxies.concat(this.connectingProxies);\n  proxies.forEach(function(x) {\n    x.unref();\n  });\n\n  clearTimeout(this.haTimeoutId);\n}\n\n/**\n * Destroy the server connection\n * @param {boolean} [options.force=false] Force destroy the pool\n * @method\n */\nMongos.prototype.destroy = function(options) {\n  // Transition state\n  stateTransition(this, DESTROYED);\n  // Get all proxies\n  var proxies = this.connectedProxies.concat(this.connectingProxies);\n  // Clear out any monitoring process\n  if(this.haTimeoutId) clearTimeout(this.haTimeoutId);\n  // Clear out authentication contexts\n  this.s.authenticationContexts = [];\n\n  // Destroy all connecting servers\n  proxies.forEach(function(x) {\n    x.destroy(options);\n  });\n\n  // Emit toplogy closing event\n  emitSDAMEvent(this, 'topologyClosed', { topologyId: this.id });\n}\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nMongos.prototype.isConnected = function() {\n  return this.connectedProxies.length > 0;\n}\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nMongos.prototype.isDestroyed = function() {\n  return this.state == DESTROYED;\n}\n\n//\n// Operations\n//\n\n// Execute write operation\nvar executeWriteOperation = function(self, op, ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  // Ensure we have no options\n  options = options || {};\n  // Pick a server\n  var server = pickProxy(self);\n  // No server found error out\n  if(!server) return callback(new MongoError('no mongos proxy available'));\n  // Execute the command\n  server[op](ns, ops, options, callback);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.insert = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  // Not connected but we have a disconnecthandler\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if(!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation(this, 'insert', ns, ops, options, callback);\n}\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.update = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  // Not connected but we have a disconnecthandler\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if(!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation(this, 'update', ns, ops, options, callback);\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.remove = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  // Not connected but we have a disconnecthandler\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if(!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation(this, 'remove', ns, ops, options, callback);\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.command = function(ns, cmd, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  var self = this;\n\n  // Pick a proxy\n  var server = pickProxy(self);\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if((server == null || !server.isConnected()) && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // No server returned we had an error\n  if(server == null) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Cloned options\n  var clonedOptions = cloneOptions(options);\n  clonedOptions.topology = self;\n\n  // Execute the command\n  server.command(ns, cmd, clonedOptions, callback);\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.cursor = function(ns, cmd, cursorOptions) {\n  cursorOptions = cursorOptions || {};\n  var FinalCursor = cursorOptions.cursorFactory || this.s.Cursor;\n  return new FinalCursor(this.s.bson, ns, cmd, cursorOptions, this, this.s.options);\n}\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nMongos.prototype.auth = function(mechanism, db) {\n  var allArgs = Array.prototype.slice.call(arguments, 0).slice(0);\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  var callback = args.pop();\n  var currentContextIndex = 0;\n\n  // If we don't have the mechanism fail\n  if(this.authProviders[mechanism] == null && mechanism != 'default') {\n    return callback(new MongoError(f(\"auth provider %s does not exist\", mechanism)));\n  }\n\n  // Are we already authenticating, throw\n  if(this.authenticating) {\n    return callback(new MongoError('authentication or logout allready in process'));\n  }\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!self.isConnected() && self.s.disconnectHandler != null) {\n    return self.s.disconnectHandler.add('auth', db, allArgs, {}, callback);\n  }\n\n  // Set to authenticating\n  this.authenticating = true;\n  // All errors\n  var errors = [];\n\n  // Get all the servers\n  var servers = this.connectedProxies.slice(0);\n  // No servers return\n  if(servers.length == 0) {\n    this.authenticating = false;\n    callback(null, true);\n  }\n\n  // Authenticate\n  function auth(server) {\n    // Arguments without a callback\n    var argsWithoutCallback = [mechanism, db].concat(args.slice(0));\n    // Create arguments\n    var finalArguments = argsWithoutCallback.concat([function(err) {\n      count = count - 1;\n      // Save all the errors\n      if(err) errors.push({name: server.name, err: err});\n      // We are done\n      if(count == 0) {\n        // Auth is done\n        self.authenticating = false;\n\n        // Return the auth error\n        if(errors.length) {\n          // Remove the entry from the stored authentication contexts\n          self.s.authenticationContexts.splice(currentContextIndex, 0);\n          // Return error\n          return callback(MongoError.create({\n            message: 'authentication fail', errors: errors\n          }), false);\n        }\n\n        // Successfully authenticated session\n        callback(null, self);\n      }\n    }]);\n\n    // Execute the auth only against non arbiter servers\n    if(!server.lastIsMaster().arbiterOnly) {\n      server.auth.apply(server, finalArguments);\n    }\n  }\n\n  // Save current context index\n  currentContextIndex = this.s.authenticationContexts.length;\n  // Store the auth context and return the last index\n  this.s.authenticationContexts.push([mechanism, db].concat(args.slice(0)));\n\n  // Get total count\n  var count = servers.length;\n  // Authenticate against all servers\n  while(servers.length > 0) {\n    auth(servers.shift());\n  }\n}\n\n/**\n * Logout from a database\n * @method\n * @param {string} db The db we are logging out from\n * @param {authResultCallback} callback A callback function\n */\nMongos.prototype.logout = function(dbName, callback) {\n  var self = this;\n  // Are we authenticating or logging out, throw\n  if(this.authenticating) {\n    throw new MongoError('authentication or logout allready in process');\n  }\n\n  // Ensure no new members are processed while logging out\n  this.authenticating = true;\n\n  // Remove from all auth providers (avoid any reaplication of the auth details)\n  var providers = Object.keys(this.authProviders);\n  for(var i = 0; i < providers.length; i++) {\n    this.authProviders[providers[i]].logout(dbName);\n  }\n\n  // Now logout all the servers\n  var servers = this.connectedProxies.slice(0);\n  var count = servers.length;\n  if(count == 0) return callback();\n  var errors = [];\n\n  function logoutServer(_server, cb) {\n    _server.logout(dbName, function(err) {\n      if(err) errors.push({name: _server.name, err: err});\n      cb();\n    });\n  }\n\n  // Execute logout on all server instances\n  for(i = 0; i < servers.length; i++) {\n    logoutServer(servers[i], function() {\n      count = count - 1;\n\n      if(count == 0) {\n        // Do not block new operations\n        self.authenticating = false;\n        // If we have one or more errors\n        if(errors.length) return callback(MongoError.create({\n          message: f('logout failed against db %s', dbName), errors: errors\n        }), false);\n\n        // No errors\n        callback();\n      }\n    })\n  }\n}\n\n/**\n * Get server\n * @method\n * @return {Server}\n */\nMongos.prototype.getServer = function() {\n  var server = pickProxy(this);\n  if(this.s.debug) this.emit('pickedServer', null, server);\n  return server;\n}\n\n/**\n * Get a direct connection\n * @method\n * @return {Connection}\n */\nMongos.prototype.getConnection = function() {\n  var server = this.getServer();\n  if(server) return server.getConnection();\n}\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nMongos.prototype.connections = function() {\n  var connections = [];\n\n  for(var i = 0; i < this.connectedProxies.length; i++) {\n    connections = connections.concat(this.connectedProxies[i].connections());\n  }\n\n  return connections;\n}\n\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * A mongos reconnect event, used to verify that the mongos topology has reconnected\n *\n * @event Mongos#reconnect\n * @type {Mongos}\n */\n\n/**\n * A mongos fullsetup event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * A mongos all event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#all\n * @type {Mongos}\n */\n\n/**\n * A server member left the mongos list\n *\n * @event Mongos#left\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos list\n *\n * @event Mongos#joined\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that joined\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Mongos#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Mongos#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Mongos#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Mongos#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Mongos#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Mongos#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Mongos#serverHeartbeatStarted\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Mongos#serverHeartbeatFailed\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Mongos#serverHeartbeatSucceeded\n * @type {object}\n */\n\nmodule.exports = Mongos;\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/test1.js":"var Server = require('./lib/topologies/server');\n\n// Attempt to connect\nvar server = new Server({\n  host: 'localhost', port: 27017, socketTimeout: 500\n});\n\n// function executeCursors(_server, cb) {\n//   var count = 100;\n//\n//   for(var i = 0; i < 100; i++) {\n//     // Execute the write\n//     var cursor = _server.cursor('test.test', {\n//         find: 'test.test'\n//       , query: {a:1}\n//     }, {readPreference: new ReadPreference('secondary')});\n//\n//     // Get the first document\n//     cursor.next(function(err, doc) {\n//       count = count - 1;\n//       if(err) console.dir(err)\n//       if(count == 0) return cb();\n//     });\n//   }\n// }\n\nserver.on('connect', function(_server) {\n\n  setInterval(function() {\n    _server.insert('test.test', [{a:1}], function(err, r) {\n      console.log(\"insert\")\n    });\n  }, 1000)\n  // console.log(\"---------------------------------- 0\")\n  // // Attempt authentication\n  // _server.auth('scram-sha-1', 'admin', 'root', 'root', function(err, r) {\n  //   console.log(\"---------------------------------- 1\")\n  //   // console.dir(err)\n  //   // console.dir(r)\n  //\n  //   _server.insert('test.test', [{a:1}], function(err, r) {\n  //     console.log(\"---------------------------------- 2\")\n  //     console.dir(err)\n  //     if(r)console.dir(r.result)\n  //     var name = null;\n  //\n  //     _server.on('joined', function(_t, _server) {\n  //       if(name == _server.name) {\n  //         console.log(\"=========== joined :: \" + _t + \" :: \" + _server.name)\n  //         executeCursors(_server, function() {\n  //         });\n  //       }\n  //     })\n  //\n  //     // var s = _server.s.replicaSetState.secondaries[0];\n  //     // s.destroy({emitClose:true});\n  //     executeCursors(_server, function() {\n  //       console.log(\"============== 0\")\n  //       // Attempt to force a server reconnect\n  //       var s = _server.s.replicaSetState.secondaries[0];\n  //       name = s.name;\n  //       s.destroy({emitClose:true});\n  //       // console.log(\"============== 1\")\n  //\n  //       // _server.destroy();\n  //       // test.done();\n  //     });\n  //   });\n  // });\n});\n\nserver.connect();\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/test34.js":"var Server = require('./').Server\n  , bson = require('bson');\n\n// Attempt to connect\nvar server = new Server({\n    host: 'localhost'\n  , port: 27017\n  , size: 10\n  , bson: new bson()\n});\n\n// Add event listeners\nserver.on('connect', function(server) {\n  var db = 'develop';\n\n  const cmd = {\n    \"find\": \"develop.user\",\n    \"filter\": {\n      \"$or\": [\n        { \"provider\": \"google\", \"providerData.id\": \"placeholder\" },\n        { \"additionalProvidersData.google.id\": \"placeholder\" },\n        { \"email\": \"placeholder\" }\n      ]\n    },\n    \"limit\": 1,\n    \"projection\": {},\n    \"sort\": {}\n  };\n  \n  server.command(\"develop.$cmd\", cmd, {}, (err, response) => {\n    console.log(err, response);\n  });\n});\n\nserver.connect();\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/t.js":"    var Server = require('../../../lib/topologies/server')\n      , bson = require('bson');\n\n    // Attempt to connect\n    var server = new Server({\n        host: configuration.host\n      , port: configuration.port\n      , size: 10\n      , bson: new bson()\n    });\n\n    // Add event listeners\n    server.on('connect', function(server) {\n      var db = 'develop';\n  \n      const cmd = {\n        \"find\": \"user\",\n        \"filter\": {\n          \"$or\": [\n            { \"provider\": \"google\", \"providerData.id\": \"placeholder\" },\n            { \"additionalProvidersData.google.id\": \"placeholder\" },\n            { \"email\": \"placeholder\" }\n          ]\n        },\n        \"limit\": 1,\n        \"projection\": {},\n        \"sort\": {}\n      };\n      \n      server.command(db + \".$cmd\", cmd, {}, (err, response) => {\n        console.log(err, response);\n      });\n    });\n\n","/home/travis/build/npmtest/node-npmtest-mongodb-core/node_modules/mongodb-core/lib/tools/smoke_plugin.js":"var fs = require('fs');\n\n/* Note: because this plugin uses process.on('uncaughtException'), only one\n * of these can exist at any given time. This plugin and anything else that\n * uses process.on('uncaughtException') will conflict. */\nexports.attachToRunner = function(runner, outputFile) {\n  var smokeOutput = { results : [] };\n  var runningTests = {};\n\n  var integraPlugin = {\n    beforeTest: function(test, callback) {\n      test.startTime = Date.now();\n      runningTests[test.name] = test;\n      callback();\n    },\n    afterTest: function(test, callback) {\n      smokeOutput.results.push({\n        status: test.status,\n        start: test.startTime,\n        end: Date.now(),\n        test_file: test.name,\n        exit_code: 0,\n        url: \"\"\n      });\n      delete runningTests[test.name];\n      callback();\n    },\n    beforeExit: function(obj, callback) {\n      fs.writeFile(outputFile, JSON.stringify(smokeOutput), function() {\n        callback();\n      });\n    }\n  };\n\n  // In case of exception, make sure we write file\n  process.on('uncaughtException', function(err) {\n    // Mark all currently running tests as failed\n    for (var testName in runningTests) {\n      smokeOutput.results.push({\n        status: \"fail\",\n        start: runningTests[testName].startTime,\n        end: Date.now(),\n        test_file: testName,\n        exit_code: 0,\n        url: \"\"\n      });\n    }\n\n    // write file\n    fs.writeFileSync(outputFile, JSON.stringify(smokeOutput));\n\n    // Standard NodeJS uncaught exception handler\n    console.error(err.stack);\n    process.exit(1);\n  });\n\n  runner.plugin(integraPlugin);\n  return integraPlugin;\n};\n"}